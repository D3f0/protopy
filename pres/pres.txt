
Aplicaciones Web Desconectadas
==============================

    :autores: * Defossé, Nahuel 
              * van Haaster, Diego Marcos
    :tutor: Sáenz Lopez, Marta
    :fecha: Noviembre 2009
    :url: http://code.google.com/p/protopy/

Objetivos
---------

* Open Source
    Coste de licenciemiento nulo y libertad

* Multiplataforma
    Windows, Linux, Mac y móviles (dode exista un browser)
    
* Adaptación minima de aplicaciones existentes
    Integración con un Frameworks Web.
    
* Fácil utilización
    Reutilizar los conceptos/patrones del framework para una rápida asimilación de los desarrolladores.
	

Careencias del Browser
----------------------

 * Base de datos
 
 * Servidor Web
 
 * Lenguaje de programación
 
 * Concurrencia

 * Conectividad con el entorno del cliente



Tecnologías Existentes (1)
---------------------------


* **Silverlight** (.NET Framework, Microsoft)
	Solución muy interesante, pero **cerrada**.
	*Promesa* de no cautividad.

* Otras alternativas
    
    AIR, JavaFX, XUL, etc.

.. Explicación:
.. Silverlight -> * lenguaja a CLI (.NET), Silverlight CLI -> "Applet"
.. Silverlight -> DB en el Browser e integración con Winblows
.. Silverlight -> Animaciones y definicion de GUI en XML

.. AIR -> ActionScript (casi JS2), Animación, DB en el Cliente y Desktop
.. JavaFX -> Applet++, Nuevo Lenguaje mix de JS y Java (JS con tipado estático)
.. XUL -> Mozilla para aplicaciones 
 
.. Todos se van por la tangente, no atacan el problema por 
.. mercado cautivo, si alguien se le ocurre otra, levante la mano.

.. JavaScript recibió una mala reputación por sus implementaciones, pero
.. hoy en día es el soporte de lo "2.0". Los profesionales 

.. Google implementó 

Tecnologías Existentes
-----------------------

* JavaScript!
    
    - Objetos
    - Expresiones Regulares
    - Patrones propios (Module, Closures)
    
.. No reivnetar nada, Google apostó por JavaScript en la implementación de
.. Gears.    

Tecnologías Existentes (2)
--------------------------

* **Google Gears**
	Añade al navegador 3 coponentes
		* Local Server
			Un servidor de archivos locales
		* DataBase
			Una base de datos transaccional
		* Worker Pool
			Sistema de Hilos con pasaje de mensajes
			
.. Si bien estamos en una era "2.0", las implementaciones de JS de 
.. los browsers se quedaron en el tiempo. La fundación Mozilla
.. que tiene como lenguaje plataforma JS implementó métodos no estandard
.. como palaeativo a la ausencia de ES5.
 

.. Google creó su compilador de JS para implementar sus aplicaciones web.
.. Cuando implementaban Wave para IE, se dieron cuenta que por más esfuerzos
.. que haga redmond, nunca va a ser un navegador para "aplicaciones" web.
.. Crearon un frame para IE.

.. El problema de los estándares no se resume a JavaScript, sino también a
.. DOM y HTML5, SVG, etc. Lo que se suele hacer es usar librerías que enmascaran
.. la implementaciones defectuosas en una sintaxis más bonita. jQurty, Protype,
.. Dojo, Mochikit. 

.. Hablar de Jhon Reisg, Douglas Crockford, patrones de JavaScript.

.. Entonces nos quedamos con SpiderMonkey. 

SpiderMonkey 
-------------
			
* Generador::

    var mi_gen = function (numero) {
        while (numero)
            yield numero --;
    }
    for (var x in mi_gen(100)) 
        console.log(x)

Utilidad:
    Recuperación perezosa de datos      



SpiderMonkey 
------------

* Orientación a objetos:

    ``__noSuchMethod__``
    
    ``__defineGetter__``
    
    ``__defineSetter__``

* Azucar sintáctico::

    var [nombre, apellido] = ["Waldo", "Roberts"]; 


.. Nos vamos al servidor, nuestro objetivo es "desconctar"

.. CGI, lean WSGI del doc para ver que es simple ;)

Django
-------



* Reutilización

* Simple 
    Escrito en Python.
    Sin XML/YAML/INI/<ponga su markup aquí>
    Pcas capas M T V.
    
* DRY
    Vistar genéricas, ContetType framework.     

Django (2)
----------
     
* Con baterías incluidas
    Adminsitración, Geolocalización.

* Open Source
    Gran comunidad, una fundación, varios diarios utilziandolo.

* Extensible
    Middlewares (transversalidad). 
    
Django Proyecto
---------------

Un paquete con:
    
    - ``"settins.py"`` configuración
    
    - ``"urls.py"`` mapeo de URLs en funcionalidad  
    
    - ``"__init__.py"`` :) paquete
    
Django Aplicación
-----------------

Un paquete dentro del proyecto con:
    
    - ``"models.py"`` deficicón en Python de la estrcutra de la DB.
    
    - ``"views.py"`` funciones que atienden en URLs. **REGEX!**
    
    - ``"urls.py"`` (opcional, para modularidad)


Django Templates
----------------

Los templates son archivos de texto que se rellenan con
las salidas de las vistas:

    * Poca lógica
        
        ``for``, ``if``, formateo
    
    * Modularidad
        
        Herencia e inclusión
    
    * Template Tags
        
        Funcionalidad extra en funciones planas

Ciclo del Request
-----------------

    Gráfico


.. Como implementamos este grandioso framework en el cliente??
.. No tenemos Python... 
.. Ventaja: Si cambia DOM con HTML5, solo hace falta adaptar Protopy, las
.. aplicaciones deberían seguir corriendo :)

    
Protopy
-------
Python on JavaScript 1.7
 
    * Módulos::
        
        require('pepe.x')

.. Hacer un comentario sobre el ciclo de trabajo normal con javascript y
.. html, y como los módulos y la función require camba este enfoque.
.. Cada módulo define su propio espacio de nombres.
.. Cada módulo publica una interfaz.

        
    
Protopy OO
----------    
    
    * OO Pythonico
    
    * API de DOM, Eventos, API pythonica.
    
    * Gears
    
Protopy Estructura
------------------

    Gráfico     
    
Doff
----
    
Django on Protopy -> **Djano Offline** :)

    - DB API
    
    - Templates
    
    - Proyecto desconectado
    
Doff Estructura
---------------

Gráfico

    
Offline
-------

Soporte en el servidor para aplicación desconectada.

    - Instalación
    
    - Seguridad
    
    - Sincronización
                  
    
.. SpiderMonkey -> Getters, Setters, noSuchMethod
.. Iteradores, poner un ejemplo (poner ejemplo)


Demo
----

Lineas Futuras
--------------


FIN
---

¡Muchas Gracias!