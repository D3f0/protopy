.. _cliente:

#######################
Tecnologías del cliente
#######################

**********************************
Generación dinámica de páginas Web
**********************************

Desde la perspectiva de un usuario, la Web consiste en una enorme cantidad de
documentos interconectados a nivel mundial llamados *paginas Web*.
En el clinete las paginas se ven mediante un programa llamado navegadores  

JavaScript ha tenido durante mucho tiempo la reputación de lenguaje torpe e inadecuado para el desarrollo serio. Esto ha sido en gran parte debido a las implementaciones incompatibles del lenguaje y del DOM en varios navegadores, y al uso extenso de código "pegado" lleno de errores por parte de los aficionados. Los errores en tiempo de ejecución eran tan frecuentes y difíciles de solucionar que pocos programadores intentaban corregirlos.

La reciente aparición de navegadores con un soporte adecuado de los estándares web, frameworks para JavaScript tales como Prototype, y herramientas de depuración de alta calidad han facilitado enormemente la creación de código organizado y escalable en JavaScript, y la aparición de AJAX lo ha hecho esencial. Mientras hasta hace poco JavaScript era solo utilizado para las tareas relativamente simples y no críticas (validación de formularios y decoraciones llamativas), actualmente se está utilizando para escribir código complejo que a menudo es responsable de buena parte de la funcionalidad básica de un sitio. Los errores en tiempo de ejecución y el comportamiento imprevisible ya no son molestias de menor importancia; son errores fatales.

**************************
Estructura de un navegador
**************************

.. _navegador-web:

Navegador Web
=============

.. note::
	Acá abordamos desde la perspectiva del navegador HTTP, HTML y Javascript
	
	
Un navegador web o *web browser*, es un software encargado de representar 
documentos de hípertexto al usuario, siendo los lenguajes de codificación de hipertexto más 
populares HTML y XHTML. Un navegador no solo representa los documentos de hipertexto, sino
que puede representar otros tipos de documentos, como imágenes
(:term:JPEG, :term:GIF, :term:PNG, etc.), 
sonido (:term:WAV, :term:MP3, :term:OGG) y contenido
multimedial como video (:term:MPEG, :term:H264, :term:RM, :term:MOV), 
e interactivos como es el caso de Macromedia Flash, applets Java o controles ActiveX en
la plataforma Windows. Debido a la cantidad de recursos que debe manejar un navegador, 
el servidor web agrega a cada respuesta al cliente una cabecera donde le indica 
el tipo de recurso que está engregado. Esta especificación se realiza con el 
standard :term:MIME.


Un navegador web acepta como entrada del usuario una URL, comunmente conocida como dirección 
de internet. Una vez validada la URL, el navegador web descarga el recurso apuntado por la URL
mediante el protcolo HTTP.

Una URL tiene el siguiente esquema, donde podemos diferenciar varios comopnentes

.. figure:: ../_svg/esquema_urls.png
    
    Forma de una URL.

Los componetes de una URL son:

	* esquema
		Especifica el mecanismo de comunicación. Generalmente HTTP y HTTPS en una comunicación
		asegurada mediante TLS [*]_ .
		
	* anfitrión
		Especifica el nombre de dominio del servidor en internet, por ejemplo: *google.com*, 
		*nasa.gov*, *wikipedia.com*, etc.
		Se popularizó la utilización de el subdominio "www" para identificar el aniftrión
		que ejecuta el servidor web, dando lugar a direcciones del tipo *www.google.com*, 
		*www.nasa.gov*, etc.
		
		El *puerto* es un parametro de conexión TCP, y suele ser omitido debido a que 
		el esquema suele determinarlo, sindo 80 para HTTP y 443 para HTTPS. 
		 
	* recurso
		Especifica dentro del servidor, la ruta para acceder al recurso
		
	* query
		El parámetro query tiene sentido cuando el recurso apuntado por la ruta no
		se trata de una página estática y sirve para el pasaje de parámetros.
		El programa que genera el recurso puede recbir como argumentos estos parámetros, 
		por ejemplo, cuando se ingresa la palaba *foo* en el buscador google, la 
		url que provee el resutlado de la búsqueda es la siguiente::
			
			http://www.google.com/search?*q=foo*
		
	
	* enlace
		Dentro de un documento de hipertexto pueden existir destinos de enlaces, 
		o enlaces internos. Gracias a este parámeto se puede enlazar a una 
		sección epecífica de un documento, permitiendo al navegador ubicarse
		visualmente.

.. [*] *Transport Security Layer* es el sucesor de *Secure Socket Layer* (SSL), es un protocolo
criptográfico que provee conexiones seguras a traves de una red, típicamente internet [WikiSSL2009]_ .

.. [WikiSSL2009] *Transport Layer Security*, Wikipedia, 2009, último acceso, Agosto 2009.

Cuando el recurso apuntado se encuentra en internet, el navegador realiza una conexión hacia
el servidor web indicado por el dominio y mediante el prtocolo HTTP le informandole a que
recurso dese acceder.


HTTP
====

Para acceder al recurso *~ndefosse/introducion_lenguaje_python.html* en
el servidor *students.unp.edu.ar*, de la url http://students.unp.edu.ar/~ndefosse/introducion_lenguaje_python.html, el
navegador conforma la siguiente consulta::

	GET /~ndefosse/introduccion-lenguaje-python.html HTTP/1.1
	Host: students.unp.edu.ar
	User-Agent: Mozilla/5.0
	Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
	Accept-Language: es-ar,en-us;q=0.7,en;q=0.3
	Accept-Encoding: gzip,deflate
	Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7
	Cookie: user_id=G7NVG5YY51I9DZAIJDEDQIXYQSRF0CTL

.. _http_request:

Esto conforma lo que se conoce como una consulta HTTP o *HTTP Request*. En la primera
linea se conforma de el método HTTP y el nombre del recurso, finalizando con la versión
del prtocolo que soporta el navegador (o cliente)::
	
	GET /~ndefosse/introduccion-lenguaje-python.html HTTP/1.1
	
La sgunda linea es el host al cual se accede. Un mismo servidor web puede estar publicado
en varios dominos, mediante esta linea se puede discriminar desde cual se intenta acceder
al recurso::

	Host: students.unp.edu.ar
	
El siguiente componente del *request* es la linea que identifica al cliente, en este caso
el navegador informa que se trata de Mozila, versión 5::
	User-Agent: Mozilla/5.0


Una vez que el servidor web a localizado y accedido al recurso, precede a enviar la respuesta
	
.. _cliente-html:

HTML
====
HTML es un lenguaje de marcado que teiene como objetivo describir un documento de hipertexto.
Un documento HTML se conforma por una serie de *tags* o etiquetas.

.. figure:: ../_svg/etiqueta_html.png
    
    Una etiqueta HTML.
 
Un documento HTML está delimitado por las etiquetas o *tags* html y contiene una cabecera
delimitada por *head* y un cuerpo, delmitado por *body*.

.. code-block:: html
	
	<html>
		<head>
			<title>Mi pagina</title>
		</head>
		<body>
			<h1>Título principal</h1> <!-- comentario -->
			<p>Párrafo</p>
		</body>
	</html>

Un documento HTML contener enlaces a recursos entendibles para el navegador, como los
enlaces a hojas de estilos o código javascript.

La inclusión de una hoja de estilo se realiza mediante el tag *link*, de la siguiente manera:

.. code-block:: html

	<link type="text/css" rel="stylesheet" href="hoja_de_estilos.css">

Se puede además embeber en la página el estilo, de la siguente manera

.. code-block:: html

	<style type="text/css">
	
		BODY {
			font-family: "Verdana";
			font-size: 12pt;
			padding: 2px 2px 3px 2px;
		}
	</style>
	
Al haberse incrustado el estilo en una página en particular, este solo tiene validés
para ese recurso en particular.

Otro tipo de recurso entendible para el navegador constituye la inclusión de código
de ejecución en el clinete, mediante el tag script.

.. code-block:: html

	<script type="text/javscript" src="mi_codigo.js"></script>
	
Además de la inclusión de recursos javascript externos, el código javascript se
puede embeber en el código html de varias maneras [StephenChapmanJS2009]_, entre ellas:

.. code-block:: html

	<script type="text/javascript">
	<!-- // Javascript en un comentario, para pasar validadores XHTML y ocultar de navegadores
		// que no soporten Javascript
		var x = 2;
		var y = 4;
	// -->
	</script> 

.. [StephenChapmanJS2009] *Javascript and XML*, Stephen Chapman, About.com, último acceso Agosto 2009, http://javascript.about.com/library/blxhtml.htm


.. _cliente-css:

CSS
===

Una hoja de estilo en cascada especfica como se va a mostrar un documento en pantalla, como
se va a imprimir o inclusive como se realiza la pronunciación a través de un dispositivo de
lectura [W3cCSS2009]_ .

El objetivo de CSS es separar el contendio de la presentación de un documento HTML o XML. Una
hoja de estilo puede ser enlazada desde varias paginas, permitiendo mantener coherencia y 
consistencia en el estilo. 


.. [W3cCSS2009] *Guia breve de CSS*, W3C, español, último acceso Agosto 2009, http://www.w3c.es/divulgacion/guiasbreves/HojasEstilo

.. _cliente-javascript:

JavaScript
==========

Javascript es un lenguaje de programación interpretado creado originalmente por
Brendan Eich para la empresa Netscape con el nombre de Mocha. El lenguaje surge
a principios de 1996, como un lenguaje de scripting para la Web y apuntado a la
interacción directa con el usuario.

Con una sintaxis semejante a la de Java y C, JavaScript dista mucho de ser Java
y debe su nombre más a cuestiones de marketing que a principios de diseño, de
hecho se reconocen mayores influencias de lenguajes como Self, Scheme, Perl e
incluso en versiones modernas de Python.

En junio de 1997 la European Computer Manufacturers' Association ECMA, adopta
como un estándar a JavaScript, con el nombre de ECMAScript. Este importante paso
marco un inicio para la compatibilidad entre navegadores y tras él las empresas
comenzaron a desarrollar sus propias versiones del lenguaje, JScript es la
implementación de Microsoft, muy similar al la de Netscape, pero con ciertas
diferencias en el modelo de objetos del navegador [*]_; con la finalidad de
evitar la incopatibilidad que se avecinaba, el World Wide Web Consortium diseñó
el estándar Document Object Model (DOM) que en conjunto con el lenguaje
resuelven la modificación de la página Web en el cliente. La batalla entre los
navegadores se continua luchando y probablemente de para unos cuantos años más,
pero estos dos estandares representan la base para un desarrollo web compatible.

.. [*] Por que sera?.

En la actualidad, todo computador personal en el mundo tiene, al menos, ún
interprete de JavaScript instalado y activo en el. A pesar de su popularidad,
solo algunos saben que JavaScript es un muy buen lenguaje de programación
dinámico, orientado a objetos y de proposito general.

Incluir JavaScript en un documento
----------------------------------

Cualquier documento HTML puede incluir JavaScript y el método correcto que
define la W3C es incluir javascript como un archivo externo, tanto por
cuestiones de accesibilidad, como practicidad y velocidad en la navegación.
Para esto basta con escribir en el documento HTML:

.. code-block:: html

    <script type="text/javascript" src="[URL]"></script>

Siendo [URL] la URL relativa o absoluta del recurso con código JavaScript.
Cuando el navegador descarga el documento y comienza su lectura al encontrar
esta etiqueta solicita al servidor el archivo referenciado por URL y lo
interpreta, para continuar luego con la lectura del resto de las etiquetas. 

El otro método para incluir código, es hacerlo directamente en el documento
entre los elementos <script> y </script>, aunque esta practica no es la
recomendada:

.. code-block:: html

    <script type="text/javascript">
    <!--    
        // código JavaScript
    -->
    </script>

De forma similar a la anterior, el navegador comienza con la interpretacion del
codigo al encontrar la etiqueta y luego continua con la lectura del resto de las
etiquetas.

Orientado a Objetos
-------------------

JavaScript es un lenguaje orientado a objetos, es más, todo en este lenguaje es
un objeto. Normalmente a muchos programadores de Java o C++ les cuesta
comprender la implementación de objetos que provee JavaScript y esto es así
porque el lenguaje esta orientado a prototipos.

Algunos argumentan que JavaScript no es verdaderamente orientado a objetos
porque no provee ocultación de la información. Pero resulta ser que los objetos
de JavaScript pueden tener variables privadas y métodos privados gracias a las
clausuras.

A continuacion se explica como crear un objeto:

.. code-block:: javascript

    uno = new Object();
    dos = {};

En este primer ejemplo se ver que hay dos formas de crear objetos, en particular
la segunda forma hace uso de una característica propia del lenguaje para
declarar estructuras de datos y resulta de mucha utilidad en los casos de
intercambio de mensajes mediante el estándar :term:`JSON`. Otros tipos de
objetos pueden ser declarados de esta manera, como:

.. code-block:: javascript

    cadenas = "";
    arreglos = [];
    funciones = function() {};

Las caracteristicas dinámicas de lenguaje posibilitan la modificación de los
objetos en tiempo de ejecución, esto quiere decir que a un objeto, luego de ser
creado, se le pueden agregar o eliminar métodos y propiedades:

.. code-block:: javascript

    uno.variable = “hola”;
    dos.metodo = new Function();

De esta forma se tienen dos objetos personalizados uno con un "atributo" y otro
con un "metodo", de esta manera se pueden continuar agregando miembros de
cualquier tipo y hacer crecer los objetos. Sin embargo, crear objetos así no es
cómodo, ya que si se quisiéra crear una copia de este objeto se deberían
declarar nuevamente todos sus miembros.

Creando ‘Clases’:

La forma en que los lenguajes orientados a objetos comúnmente resuelven el
problema anterior es mediante el uso de clases, en JavaScript no es posible
declarar clases, pero si es posible instanciar objetos a partir de un
constructor.

El objeto Function se utiliza como objeto instanciable en JavaScript, y el
cuerpo de la función es el constructor del objeto. Para emular el
comprortamiento propio de una clase el método mas difundido es aprovechar el
funcionamiento de la plabra reservada this dentro del constructor y las
funciones miembro. Cuándo una función es llamada con el operador new, this hace
referencia al objeto que será retornado.

.. code-block:: javascript

    /*clase de ejemplo*/

    Clase = function() {
        this.propiedad = “hola!”;
        this.metodo = function(){
            alert(this.propiedad);
        }
    }
    objeto = new Clase(); // instanciamos ‘Clase’

Podria parecer que aquí se terminan los problemas pero no es así, esta forma de
crear clases provoca que cada objeto tenga una versión unica de sus ‘metodos’,
cuando lo ideal seria que todos los objetos compartieran la misma función.

La propiedad ‘Prototype’:

Todas las funciones tienen una propiedad llamada prototype, esta propiedad es un
objeto que será utilizado como ‘modelo’ inicial de todos los objetos que sean
creados con esta función cuando sea utilizada como constructor.

Reescribiendo el ejemplo anterior el código quedaría así:

.. code-block:: javascript

    /* creamos un constructor limpio */

    Clase = new Function();
    Clase.prototype.propiedad = “hola!”;
    Clase.prototype.metodo = function(){
        alert(this.propiedad);
    }
    objeto = new Clase(); // instanciamos ‘miClase’

Ahora todos los objetos creados a partir de ‘Clase’ comparten inicialmente las
mismas referencias en todas sus propiedades, esto significa que, todos los
objetos van a compartir la misma versión de ‘metodo’.

Adicionalmente, al utilizar la propiedad prototype, se obtiene otra ventaja y es
poder usar la palabra reservada instanceof para determinar si un objeto es
instancia de un constructor.

..

    http://javis.wordpress.com/2006/10/23/javascript-orientado-a-objetos/

************************
Evolución del JavaScript
************************

Herencia
========

JavaScript no puede tener herencia orientada a clases, pero tiene herencia
"prototipal". Existen muchos autores que implementan su forma de emular la
herencia en JavaScript y entre los métodos mas utilizados se detallan a
continuacion dos prinsipios basicos ampliamente difundidos. 

Object masquerading
-------------------

Este método saca provecho del comportamiento de la palabra reservada this
dentro de los constructores.
El funcionamiento es el siguiente: Un constructor asigna propiedades y métodos
a un objeto referenciándolo con la palabra clave this, como un constructor es
simplemente una función, se puede usar el constructor de una clase A como
método de una clase B.

.. code-block:: javascript
    
    function ClaseA(nombre){
        this.nombre = nombre;
        this.identificarse = function(){
            alert(this.nombre);
        }
    }

Recordemos que en un constructor, this hace referencia al nuevo objeto que será
retornado. Pero en un método, this hace referencia al objeto desde el cual fue
llamado.

.. code-block:: javascript
     
    function ClaseB(nombre){
        this.superClase = ClaseA;
        this.superClase(nombre);
        delete this.superClase;
    }

En el código anterior, el constructor ‘ClaseA’, es llamado como método del nuevo
objeto que se esta creando en ‘ClaseB’, por lo tanto, todas las propiedades y
métodos que se crean en ClaseA se van a agregar al nuevo objeto de ClaseB.

Quizás el punto mas interesante del Object masquerading, frente a otros métodos
de emular herencia, es que soporta la herencia múltiple, esto significa que un
objeto puede heredar de mas de una clase al mismo tiempo. Solo basta con llamar
a cuantos constructores sean necesarios dentro del constructor de la clase hija.

Prototype chaining
------------------

Anteriormente se mostro como definir clases utilizando el objeto prototype.
Prototype chaining se basa en este objeto y es el método recomendado por el
standard ECMA Script.
Prototype es una propiedad del objeto Function, que actúa como un template sobre
el cual se van a crear nuevos objetos. Mas precisamente, las propiedades y
métodos del objeto prototype van a ser pasados a todas las instancias de esa
clase.

El ejemplo anterior utilizando prototype chaining quedaría de la siguiente manera:

.. code-block:: javascript

    function ClassA() {}
    ClassA.prototype.nombre = “”;
    ClassA.prototype.identificarse = function() {
        alert(this.nombre);
    }
    function ClassB() {}    
    ClassB.prototype = new ClassA();

La última línea del ejemplo muestra el funcionamiento del prototype chaining.
Lo que ocurre es que asignamos al prototipo de ‘ClassB’ una nueva instancia de
‘ClassA’.
De ahora en adelante, todos los objetos creados con ‘ClassB’ van a tener,
también, los mismos métodos y propiedades de la instancia de ‘ClassA’. Y si
queremos agregar mas métodos y propiedades, lo único que tenemos que hacer es
agregárselos al prototype de ‘ClassB’.

Lo malo de este método para emular herencia, es que no se puede pasar parámetros
a la clase base, como hicimos en el ejemplo de Object masquerading.

Lo bueno, es que el operador instanceof funciona de una manera única: por cada
instancia de ClaseB, instanceof nos retorna true tanto con ‘ClaseA’ como con
‘ClaseB’:

.. code-block:: javascript

    var miobjeto = new ClassB();
    alert(miobjeto instanceof ClassB); // true
    alert(miobjeto instanceof ClassA); // true

JSON
====

JSON brinda un buen soporte al intercambio de datos, resultando de fásil
lectura/escritura para las personas y de un rapido interpretacion/generacion
para las maquinas. Se basa en un subconjunto del lenguaje de programación
JavaScript, estándar ECMA-262 3ª Edición - Diciembre de 1999. Este formato de
texto es completamente independiente del lenguaje de programacion, pero utiliza
convenciones que son familiares para los programadores de lenguajes de la
familia ``C'', incluyendo C, C + +, C#, Java, JavaScript, Perl, Python y muchos
otros.

JSON se basa en dos estructuras:
* Una colección de pares nombre / valor. En varios lenguajes esto se
  representa mediante un objeto, registro, estructura, diccionario, tabla hash,
  introducido lista o matriz asociativa.
* Una lista ordenada de valores. En la mayoría de los lenguajes esto se
  representa como un arreglo, matriz, vector, lista, o secuencia.

Estas son estructuras de datos universales. Prácticamente todos los lenguajes
de programación modernos las soportan de una forma u otra. Tiene sentido que un
formato de datos que es intercambiable con los lenguajes de programación
también se basan en estas estructuras.

Para mas informacion sobre JSON http://www.json.org/

.. Note:: 

    AJAX
    Iteradores

************
Google Gears
************

Introducción
============

Google Gears es un software de código abierto distribuido por Google que añade
una nueva capa de aplicación a los navegadores.

.. http://gears.google.com/ Sitio de google gears

Una vez instaldo como una extensión en el navegador, el producto agrega una API
que permite programar en JavaScript interacciones con los componentes que
contiene.

Los tres componentes principales que incorpora gears son:

    * Local Server

        Permite almacenar localmente datos correspondientes a las páginas webs.
        Tanto HTML, JavaScript e imágenes entre otros, pueden ser almacenados
        localmente por el cliente e interponerse entre el requerimiento del
        navegador al servidor en conslutas posteriores, evitando asi la
        solicitud HTTP y optimizando el tiempo de respuesta de la aplicacion.
        
        Pese a que su funcionamiento es muy similar al de la cache del navegador
        la diferencia fundamental esta en que la actualizacion de los recursos
        que almacena es mantenida y realizada por el desarrollador.
    
    * Database

        Permite almacenar localmente datos que no correspondan a una página web
        pero son parte de la logica de la aplicacion y requieren de un
        almacenamiento presistente.
        
        El motor de base de datos utilizado es SQLite con algunos agregados y
        restricciones para brindar seguridad y formas de busqueda.
 
        Luego de que el usuario de la aplicacion web otroge el permiso explicito
        de creacion de la base, el desarrollador, disponer de un almacenamiento
        del tipo relacional en la máquina huésped. 
    
    * Worker Pool

        De manera similar a los "hilos" del sistema operativo, el manejador de
        hilos permite ejecutar acciones en segundo plano sin bloquear la
        ejecución del hilo principal del navegador.

        Hay que destacar que el manejador no corre en forma paralela a la
        ejecución del navegador, sino que se ejecuta cuando la página web se
        mantiene activa, por lo cual el refresco de página o la salida de la
        misma provoca que este se detenga o no se ejecute directemente.

Basicamente Gears y sus principales componentes estan enfocados en permitir al
programador ejecutar sus aplicaciones cuando el navegador no está conectado
al servidor. El lider del grupo de desarrollo Bret Taylor dijo que buscaba ser
capaz de acceder al Google Reader mientras usaba la conexión de la compañía, la
cual frecuentemente tenia un acceso defectuoso a Internet.

.. http://bret.appspot.com/ Blog de Bret Taylor

Gears esta incluido en el nuevo navegador de Google (Google Chrome) y posee
extensiones para instalarse en Internet Explorer 6.0+, Mozilla Firefox, Safari y
Opera Mini, y funciona en los sistemas operativos Windows 2000, XP y Vista,
Windows Mobile 5 y 6, MacOS y Linux de 32 bits.

Con susecivos lanzamientos el producto sea visto mejorado y favorecido en varios
aspectos a partir de la versión 0.4 del Gears se puede hablar ya de:

    * API para GIS, que permite acceder a la posición geográfica del usuario.

    * El API Blob, que permite gestionar bloques de datos binarios.

    * Accede a archivos en el equipo cliente a través del API de Google Desktop.

    * Permite enviar y recibir Blobs con el API HttpRequest.

    * Localización de los cuadros de diálogo de Gears en varios idiomas.

    * API para canvas, que permite manipular imagenes desde JavaScript.

En todos los casos que se requiera tener instalada una aplicacion soportada por
Gears vale la pena aclarar que el cliente debe haber accedido al menos una vez
al servidor de la aplicacion web y otorgado los permisos de instalacion
correspondiente. 