##########################
Introducción al desarrollo
##########################

En este capítulo se reliza una breve descripción del análisis de las tecnologías
evaluadas para llevar a cabo la desconexión de una aplicación web.

Tras la elección de Django como framework, se adoptó como estrategia inicial
intentar ejecutar un intérprete de Python en el navegador web para una posterior
ejecución de Django. Esto requirere que la versión del intérprete posea al menos
los paquetes de la  librería estandard ``re``, ``sys``, ``time``, 
``urllib``, ``datetime``, ``mimetypes``, entre otros, que son utilizados
por el framework.


Además de la posiblidad de ejecución del intérprete en el browser, se requiere
un sistema de almacenamiento persitente en el cliente tanto para el código
de la aplicación (framework + aplicación) como para los datos (típicamente un
RDBMS).

Otro aspecto importante a tener en cuenta, además del intérprete,  el almacenamiento
local y la base de datos, es que los frmeworks web están diseñados para ser 
ejecutados en un entorno cliente-servidor. La interacción con una aplicación
web se realiza generalmente mediante links, formularios y AJAX, todas estas 
técnicas se traducen en alguna primitiva HTTP. En ausencia del servidor se debe
realizar una adaptación de su funcionamiento.

Existen también otro tipo de consideraciones como la seguridad. Transferir 
los datos de una aplicación online a una que se transporta en un browser puede
tener implicancias en la integridad de la información, ya que no es posible 
lograr un grado de aseguramiento al de un serviodr web para una máquina potencialmente 
desconocida. 

También es importante tener en cuenta que el acceso a los datos en
una aplicación web está restringido por la propia aplicación. 
El usuario no tiene acceso a la base de datos,
sino a la visión que la aplicación le da sobre esta. Se puede decir que cada
usuario o grupo tiene asociada una *perspectiva* de los datos.

Si se plantea que la transferencia de una aplicación web del servidor al cliente,
implica la copia de su base de datos, un usuario con suficientes conocimientos 
podría tener acceso a información que de otra manera no tendría 
(cuentas de usuario, registros de actividad, información económica o fincanciaera,
etc).
Por esto es importante analizar *que datos puede ver cada usuario, grupo o rol
en el sistema*. La aplicación desconectada debería o bien poseer una técnica 
de encriptamiento sobre los datos (lo que podría repercutir en el desempeño) 
o trabajar con una base de datos reducida.

De lo anterior se puede inferir que no todas las aplicaciones desconectadas
son idénticas, sino que en función del usuario tendrán más o menos funcionalidad
y datos asociados. Además, en una aplicación desconectada no se requiere login,
o al menos, no de la misma manera que en la aplicación online, donde
la autenticación suele encontrarse asegurada mediante SSL. 


Otro aspecto a tener en cuenta es la posibilidad de sincronizar las instancias
de aplicaciones desconectadas con la aplicacion web original.

..
    Elementos de una aplicación web
    -------------------------------
    
    Una aplicación web que se ejecuta en un servidor web posee 3 componentes 
    arquitecturales
    
    .. figure:: ../_svg/esquema_tranfer_app_inicial.png
    	
    	Elementos a transferir desde la aplicación online

Python en el Navegador
----------------------

Sobre la plataforma Windows, existen dos formas de ejecutar Python en el navegador:
La primera consiste en la ejecución del intérprete emebebido en un control ActiveX.
Un control ActiveX es un componente ejecutable empotrable, 
que puede ser dibujado en una página web. 
Los controles ActiveX son peligrosos en el ámbito de la web debido 
a que fueron ideados para ser utilizados como elemento incrustable entre aplicaciones 
o para el uso en entornos confiables. Un control ActiveX cuenta 
con privilegios similares a los de una aplicación tradicional sobre el equipo del cliente. 
La mayoría de los antivirus y herramientas
de seguridad los eliminan o hacen responsable de la seguridad al usuario a partir de 
la ejecución de estos.
Si bien esta técnica se presenta atractiva gracias a que Python es un lenguaje que ha sido
diseñado para ser embebido, los controles ActiveX no cumplen con las garantías de seguridad
necesarias para el desarrollo de aplicaciones para la web. 
Es posible considerar esta solución "cross-browser" gracias a proyectos como
un *host para ActiveX sobre la plataforma mozilla* [*]_ pero no es multiplataforma. 

.. figure:: ../_svg/esquema_net_silverlight.png
    
    Esquema de desarrollo de Silverlight

.. [*] *ActiveX para Mozilla* http://www.iol.ie/~locka/mozilla/plugin.htm

La segunda alternativa es utilizar la tecnología Silverlight de Microsoft, que 
permite generar aplicaciones para browsers, mediante la plataforma .NET.
Silverlight es un plugin similar al popular Adobe Flash, pero las 
aplicaciones pueden ser creadas en cualquier lenguaje de la plataforma .NET, 
incluyendo Python [PythonMailistMay07]_ y Ruby  [IronRubyNet09]_.
En .NET todos los lenguajes complilan a un bytecode llamado Common 
Language Runtime, para el cual existe un solo intérprete, la propia plataforma
.NET.

IronPython [MichaelFroodIP09]_ es una implementación de Python sobre .NET que en un principio no 
contaba con la API standard [PythonDocAPI09]_, sino que permitía utilizar solo
la propia de .NET, por lo que Django no podía ser ejecutado. En la versión 2.0
de IronPython se implementó la API standard lográndose ejecutar Django sobre
IronPython [InforQDjangoIP09]_.
 
.. [IronRubyNet09] IronRuby,
                    implementación de Ruby sobre .NET,
                    ultimo acceso Septiembre 2009,
                    http://www.ironruby.net/
 
.. [InforQDjangoIP09] InfoQ, *Django On IronPython*, último acceso Octubre 2009,
                         http://www.infoq.com/news/2008/03/django-and-ironpython 

.. [PythonMailistMay07] Lista Oficial sobre el lenguaje Python,
                        *Silverlight, a new way for Python?*,
                        ultimo acceso Septiembre de 2009,
                        http://mail.python.org/pipermail/python-list/2007-May/610021.html
                        
.. [MichaelFroodIP09] Michael Frood,
                      Blog Oficial de Michael Frood, 
                      *explicación de como ejecutar IronPython sobre .Net*,
                      http://www.voidspace.org.uk/ironpython/silverlight/index.shtml#id2

.. [PythonDocAPI09] Python.org, 
                    *Listado de Módulos de la API standard*,
                    ultimo acceso Octubre 2009,
                    http://docs.python.org/modindex.html 


Gracias a la posibilidad de acceso a DOM por medio de una aplicación construida con
Silverlight [MSDNSilverlightDOM09]_ [SwOnCodeSlvlgth09]_ y al  almacenamiento local en el cliente introducido en 
en Silverlight 2.0 [DinoEspositoSlvlght09]_, esta tecnología brina las herramientas para
ejecutar Django en el cliente sin conexión [AshishShettySlvlght09]_,
sin embargo, la arquitectura de software necesaria para
desplegar este tipo de aplicaciones es considerablemente compleja, que va en
contraposición a los ideales de Python y Django.
Además existen varias limitaciones:
 
 * Necesidad de Plugin Propietario
 
 	Es necesario un plugin en el browser que no se encuentra disponible para todas las
 	plataformas.
 	
 * Herramientas de Desarrollo No Multiplataforma
  
 	Las herramientas de desarrollo solo están en su estado más maduro sobre la plataforma Windows.
 	Si bien existen compiladores gratuitos, las IDEs que
 	permiten un desarrollo más eficiente son propietarias.
 	
 * No existe soporte para IronPython en la IDE VisualStudio.
 
 * La implementación de Python no es la estándar, y actualmente poco soportada [IronPythonFAQ2009]_ .
 
.. [MSDNSilverlightDOM09] Microsoft Developer Network, 
   Silverlight Programming Models, XAML, and the HTML DOM,
   último acceso Octubre 2009
   http://msdn.microsoft.com/en-us/library/cc838215%28VS.95%29.aspx


.. [IronPythonFAQ2009] Sitio oficial de IronPython,
                        *Diferencias entre IronPython y CPython*,
                        último acceso Septiembre 2009,
                         http://ironpython.codeplex.com/Wiki/View.aspx?title=IPy2.0.xCPyDifferences&referringTitle=Home

.. [SwOnCodeSlvlgth09] Switch On The Code,
        *Silverlight Tutorial - Interaction With The DOM*,
        ultimo acceso Octubre 2009
        http://www.switchonthecode.com/tutorials/silverlight-tutorial-interaction-with-the-dom

.. [DinoEspositoSlvlght09] Dino Esposito,
        *Isolated Storage in Silverlight 2.0*,
        ultimo acceso Agsoto de 2009,
        http://www.ddj.com/windows/208300036
        
.. [AshishShettySlvlght09] Ashish Shetty, 
    *Silverlight out-of-browser apps: Local Data Store*,
    ultimo acceso Agosto 2009,
    http://nerddawg.blogspot.com/2009/04/silverlight-out-of-browser-apps-local.html

 
Debido a estas limitaciones se descartó Silverlight como tecnología de soporte. 

En la plataforma Mozilla, la integración con Python se puede realizar mediante PyXPCOM [*]_ , 
PyShell [*]_ y también existe una extensión para XUL [*]_, pero al igual que con 
Silverlight, es una solución enogrrosa.

.. [*] *PyXPCOM*, conexión del modelo de objetos multiplataforma de Mozilla con Python, https://developer.mozilla.org/en/PyXPCOM 
.. [*] *PyShell*, consola interactiva 
.. [*] *Luxor, Python for XUL* http://mail.python.org/pipermail/python-announce-list/2003-March/002084.html

Luego de analizar las alternativas acutales de ejecución local de Python,
se decidió analizar la posiblidad de realizar la aplicación del cliente utilizando
las tecnologías propias del navegador.

Lenguaje de Aplicación en el Cliente
--------------------------------------

Como ya se introdujo en los apartados teóricos, JavaScript es el lenguaje de
programación presente en todas las implementaciones de los navegadores
web. 

Javascript y Python parecen lenguajes bastante diferentes en su sintaxis, sin
embargo, comparten ciertas características como ser orientados a objetos,
permitir la definición de clausuras [AtulVarma2009]_.
A partir de la versión 1.7 y 1.8, JavaScript incluye semántica funcional en los arreglos, 
generadores e iteradores, getters y setters, características que los acercan 
aún más  [SteveLeeJs17Py09]_.
Guyon Morée realiza una publicación titulada, "Javascript Pythonico, es Python
con llaves [*]_" [GuyonMoreePythonBraces09]_.

.. [SteveLeeJs17Py09] Steve Lee, Open Source Eduspaces, 
    *Mozilla's Javascript 1.7 includes some Python goodness*,
    http://eduspaces.net/stevelee/weblog/450964.html

.. [GuyonMoreePythonBraces09] Guyon Morée,
                              *Pythonic Javascript, it's Python with braces!*,
                              útlimo acceso Septiembre 2009,
                              http://www.gumuz.nl/weblog/pythonic-javascript-its-python-braces/

.. [AtulVarma2009] Atul Varma, 
                   *Python For Javascript Programmers*,
                   ultimo acceso Septiembre 2009,
                   http://hg.toolness.com/python-for-js-programmers/raw-file/tip/PythonForJsProgrammers.html

.. [*] En python existe un huevo de pascua relacionado con las caracteristicas
       nuevas que se incluyen en el lenguaje, que se activa mediante la 
       sentencia ``from __future__ import braces`` y produce la excepción
       ``SyntaxError: not a chance`` (*Not a chance* se traduce coloquialmente
       *imposible*, *olvídalo!*).
         
JavaScript no posee mencanismos de almacenamiento local. Si bien un navegador
almacena muchos recursos de este tipo en su caché, lo hace con el objetivo de
mejorar la performance y su permanencia no el equipo del clinete no está garantizada.
Para lograr que una aplicación escrita en JavaScript pueda ejecutarse onffline
es necesario almacenar los recursos que componen la aplicación en el cliente 
mediante alguna técnica que no sea la caché.

Uno de los objetivos de GoogleGears es el almacenamiento local y lo implementa 
mediante el módulo LocalServer.
El programador a tavez de su API genera repositorios de almacenamiento
de recursos online (URLs) para proveerlos a través de un servidor web interno 
cuando el navegador no cuente con conexión.

Ademas de almacenamiento local, Gears, provee una base de datos, satisfaciendo
las necesidades para la creación de aplicaciones offline que se plantearon
anteriormente. Gears al contrario que Silverlight es Open Source y en la 
especificación HTML 5 (actualmente en desarrollo) [W3CHTML5OffWebApp09]_ 
se incluyen varios de los componetes que este provee [ScottLoganbillHTML5Gears09]_. 
Es decir, varios de los compoenentes de Gears serán incuidos nativamente en
los navegadores que adopten este estándard.

.. [ScottLoganbillHTML5Gears09] Scott Loganbill,
    *How HTML 5 Is Already Changing the Web*,
    último acceso Septiembre 2009,
    http://www.webmonkey.com/blog/How_HTML_5_Is_Already_Changing_the_Web
    
.. [W3CHTML5OffWebApp09] World Wide Web Consortium,
    Apartado sobre Aplicaciones Web Desconectadas en el borrador sobre la especificación HTML5, 
    último acceso Septiembre 2009 (Revision 1.2852),
    http://www.w3.org/TR/html5/offline.html#offline
    

Por lo tanto, la combinación de JavaScript y Gears constituye la alternativa
más promisora para la implementación de aplicaciones desconectadas escritas en Django.

Tras el análisis de un proyecto [GearsOnRails09]_ que persigue objetivos similares a la presente
tesis, pero basado en el framework Ruby On Rails, se realiza el anállis de que
componentes del frameowrk Django son necesarios migrar a JavaScript.
 

Generar este espejo conlleva poseer un equivalente al framework Django que 
pueda ser ejecutado en un browser, brindando los componentes básicos de Django:

 * Mapeador Objeto Relacional
 * Renderización de templates
 * Asociación de expresiones regulares a funciones.
 
Esta idea surge en parte gracias al proyecto "Gars On Rails" [*]_ , un equivalente al objetivo de la presente tesis 
sobre el framework Rails.



.. [*] *Gears On Rails*




El desarrollo consistió en el siguiente diagrama:

.. image:: ../_svg/esquema_general.png



