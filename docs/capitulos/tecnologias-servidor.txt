.. _servidor:

########################
Tecnologías del servidor
########################

**********************************
Generación dinámica de páginas Web
**********************************

.. note::
    Introduccion de la mano de Tanenbaum
    La parte estatica de la cuestion dejarla para la introduccion como cuentito,
    aca vamos a los bifes dinamicos.

Esta sección tiene como finalidad introducir los conceptos básicos concernientes
a la *generación dinamica contenido* en el servidor.

En el enfoque dinámico, cuando un usuario realiza una solicitud, el mensaje
enviado tiene como objetivo la ejecución de un programa o secuencia de comandos
en el servidor. Por lo general, el procesamiento involucra el uso de la
información proporcianda por el usuario para buscar registros en una base de
datos y genrerar una página HTML personalizada para el cliente.


La forma tradicional de manejar páginas Web interactivas se conoce como :term:`CGI`,
éste es un estandar que consiste en delegar la generación de contenido a un
programa. CGI se limita a definir la entrada y salida del programa.

Los servidores web primigenios y monolíticos avanzaron a una arquitectura
modular [ApacheMod2009]_ [MicrosoftIIS2009]_ , en la cual, un módulo brinda soporte para una tarea específica.
Módulos comunes son autenticación, bitácora, balance de carga, entre otros
como los de generación de contenido.

.. [ApacheMod2009] *Módulos del servidor Apache 2.2*, último acceso, Septiembre de 2009, http://httpd.apache.org/docs/2.2/mod/
.. [MicrosoftIIS2009] *Módulos en Microsoft IIS*, último acceso Septiembre 2009, http://msdn.microsoft.com/en-us/library/bb757040.aspx


Un enfoque más moderno para la generación de contenido dinámico 
es la incrustación de secuencias de comandos dentro de 
la páginas HTML. Estas sentencias son leidas y ejecutadas por un módulo del servidor
al momento de responder a la solicitud del cliente, como es el caso del lenguaje :term:`PHP`, o
:term:`ASP`.

Más recientemente han aparecido mejoras sobre CGI, como FastCGI y SCGI, que 
suponen una simplificación y reducción de recursos a la hora de satisfacer una
petición. Para satisfacer necesidades más complejas, que no fueron abordadas
en la genericidad de CGI, se fueron desarrollando alternativas como servidores
orientados a aplicaciones,  como el servidor de aplicaciones Tomcat para
el lenguaje de progarmación Java [ApacheTomcat2009]_ [SunServlet2009]_
o módulos de lenguajes de programación específicos.

.. [ApacheTomcat2009] http://tomcat.apache.org/index.html
.. [SunServlet2009] http://java.sun.com/products/servlet/



.. Existen otras formas de generar contendio al vuelo y generalmente todas estas se
.. engloban dentro del termino **HTML dinámico**.

Servidor Web
============
Un servidor web, o *web server* es un software encargado de recibir solicitudes
de un cliente, típicamente un :ref:`navegador web <navegador-web>`, a través del
protcolo :term:`HTTP` y generar una respuesta a la solicitud.
Mediante la especificación :term:`MIME` que se incluye en el encabezado de la
respuesta que es enviada al cliente, se puede identificar que tipo de archivo es
devuelto, siendo el tipo más común :term:`HTML` o :term:`XHTML`. 

El contenido que es enviado al cliente puede ser de origen *estático* o *dinámico*.

.. _conteido-estatico:

El contendio estático es aquél que proviene desde un archivo en el sistema de
archivos sin ninguna modificación. 

.. _conteido-dinamico:

El contenido dinámico en contraposición al :ref:`contenido estático
<conteido-estatico>` es generado por algún programa, un :term:`script` o algún
tipo de API invocada por el web server, como SSI, :ref:`CGI <servidor-cgi>`,
SCGI, FastCGI, JSP, ColdFusion, NSAPI o ISAPI).

El clinete web accede a los recursos del web server mediante una dirección de recurso, u :term:`URL`.


.. _servidor-cgi:

CGI
===

El estándar Common Gateway Interface (CGI) [*]_ surge alrededor del año 1998,
como un estándar de comunicación o :term:`API` entre un servidor web y un
programa de usuario. Al permitir ejecutar un proceso, CGI permite generar
contenido de manera dinámica a traves de un servidor web.

Es decir, el usuario puede recuperar datos de un programa que se ejecuta en el
equipo en el que reside el servidor web, donde la salida puede ser un documento
HTML entendible para el navegador, o culaquier otro tipo de archivo, como
imágenes, contenido multimedial, sonidos, etc.

CGI fue la primera estandarización de un mecanismo para generar :ref:`contenido
dinámico <conteido-dinamico>` en la web.

Los mecanismos de comunicación de entrada son las variables de
entorno y la entrada estandar, mientras que para la salida se utiliza la salida estandard del
proceso.

Los parámetros HTTP, como la :term:`URL`, el método (GET, POST, PUSH, etc.), nombre del
servidor o host, puerto, etc.) e información sobre el servidor son trasferidos a la
aplicación CGI como variables de entorno.

Si existiese un cuerpo en la petición HTTP, como por ejemplo, el contenido de un
formulario, bajo el método POST, la aplicación CGI accede a esta como entrada
estandard.

El resultado de la ejecución de la aplicación CGI se escribe en la salida
estándard, anteponiendo las cabeceras HTTP respuesta, para que el servidor
responda al clinete. En los encabezados de respuesta, el tipo MIME determina
como interpreta el clinete la respuesta. Es decir, la invocación de un CGI puede
devolover diferentes tipos de contenido al clinete (html, imágenes, javascript,
contenido multimedia, etc.)

.. figure:: ../_svg/esquema_cgi.png
    
    Poceso de una solicitud con CGI.

Dentor de las varaibles de entorno, la Wikipedia [WikiCGI2009]_ menciona:

    * QUERY_STRING
        Es la cadena de entrada del CGI cuando se utiliza el método GET sustituyendo algunos símbolos especiales por otros. Cada elemento se envía como una pareja Variable=Valor. Si se utiliza el método POST esta variable de entorno está vacía.
    * CONTENT_TYPE
        Tipo MIME de los datos enviados al CGI mediante POST. Con GET está vacía. Un valor típico para esta variable es: Application/X-www-form-urlencoded.
    * CONTENT_LENGTH
        Longitud en bytes de los datos enviados al CGI utilizando el método POST. Con GET está vacía.
    * PATH_INFO
        Información adicional de la ruta (el "path") tal y como llega al servidor en el URL.
    * REQUEST_METHOD
        Nombre del método (GET o POST) utilizado para invocar al CGI.
    * SCRIPT_NAME
        Nombre del CGI invocado.
    * SERVER_PORT
        Puerto por el que el servidor recibe la conexión.
    * SERVER_PROTOCOL
        Nombre y versión del protocolo en uso. (Ej.: HTTP/1.0 o 1.1)

Variables de entorno que se intercambian de servidor a CGI:

    * SERVER_SOFTWARE
        Nombre y versión del software servidor de www.
    * SERVER_NAME
        Nombre del servidor.
    * GATEWAY_INTERFACE
        Nombre y versión de la interfaz de comunicación entre servidor y aplicaciones CGI/1.12

Debido a la popularidad de las aplicaciones CGI, los servidores web incluyen
generalmente un directorio llamado **cgi-bin** donde se albergan estas
aplicaciones.

.. note:: Faltan referencias sobre la popularidad de los lenguajes


Históricamente las aplicaciones CGI han sido escritas en lenguajes interpretados, sinedo muy popular Perl y más recientemente el lenguaje PHP. En los :ref:`lenguajes interpretados <servidor-lenguajes>`, el código ejecutable es
texto plano, por lo que puede ser editado en una terminal directamente en el servidor. Otra ventaja
importante de ser texto plano, es que es más sencillo de mantener con alguna herramienta de :term:SCM.

.. [WikiCGI2009] *Interfaz de entrada común*, Wikipedia, 2009, último acceso Agosto 2009, http://es.wikipedia.org/wiki/Common_Gateway_Interface#Intercambio_de_informaci.C3.B3n:_Variables_de_entorno

.. [*] A veces traducido como pasarela común de acceso.

.. _servidor-lenguajes:

Lenguajes de programación para la web
=====================================

.. note::
	Acá introducimos los conceptos de
	
	* Propósito General vs DSL
	
	* Compilado vs Intepretado, -> VMs
	
	* Dinámico vs Estático
	
	* Plataforma Específica vs Multiplataforma
	
	* Porgramación de sistema y programación de aplicaciones


Una de las clasificaciones más generales que se suelen realizar sobre los lenguajes de programación es identificar su objetivo.
Los lenguajes de programación de *propósito general* están orientados a resolver cualquier tipo
de problema, mientras que los lenguajes de *propósito específico* o *DSL* están enfocados en reolver un tipo de problemas
de manera más eficáz. Un ejemplo muy popular de DSL es la planilla de cálculo Microsoft Excel [DavidPollak2006]_.

.. [DavidPollak2006] *Ruby Sig:How To Design A Domain Specific Language*, Google Tech Talk, 2:44, http://video.google.com/videoplay?docid=-8103284744220333344

Además de la división entre lenguaje de porposito general y DSL, exiten otras clasificaciones de interés
en el estudio de los lenguajes de programación populares en la Web, como la divsión entre leguajes
interpretados y compilados.

Un lenguaje de programación interpretado es aquel en el cual los programas son ejecutados
por un intérprete, en vez de realizarse una traducción a lenguaje máquina, conocido como proceso
de compilación.

En teoría cualquier lenguaje de programación podría ser compilado o interpretado. 

En un lengauje de programación interpretado se puede decir que el código fuente es el código ejecutable
(a través del intérprete). Para llegar a la ejecución de un programa escrito en un lenguaje compilado,
se debe pasar generalmente por dos etapas, una de compilación, donde se traducen las sentencias
del lenguaje por código máquina y otra de enlace, donde se ensambla el código objeto resultado de la compilación 
y se resuleven los enlaces entre los diferentes módulos compilados.

.. figure:: ../_svg/lenguaje_interpretado.png

    Lenguaje interpretado.

Existe un mecanismo intermedio de ejecución, que se conoce como máquina virtual, en el cual, existe
un proceso de compilación de el código fuente a un lenguaje intermedio, comunmente denominado
*bytecode*. Este bytecode es luego ejecutado sobre un intérprete, al cual se denomina comunmente
como máquina virutal. La traducción del código fuente a *bytecode* puede ser explícita, como en el
lenguaje Java, o implícita como en Python, donde se mezcla en el intérprete la funcionalidad de 
compilación a bytecode e interpretación en un solo programa.

Los lenguajes de programación interpreteados suelen ser de alto nivel y de *tipo dinámico*, es decir
que la mayoría de las comprobaciones que se realizan en tiempo de compilación en otros lenguajes [*]_ , se
realizan en tiempo de ejecución.

.. [*] Estas comprobaciones comprenden el checkeo de tipos de datos, resolución de métodos entro otros.

Si un lenguaje provee la posibilidad de ser ejecutado en varias plataformas [*]_ decimos que es multiplataforma.
En el caso de los lenguaje compilados, es necesario disponer de un compilador para la plataforma, mientras que 
en un lenguaje interpretado, es necesario compilar el intérprete con el compilador de la plataforma.

.. [*] *Una plataforma es una combinación de hardware y software usada para ejecutar aplicaciones; en su forma más simple consiste únicamente de un sistema operativo, una arquitectura, o una combinación de ambos. La plataforma más conocida es probablemente Microsoft Windows en una arquitectura x86* [WikiPlataforma2009]_

.. [WikiPlataforma2009] *Multiplataforma*, Wikipedia, 2009, último acceso, Agosto de 2009, http://es.wikipedia.org/wiki/Multiplataforma

Un lenguaje dinámico admite de manera directa en tiempo de ejecución, el agregado de código, extensión o redefinición de objetos 
o hasta inclusive modificar tipos de datos. Si bien estas tareas pueden ser realizadas en lenguajes no dinámicos, 
su implementación no es sencilla. 

..
	Systems vs. applications programming

	Systems programming emphasizes making the
	new domain fit into the existing generic
	interfaces
	
	Applications programming models the
	application domain precisely first, worries
	about integration afterwards (if at all)
	
Jhon Cownan [Cowan2005]_ adempas hace una clasificación interesante sobre la utilización de los lenguajes de 
programación, diferenciando la *programación de sistema* de la *programación de aplicaciones*.

    * *Programación de sistemas*

        En la programación de sistemas, el programador se centra en adaptar un nuevo dominio
        a interfases genéricas preexistentes.

    * *Programación de aplicaciones*

        En la programación de aplicaciones, por el contrario, modela el dominio de la aplicación
        de manera específica como paso inicial (análisis y diseño) y luego de la integración (si existe).

Podemos ejemplificar la programación de sistemas con la creación de un shellscript por parte de un administrador de sistemas basados en UNIX,
donde existe un legnguaje de integración, shellscript [*]_ y las un set de utilidades de sistema con interfase conocida que le brindan
funcionalidades como ordenamiento de caddenas, busqueda y reemplazo de patrones, inicio y detencción de procesos, interacción con el SO, etc.

.. [*] Bash, Sh, Csh, Ksh, Zsh, etc.

.. [Cowan2005] *RESTful Web Services, An introduction to building Web Services without tears (i.e., without SOAP or WSDL)*, 2005, http://home.ccil.org/~cowan/restws.pdf

**Java** es un lenguaje de progamación orientado a objetos, multiplataforma y multiproposito, basado en máquina virtual, 
de compilación explícita.
Java ha definido algunos elementos importantes en cuanto a la web dinámica, como los applets [*]_ y la especificación 
J2EE.

.. [*] Pequeños programaas que se ejecutan en el navegaor web


**Perl** es un lenguaje de programación de propósito general diseñado por Larry Wall en 1987. Perl toma características del lenguaje C,
del lenguaje interpretado shell (sh), AWK, sed, Lisp y, en un grado inferior, de muchos otros lenguajes de programación.
Su uso principal es el procesamiento de texto, siendo muy popular en programación de sistemas. Muchos sistemas basados
en CGI están escritos en Perl (sistemas de administración de servidores, correo, etc.). Perl esta disponible para
muchas plataformas, incluyendo todas las variantes de UNIX.

Estructuralmente, Perl está basado en un estilo de bloques como los del C o AWK, y fue ampliamente adoptado por su 
destreza en el procesado de texto.

Su sintaxis es compleja y ambigua, una tarea puede ser realizada de muchas maneras diferentes, dado
lugar a confusión.


**PHP** es un lenguaje interpreteado, originalmente diseñado para ser embebido
dentro del código HTML y procesado en el servidor (DSL) y que con los años
ha intentado convertirse en un lenguaje de porpósito general. Toma elementos de Perl y shellscript, C, y 
recientemente Java.
Cuando el cliente solicita a través de una URL un módulo php, el interprete busca los 
los tags del lenguaje, y los reemplaza por la salida del bloque.
Presenta una ventaja importante sobre la escritura de CGI, ya que no es necesario 
confeccionar un programa de usuario, la resolución de URLs está dada por la estructura del 
sistema de archivos. 
Si bien es muy popular [*]_ y está disponible en la gran mayoría de los servidores UNIX, simplificando el :ref:`deployment`
es criticado por no poseer ámbito de nombres para los módulos, 
promover el código desordenado, de dificil optimización y orientado a la web [BlogHardz2008]_ .
Hoy es posible escribir aplicaciones gráficas mediante toolkits como Qt y GTK.

.. [*] `Utilización de PHP según php.net <http://www.php.net/usage.php>`_


.. [BlogHardz2008] http://hardz.wordpress.com/2008/02/07/php-hipertexto-pre-procesado/

**Ruby** es un lenguaje orientado fuertemente objetos, multiplataforma, creado en 1995 por 
Yukihiro "Matz" Matsumoto, en Japón.
A menudo comparado con *Smalltak*, se suele decir que Ruby es un lenguaje de objetos puro, 
ya que *todo* es un objeto. Posee muchas caracteríticas avanzadas como metaclases, clausuras, iteradores, integración de expresiones regulares en el lenguje, etc.
Su sintaxis toma elementos de Perl, por lo cual, suelen existir convenciones de nombrado
a las que cuesta acostumbrarse.
Existen varios intérpretes de Ruby, siendo la oficial escrita en C, se concen 
YARV [*]_ , 
JRuby [*]_ , 
Rubinius [*]_ , 
IronRuby [*]_ ,
y MacRuby [*]_ .

.. [*] Yet Another Ruby VM, escrita por Sacasada Kiochi http://www.atdot.net/yarv/
.. [*] JRuby es una máquina virtual de Ruby escrita sobre la máquina virtual de **Java**, http://jruby.codehaus.org/
.. [*] Rubinius es una máquina vritual de Ruby escrita en **C++** http://rubini.us/
.. [*] IronRuby es una implementación de Ruby sobre la plataforma **.Net** http://www.ironruby.net/
.. [*] MacRuby es una implementación de Ruby sobre **Objective-C** para el sistema Mac OS X, http://www.macruby.org/

Una de las Killer App [*]_ según el autor es el framework para contenido web denominado `"Ruby on Rails" <www.rubyonrails.com>`_ 
que alcanzó su versión 1.0 en el año 2005, que poroponía un cambio radical al enfoque complejo de *J2EE*.

Su principales desventajas son la baja aceptación, quizás debido a que la documentación oficial solía estar
en idioma Japonés (auque la situación se ha venido revirtiendo ultimamente). Otra desventaja importante es que
la velocidad del intérprete oficial es bastante baja cuando se la compara con otros lenguajes de programación y
muestra variaciones importantes entre plataformas.

.. [*] Aplicación que populariza un lenguaje.

.. _lenguaje-python:

**Python** es un lenguaje de programación interpretado multiparadigma, 
de propósito general. Fue creado por por Guido van Rossum en el año
1991.
Se trata de un lenguaje dinámico, y toma elmentos de varios lenguajes, como C, Java,
Scheme, entre otros. Gracias a su naturaleza dinámica, toda resolución de nombres (o símbolos) se
realiza en tiempo de ejecución (*dynamic binding*). En la jerga del lenguaje se suele llamar a este
hecho, *duck typing* y se lo asocia con el siguiente broma, *si tiene pico y 
hace cuac, se trata de un pato*.

Python puede ser extendido meidante módulos escritos en C o C++, y también 
se puede embeber el intérprete en otros lenguajes. Python permite actualmente
cargar bibliotecas de enlace dinámico, de manera dinámica y realizar llamadas
incluso con callbacks escritos en Pyhton.

Python es considerado por parte de la comunidad UNIX, como una evolución de Perl, 
de sintaxis limpia y potente. Un caso sitable de esta "evolución" es el 
árticulo escrito por Eric Raymond, "Why Python?", donde explica su conversión
de Perl a Python [EricRaymon2000]_. 

.. [EricRaymon2000] *Why Python*, Linux Journal, publicado el 1° de Mayo de 2000, http://www.linuxjournal.com/article/3882

Muchos de las sistemas webs basados en CGI, están
escritos en Perl, por lo cual no es sorpresa encontrar una buena cantidad de 
proyectos del lenguaje Python orientados a la Web [*]_.

.. [*] En el repositorio de proyectos del lenguaje se encuentran más 1100 resultados para paquetes relacionados con el término "web". http://pypi.python.org/pypi?%3Aaction=search&term=web&submit=search



Selección de un lenguaje de programación
========================================

Jhon Crockford 
.. Con la masificación de la World Wide Web se hizo necesario encontrar formas de desarrollo




En el :ref:`apéndice <apendices-python>` se encuentra una referecia detallada del lenguaje.

.. _servidor-wsgi:

WSGI
----

WSGI o Web Server Gateway Interfase es una especidicación para que un web server y una aplicación
se comuniquen. Es un estándar del lenguaje Python, descrito en el PEP [*]_ 333. Si bien WSGI es
similar en su concepción a CGI, su objetivo es estandarizar la aparición de estructras de software
cada vez más complejas (frameworks :ref:`servidor-frameworks_ <framework>`)

.. [*] PEP *Python Enhancement Proposals* son documentos en los que se proponen mejoras para el lenguaje
Python, son albergados en el sitio oficial http://www.python.org

WSGI propone que una aplicación es una función que recibe 2 argumentos. Como primer argumento, un diccionario con las variables de entorno, al igual que en CGI, y como segundo argumento una función (u :ref:`objeto llamable <apendice_python_callables>` ) al cual se invoca para iniciar la respuesta.

.. figure:: ../_svg/esquema_wsgi.png

    Esquema WSGI.

En el siguente ejemplo, la función app devuelve *Hello World* informandole al navegador web, que el
contenido se trata de texto plano.

.. code-block:: python

    def app(environ, start_response):
        start_response('200 OK', [('Content-Type', 'text/plain')])
        return ['Hello World\n']

.. _servidor-orm:

***************
Frameworks Web
***************

.. _servidor-frameworks:

Frameworks
==========

.. Usamos la traducción redefinir para override
.. note:: Poner CLI

Según la la wikipedia [WIK001]_ un framework de software es *una abstracción en
la cual un código común, que provee una funcionalidad genérica, puede ser
personalizado por el programador de manera selectiva para brindar una
funcionalidad específica*.

.. [WIK001] *Software Framework*, Wikipedia, 2009, http://en.wikipedia.com/software_framework, última visita Agosto de 2009.

Además agrega que los frameworks son similares a las bibliotecas de software
(a veces llamadas librerías) dado que proveen abstracciones reusables de código
a las cuales se accede mediante una API bien definida. Sin embargo, existen
ciertas características que diferencian al framework de una librería o
aplicaciones normales de usuario:

    * Inversion de control

        Al contrario que las bibliotecas en las aplicaciones de usuario, en un
        framework, el flujo de control no es manejado por el llamador,
        sino por el framework. Es decir, cuando se utilizan bibliotecas o
        programas de usuario como soporte para brindar funcionalidad, estas son
        llamados o invocados en el código de aplicación principal que es
        definido por el usuario. En un framework, el flujo de control principal
        está definido por el framework.

    * Comportamiento por defecto definido

        Un framework tiene un comportamiento por defecto definido. En cada
        componete del framework, existe un comportamineto genérico con alguna
        utilidad, que puede ser redefinido con funcionalidad del usuario.

    * Extensibiliad

        Un framework suele ser extendido por el usuario mediante redefinición o
        especialización para proveer una funcionalidad específica.

    * No modificabilidad del código del framework

        En general no se permite la modificación del código del framework. Los
        programadores pueden extender el framework, pero no modificar su código. 

Los diseñadores de frameworks tienen como objetivo facilitar el desarrollo de
software, permitiendo a los programadores enfocarse en cumplimentar los
requermientos del análisis y diseño, en vez de dedicar tiempo a resolver los
detalles comunes de bajo nivel. En general la utilización de un framework reduce
el tiempo de desarrollo.

Por ejemplo, en un equipo donde se utiliza un framework web para desarrollar un
sitio de banca electrónica, los desarrolladores pueden enfocarse en la lógica
necesaria para realizar las extraciones de dinero, en vez de la mecánica para
preserver el estado entre las peticiones del navegador.

.. Carga != Incertidumbre

Sin embargo, se suele argumentar que los frameworks pueden ser una carga,
debido a la complejidad de sus APIs o la incertidumbre que generar la existencia
de varios frameworks para un mismo tipo de aplicación. A pesar de tener como
objetivo estandarizar y reducir el tiempo de desarrollo, el aprendizaje de un
framework suele requerir tiempo extra en el desarrollo, que debe ser tenido en
cuenta por el quipo de desarrollo. Trás completar el desarrollo en un framework,
el equipo de desarrllo no debe volver a invertir tiempo en aprendizaje en
sucesivos desarrollos.

.. figure:: ../_svg/esquema_libreria_vs_framework.png

    Libreria vs Framework.

.. note:: Breve introducción a patrones arquitecturales y mvc


.. _servidor-mvc:

Model View Controler
====================

En aplicaciones complejas que impliquen sofisticadas interfaces, como las
aplicaciones web, la lógica de la interfaz de usuario cambia con más frecuencia
que los almacenes de datos y la lógica de negocio. Si se realiza un diseño
mezclando los componentes de interfaz y de negocio, entonces las consecuencias
serán que, cuando se necesite cambiar la interfaz, se tendra que modificar
trabajosamente los componentes de negocio, teniendo de esta forma mayor trabajo
y mayor riesgo de error.

El patrón arquitectural MVC, *Modelo Vista Controlador* trata de realizar un
diseño que desacople la interfaz o vista del modelo, con la finalidad de mejorar
la reusabilidad. De esta forma las modificaciones en las vistas impactan en menor
medida en la lógica de negocio o de datos.

Este patrón fue descrito por primera vez en 1979 por Trygve Reenskaug [Tryg1979]_,
entonces trabajando en Smalltalk en laboratorios de investigación de Xerox.
La implementación original está descrita a fondo en Programación de Aplicaciones
en Smalltalk-80(TM): Como utilizar Modelo Vista Controlador [SmallMVC]_.

.. [Tryg1979] Trygve Reenskaug, http://heim.ifi.uio.no/~trygver/themes/mvc/mvc-index.html
.. [SmallMVC] Steve Burbeck, Ph.D. http://st-www.cs.illinois.edu/users/smarch/st-docs/mvc.html

Descripción del patrón:

    * Modelo

        Esta es la capa de datos, una representación de la información con la
        cual el sistema opera. La lógica de datos asegura la integridad y
        permite derivar nuevos datos.

    * Vista

        Esta es la capa de presentación del modelo, seleccionando qué mostrar y 
        cómo mostrarlo, usualmente la interfaz de usuario.

    * Controlador

        Esta capa responde a eventos, usualmente acciones del usuario, e invoca
        cambios en el modelo y probablemente en la vista.

El patrón MVC se ve frecuentemente en aplicaciones web, donde la vista es la
página HTML y el código que provee de datos dinámicos a la página. El modelo es
el sistema de gestión de base de datos y la lógica de negocio, y el controlador
es el responsable de recibir los eventos de entrada desde la vista.

Framework Web
-------------

.. note::

    Ver diferencia entre sitio y aplicación
    http://www.javahispano.org/contenidos/es/comparativa_de_frameworks_web/

Un framework Web, es un framework de software que permite implementar
aplicaciones Web, brindando soporte para tareas comunes. Su objetivo es
facilitar el desarrollo de aplicaciones Web.

Para entender mejor esto, se presenta a continuación un ejemplo de aplicación
Web escrita usando CGI; este fragmento de código en Python, muestra los diez
libros más recientemente publicados de una base de datos::

    #!/usr/bin/python

    import MySQLdb

    # Se imprime el Content-Type y una linea en blanco, tal como requiere CGI
    print "Content-Type: text/html"
    print

    # Algo de HTML introductorio que de forma al documento
    print "<html><head><title>Libros</title></head>"
    print "<body>"
    print "<h1>Los ultimos 10 libros</h1>"
    print "<ul>"

    # Contectar con la base de datos y obtener los utlimos libros publicados
    conexion = MySQLdb.connect(user='yo', passwd='dejame_entrar', db='mi_base')
    cursor = conexion.cursor()
    cursor.execute("SELECT nombre FROM libros ORDER BY fecha_pub DESC LIMIT 10")
    
    # Iterar sobre la lista de libros e imprimir HTML con los datos obtenidos
    for fila in cursor.fetchall():
        print "<li>%s</li>" % fila[0]

    # Cerrar el documento HTML
    print "</ul>"
    print "</body></html>"

    # Cerrar la conexion con la base de datos
    conexion.close()

Si bien el código es sencillo de comprender y utilizar, cuando la aplicación
Web comienza a crecer más allá de lo trivial, este enfoque se desmorona y surgen
una serie de problemas:

    * ¿Qué sucede cuando múltiples páginas necesitan conectarse a la base de datos?
      Seguro que ese código de conexión a la base de datos no debería estar duplicado
      en cada uno de los scripts CGI, así que la forma pragmática de hacerlo sería
      refactorizarlo en una función compartida.

    * ¿Debería un desarrollador *realmente* tener que preocuparse por imprimir
      la línea de "Content-Type" y acordarse de cerrar la conexión con la base de datos?
      Este tipo de código repetitivo reduce la productividad del programador e
      introduce la oportunidad para que se cometan errores. Estas tareas de configuración y
      cierre estarían mejor manejadas por una infraestructura común.

    * ¿Qué sucede cuando este código es reutilizado en múltiples entornos,
      cada uno con una base de datos y contraseñas diferentes? En ese punto,
      se vuelve esencial alguna configuración específica del entorno.

    * ¿Qué sucede cuando un diseñador Web que no tiene experiencia programando
      en Python desea rediseñar la página? Lo ideal sería que la lógica de la página
      -- la búsqueda de libros en la base de datos -- esté separada del código HTML
      de la página, de modo que el diseñador pueda hacer modificaciones sin afectar
      la búsqueda.

Precisamente estos son los problemas que un framework Web intenta resolver.
Un framework Web provee una infraestructura de programación para las
aplicaciones, para que el desarrollador se pueda concentrar en escribir código
limpio y de fácil mantenimiento sin tener que reinventar la rueda.

En Wikipeida [WIKI002]_
	
	* Acceso a datos
		ORM

    * Seguridad

    * Mapeo de URLs

    * Sistema de plantillas

    * Caché

    * AJAX

    * Configuración mínima y simplificada

.. [WIKI002] *Web Framework*, Wikipedia, 2009, http://en.wikipedia.org/wiki/Web_application_framework, última visita Agosto de 2009.

.. note:: completar tema framework un poco, antes de caer en django


Mapeador Objeto-Relacional
==========================

En las aplicaciones modernas, la lógica arbitraria a menudo implica interactuar
con una base de datos. Detrás de escena, un *programa impulsado por una base de
datos* se conecta a un servidor de base de datos, recupera algunos datos de
esta, y los presenta al usuario con un formato agradable para su interpretacion.
Una aplicacion web no escapa a esta aseveración, solo que presenta los datos 
representados en HTML, así mismo un sitio puede proporcionar funcionalidad que
permita a los visitantes del sitio poblar la base de datos por su propia cuenta.

Amazon.com, por ejemplo, es un buen ejemplo de un sitio que maneja una base de
datos. Cada página de un producto es esencialmente una consulta a la base de
datos de productos de Amazon formateada en HTML, y cuando se envian datos al 
servidor, como opiniónes de cliente, estos son insertadados en la base de datos
de opiniones.

La forma simple de interactuar con una base de datos, es mediante el uso de
bibliotecas provistas por los lenguajes para ejecutar consultas SQL y una vez 
obtenidos los datos, procesarlos.

En este ejemplo se usa la biblioteca ``MySQLdb`` para conectar con una base de
datos MySQL, recuperar algunos registros::

    import MySQLdb

    db = MySQLdb.connect(user='me', db='mydb', passwd='secret', host='localhost')
    cursor = db.cursor()
    cursor.execute('SELECT name FROM books ORDER BY name')
    names = [row[0] for row in cursor.fetchall()]
    db.close()

Este enfoque funciona, pero presenta algunos problemas:

    * Los parametros de la conexión a la base de datos estan codificandos 
        *en duro* (*hard-coding*).

    * Se debe escribir una cantidad de código estereotípico: crear una
        conexión, un cursor, ejecutar una sentencia, y cerrar la conexión.

    * Ata a las aplicaciones a MySQL. Si, en el camino, se quiere cambiar MySQL
        por PostgreSQL por ejemplo, se deben alterar todas las lineas que hagan
        falta para la nueva biblioteca o conector, parámetros de conexión, 
        posiblemente reescribir el SQL, etc.

Por otro lado y quiza mas importante a la hora de desarrollar un programador que 
trabajé con programación orientada a objetos y bases de datos relacionales, debe
realizar un cambio de contexto cada vez que requiera interactuar con la base de
datos, escribiendo consultas en SQL y luego lidear con los resultados obtenidos
de las consultas entre los objetos. Este *cambio de contexto* es debido a una
diferencia que existe entre los dos paradigmas involucrados. Mientras que el
modelo relacional trata con relaciones, conjuntos y la logica matemática 
correspondiente, el paradigma orientado a objetos trata con objetos, atributos
 y asociaciones de unos con otros. Tan pronto como se quieran persistir los
objetos utilizando una base de datos relacional esta desaveniencia resulta
evidente. 

Las primeras aproximaciones al mapeo relacional de objetos, surgen de convertir
los valores de los objetos en grupos de valores simples para almacenarlos en la
base de datos (y volverlos a convertir luego de recuperarlos de la base de
datos). Sin embargo, esta traduccion simple dista mucho del concepto de *objetos 
persistentes*, la idea de estos es la traducción automatica de objetos en formas
almacenables en la base de datos y su posterior recuperación conservando las
propiedades y las relaciones ente los mismos.

Con la finalidad de lograr *objetos persistentes* un buen número de sistemas
de mapeo objeto-relacional se han desarrollado a lo largo de los años y aunque 
su efectividad es muy discutida la realidad es que estos permiten agilizar el
proceso de desarrollo, paleando mucho de los problemas presentados con
anterioridad.

Desde el punto de vista de un programador, un ORM debe lucir como un almacén
de objetos persistentes. Uno puede crear objetos y trabajar normalmente con
ellos, los cambios que sufran terminarán siendo reflejados en la base de datos.

.. http://es.wikipedia.org/wiki/Mapeo_objeto-relacional






.. _servidor-django:

******
Django
******

Introducción
============

.. note:: Acá tenemos que justificar por que django

`Django <http://www.djangoproject.com>`_ es un framework web escrito en Python
el cual sigue vagamente el concepto de Modelo Vista Controlador.
Ideado inicialmente como un adminsitrador de contenido para varios sitios de
noticias, los desarrolladores encontraron que su CMS era lo sufcientemente
genérico como para curbir un ámbito más aplio de aplicaciones.

En honor al músico Django Reinhart, fue liberado el código base bajo la licencia 
:term:`BSD` en Julio del 2005 como Django Web Framework. El slogan del framework
fue "Django, Él framework para perfeccionistas con fechas límites" [*]_.

.. [*] Del ingles "The Web framework for perfectionists with deadlines"

En junio del 2008 fue anuncidada la cereación de la Django Software Fundation,
la cual se hace cargo hasta la fecha del desarrollo y mantenimiento.

Los orígenes de Django en la administración de páginas de noticias son evidentes
en su diseño, ya que proporciona una serie de características que facilitan el
desarrollo rápido de páginas orientadas a contenidos. 
Por ejemplo, en lugar de requerir que los desarrolladores escriban controladores 
y vistas para las áreas de administración de la página, Django proporciona una
aplicación incorporada para administrar los contenidos que puede incluirse como
parte de cualquier proyecto; la aplicación administrativa permite la creación,
actualización y eliminación de objetos de contenido, llevando un registro de
todas las acciones realizadas sobre cada uno (sistema de logging o bitácora), y
proporciona una interfaz para administrar los usuarios y los grupos de usuarios
(incluyendo una asignación detallada de permisos).

Con Django también se distribuyen aplicaciones que proporcionan un sistema de 
comentarios, herramientas para sindicar contenido via RSS y/o Atom, "páginas
planas" que permiten gestionar páginas de contenido sin necesidad de escribir
controladores o vistas para esas páginas, y un sistema de redirección de URLs.

Django como framework de desarrollo consiste en un conjunto de utilidades de
consola que permiten crear y manipular proyectos y aplicaciones. Este sigue el
patrón MVC y como el controlador "C" es manejado por el mismo sistema los
desarrolladores dieron a conocer a Django como un *Framework MTV*.

    * *M* significa "Model" (Modelo), la capa de acceso a la base de datos. Esta
      capa contiene toda la información sobre los datos: cómo acceder a estos,
      cómo validarlos, cuál es el comportamiento que tiene, y las relaciones
      entre los datos.

    * *T* significa "Template" (Plantilla), la capa de presentación. Esta capa
      contiene las decisiones relacionadas a la presentación: como algunas cosas
      son mostradas sobre una página web o otro tipo de documento.

    * *V* significa "View" (Vista), la capa de la lógica de negocios. Esta capa
      contiene la lógica que accede al modelo y la delega a la plantilla
      apropiada: puedes pensar en esto como un puente entre el modelos y las
      plantillas.

MVC o MTV la realidad es que ninguna de las interpretaciones es más "correcta"
que otra. Lo importante es entender los conceptos subyacentes.

.. note::
	Justificacción
	
		* completitud
		
		* popularidad
		
		* simplicidad
		

Estructuración de un proyecto en Django
=======================================

Durante la instalación del framework en el sistema del desarrollador, se añade
al PATH un comando con el nombre django-admin.py. Mediante este comando se crean
proyectos y se los administra.

Un proyecto se crea mediante la siguiente orden:

.. code-block:: bash

    $ django-admin.py startproject mi_proyecto # Crea el proyecto mi_proyecto

Un proyecto es un paquete Python que contiene 3 módulos:

    * manage.py
        Interfase de consola para la ejecución de comandos
    * urls.py
        Mapeo de URLs en vistas (funciones)
    * settings.py
        Configuración de la base de datos, directorios de plantillas, etc.
 
En el ejemplo anterior, un listado gerárquico del sistema de archivos 
mostraría la siguiente estructura::

    mi_proyecto/
        __init__.py
        manage.py
        settings.py
        urls.py

El proyecto funciona como un contenedor de aplicaciones que ser rigen bajo
la misma base de datos, los mismos templates, las mismas clases de middleware entre 
otros parámetros.

Analicemos a continuación la función de cada uno de estos 3 módulos.

.. _django-proyecto-settings:

Módulo settings
---------------

Este módulo define la configuración del proyecto, siendo sus atributos
principales la configuración de la base de datos a utilizar, la ruta en la cual
se encuentran los médios estáticos, cuál es el nombre del archivo raíz de urls
(generalmente urls.py).
Otros atributos son las clases middleware, las rutas de los templates, el idioma
para las aplicaciones que soportan :ref:`i18n`, etc.

.. Subir como ventaja
.. Poner algo mas sobre la base de datos

Al ser un módulo del lengauje python, la confguración se puede editar muy facilmente
a diferencia de configuraciones realizadas en XML, además de contar con la ventaja de 
poder configurar en caliente algunos parametros que así lo requieran.

Un parametro fundamental es la lista denominada INSTALLED_APPS que contiene los nombres
de las aplicaciones instaladas en le proyecto.

.. _django-proyecto-manage:

Módulo manage
-------------

Esta es la interfase con el framework. Éste módulo es un script ejecutable, que
recibe como primer argumento un nombre de comando de django.

Los comandos de django permiten entre otras cosas:

    * startapp <nombre de aplicación>

        Crear una aplicación

    * runserver

        Correr el proyecto en un servidor de desarrollo.

    * syncdb

        Generar las tablas en la base de datos de las aplicaciones instaladas

Módulo urls
-----------

Este nombre de módulo aparece a nivel proyecto, pero también puede aparecer a
nivel aplicación. Su misión es definir las asociaciones entre URLs y vistas, de
manera que el framework sepa que vista utilizar en función de la URL que está
requiriendo el clinete.
Las URLs se ecriben mediante expresiones regulares del lenguaje Python. Este 
sistema de URLs aprovecha muy bien el modulo de expreciones regulares del
lenguaje permitiendo por ejemplo recuperar gurpos nombrados (en contraposición
al enfoque ordinal tradicional).

La asociación url-vistas se define en el módulo bajo el nombre :term:`urlpatterns`. 
También es posible derivar el tratado de una parte de la expresión reuglar
a otro módulo de urls. Generalmente esto ocurre cuando se desea delegar el
tratado de las urls a una aplicación particular.

    Ej:
        Derivar el tratado de todo lo que comience con la cadena personas a 
        al módulo de urls de la aplicación personas.

        .. code-block:: python

            (r'^personas', include('mi_proyecto.personas.urls'))

Mapeando URLs a Vistas
======================

Con la estructura del proyecto así definida y las herramientas que provee Django,
es posible ya ver resultados en el navegador web corriendo el servidor de
desarrollo incluido en el framework para tal fin.

Es posible tambien en este momento definir algo de logica de negocios 
implementando vistas dentro del proyecto para dotar al sitio de algo de
funcionalidad dinamica. Una función vista, es una simple función de Python que
toma como argumento una petición Web y retorna una respuesta Web. En el momento
de procesar una peticion HTTP Django seleccionara y ejecutara la vista. Lo
importante de este punto es como decirle a Django que vista ejecutar ante
determinada url, es en este punto donde surgen las *URLconfs*.

La *URLconf* es como una tabla de contenido para el sitio web. Básicamente,
es un mapeo entre los patrones URL y las funciones de vista que deben
ser llamadas por esos patrones URL. Es como decirle a Django, "Para esta URL,
llama a este código, y para esta URL, llama a este otro código".

En el apartado de modulos del proyecto se observo el modulo sobre el cual el objeto
URLconf es creado automáticamente: el archivo ``urls.py``, este modulo tiene
como requisito indispensable la definicion de la variable ``urlpatterns``, 
la cual Django espera encontrar en el módulo ``ROOT_URLCONF`` definido en
``settings``. Esta es la variable que define el mapeo entre las URLs y el código
que manejan esas URLs.

El sistema de plantillas
========================

Las vistas son las encargadas de retornar respuestas Web, entre estas respuestas
esta el codigo HTML que debe ser enviado al cliente o navegador, Django separar
el diseño de la página del código Python correspondiente a la logica de negocio
usando un *sistema de plantillas* para generar el HTML.

Una plantilla en Django es una cadena de texto que separar la presentación de un
documento de sus datos. Una plantilla define rellenos y diversos bits de lógica
básica (esto es, etiquetas de plantillas) que regulan como el documento debe ser
mostrado. Normalmente, las plantillas son usadas para producir HTML, pero las
plantillas de Django son igualmente capaces de generar cualquier formato basado
en texto.

Sistema básico de plantillas
=============================

Una plantilla de Django es una cadena de texto que pretende separar la
presentación de un documento de sus datos. Una plantilla define rellenos y
diversos bits de lógica básica (esto es, etiquetas de plantillas) que regulan
como el documento debe ser mostrado. Normalmente, las plantillas son usadas para
producir HTML, pero las plantillas de Django son igualmente capaces de generar
cualquier formato basado en texto.

A continuación se presenta una simple plantilla de ejemplo::

    <html>
    <head><title>Ordering notice</title></head>

    <body>

    <p>Dear {{ person_name }},</p>

    <p>Thanks for placing an order from {{ company }}. It's scheduled to
    ship on {{ ship_date|date:"F j, Y" }}.</p>

    <p>Here are the items you've ordered:</p>

    <ul>
    {% for item in item_list %}
    <li>{{ item }}</li>
    {% endfor %}
    </ul>

    {% if ordered_warranty %}
    <p>Your warranty information will be included in the packaging.</p>
    {% endif %}

    <p>Sincerely,<br />{{ company }}</p>

    </body>
    </html>

Esta plantilla es un HTML básico con algunas variables y etiquetas de plantillas
agregadas.

    * Cualquier texto encerrado por un par de llaves es una *variable*.
        Esto significa "insertar el valor de la variable con el nombre tomado".

    * Cualquier texto que esté rodeado por llaves y signos de porcentaje
        es una *etiqueta de plantilla*. Una etiqueta le indica al sistema
        de plantilla que debe hacer algo.

        Este ejemplo de plantilla contiene dos etiquetas: la etiqueta
        ``{% for item in item_list %}`` (una etiqueta ``for``) y la etiqueta
        ``{% if ordered_warranty %}`` (una etiqueta ``if``).

        Una etiqueta ``for`` actúa como un simple constructor de bucle.
        Una etiqueta ``if`` actúa como una cláusula lógica "if".

    * Finalmente, el segundo párrafo de esta plantilla tiene un ejemplo de un
        *filtro*, con el cual se alteran la exposición de una variable.

Cada plantilla de Django tiene acceso a varias etiquetas y filtros incorporados.

.. note:: quiza completar un poco

Estructura de una aplicación Django
===================================

Una aplicación es un paquete python que consta de un módulo models y un módulo
views, para crear una aplicacion se utiliza el comando **startapp** del modulo 
:ref:`manage <django-proyecto-manage>` de la siguiente manera:

.. code-block:: bash

    $ python manage.py startapp mi_aplicacion # Crea la aplicacion

El resultado de este comando genera la siguiente estructura en el proyecto::

    mi_proyecto/
        mi_aplicacion/
            __init__.py
            models.py
            views.py
        ...

Módulo models
-------------

Cada vez que se crea una aplicación, se genera un módulo models.py, en el cual
se le permite al programador definir modelos de objetos, que luego son
transformados en tablas relacionales [*]_.

Módulo views
------------

Cada aplicacion posee un módulo views, donde se definen las funcinoes que atienden
al cliente y son activadas gracias a el mapeo definido en el módulo urls del proyecto
o de la aplicación.

Las funciones que trabajan como vistas deben recibir como primer parámetro el request
y opcionalmente parámetros que pueden ser recuperados del mapeo de urls.

Dentro del módulo de urls

.. code-block:: python

    # Tras un mapeo como el sigunete
    (r'^persona/(?P<id_persona>\d)/$', mi_vista)
    # la vista se define como
    def mi_vista(request, id_persona):
        persona = Personas.objects.get(id = id_persona)
        datos = {'persona':persona, }
        return render_to_response('plantilla.html', datos)

.. [*] Mediante el comando syncdb del módulo manage del proyecto

.. tecnologias-servidor-django-static:

Contenido dinámico y estático en Django
=======================================

Django está orientado a la generación de *solo* contenido dinámico.
Pero generalmente se reuiqre en una aplicación web la inclusión de recursos
de tipo estático, como imágenes, javascript u hojas de estilo.

Django delega esta tarea al servidor web [DjangoDoc2009]_, sin embargo 
para desarrollo se prové un servidor de contenido estático.

La puesta en producción de una aplicación desarrollada en Django consta
de la configuración del servidor web en 2 aspectos:

 * Configuración del soporte para ejecución de Python
 	En la presente tesis nos focalizamos en WSGI ya que es un 
	estándard Pythonico, pero existen toros como mod_python para Apache.
	Independientemente de que tipo de soporte se utilize es necesario
	asegurarse que tanto Django, como así aplicaciones de terceros
	estén incluidas en el PythonPath con el cual se invoca al 
	script con el entry point de la aplicación.
	
 * Configuración de los medios estáticos.
 	Generalmente suele ser una ruta, o dos, pero no está limitado.


.. figure:: ../_svg/esquema_django_static.png

	Deployment de Django
	
		Una aplicación escrita en Django puesta en producción consta de contenido dinámico 
		manejado por WSGI y contenido estático servido por el web server.

.. [DjangoDoc2009] *Sirviendo archivos esáticos con Django*, Django Wiki, http://docs.djangoproject.com/en/dev/howto/static-files/#the-big-fat-disclaimer

El cliclo de una petición
=========================

Cada vez que un browser realiza una petición a un proyecto desarrollado en
django, la petición HTTP pasa por varias capas.

Inicialmente atraviesa los Middlewares, en la cual, el middleware de Request,
empaqueta las variables del request en una instancia de la calse Request.

Luego de atravesar los middlewares de request, mediante las definciones de URLs, 
se selecciona la vista a ser ejecutada.

.. algo de vista hay tambien en la parte de mapeo de url ver como hacer
Una vista es una función que recibe como primer argumento el request y
opcionalmente una serie de parámetros que puede recuperar de la propia URL.

Dentro de la vista se suelen hacer llamadas al ORM, para realizar consultas sobre
la base de datos. Una vez que la vista a completado la lógica, genera un mapeo que es
transferido a la capa de templates.

El template rellena sus comodines en función de los valores del mapeo que le entrega
la vista. Un template puede poseer lógica muy básica (bifurcaciones, bucles de repetición, 
formateo de datos, etc).

El template se entrega como un HttpResponse. La responsabilidad de la vista es entregar
una instancia de esta clase.

.. figure:: ../_svg/esquema_django.png
	
	Proceso de un request

.. _django-orm:

Interactuar con una base de datos
=================================

Django incluye una manera fácil pero poderosa de realizar consultas a bases de
datos utilizando Python.

Una ves configurada la conexión a la base de datos en el módulo de configuración
:ref:`settings <django-proyecto-settings>` se esta condiciones de comenzar
a usar la capa del sistema de Mapeo Objeto-Relacional del framework.

Si bien existen pocas reglas estrictas sobre cómo desarrollar dentro de Django, 
existe un requisito respecto a la convención de la aplicación: "si se va a usar 
la capa de base de datos de Django (modelos), se debe crear una aplicación de 
Django. Los modelos deben vivir dentro de una aplicaciones". Para crear una
aplicación se debe proceder con el procedimiento ya mencionado en :ref:`manage <django-proyecto-manage>`.

.. _django-orm-modelos:

Modelos
=======

Un modelo de Django es una descripción de los datos en la base de datos,
representada como código de Python.

Esta es la capa de datos -- lo equivalente a sentencias SQL -- excepto que están
en Python en vez de SQL, e incluye más que sólo definición de columnas de la
base de datos. Django usa un modelo para ejecutar código SQL detrás de las
escenas y retornar estructuras de datos convenientes en Python representando las
filas de las tablas base de datos. Django también usa modelos para representar
conceptos de alto nivel que no necesariamente pueden ser manejados por SQL.

Django define los modelos en Python por varias razones: 
    
    * La introspección requiere **overhead** y es imperfecta. Django necesita
        conocer la capa de la base de datos para porveer una buena API de
        consultas y hay dos formas de lograr esto. Una opción sería la 
        introspección de la base de datos en tiempo de ejecución, la segunda y
        adoptada por Django es describir explícitamente los datos en Python.
    
    * Escribir Python es divertido, y dejar todo en Python limita el número de
        veces que el cerebro tiene que realizar un "cambio de contexto".
    
    * El codigo que describe a los modelos se puede dejar fácilmente bajo un
        control de versiones.
    
    * SQL permite sólo un cierto nivel de metadatos y tipos de datos basicos, 
        mientras que un modelo puede contener tipos de datos especializado. La
        ventaja de un tipo de datos de alto nivel es la alta productividad 
        y la reusabilidad de código.
    
    * SQL es inconsistente a través de distintas plataformas.

Una contra de esta aproximación, sin embargo, es que es posible que el código
Python quede fuera de sincronía respecto a lo que hay actualmente en la base. Si
se hacen cambios en un modelo Django, se necesitara hacer los mismos cambios dentro
de la base de datos para mantenerla consistente con el modelo.

Finalmente, Django incluye una utilidad que puede generar modelos haciendo
introspección sobre una base de datos existente. Esto es útil para comenzar
a trabajar rápidamente sobre datos heredados.

Este modelo de ejemplo define una ``Persona`` que encapsula los datos
correspondientes al ``nombre`` y el ``apellido``.

.. code-block:: python

    from django.db import models

    class Persona(models.Model):
        nombre = models.CharField(max_length = 30)
        apellido = models.CharField(max_length = 30)

``nombre`` y ``apellido`` son atributos de clase

.. code-block:: sql

    CREATE TABLE miapp_persona (
        "id" serial NOT NULL PRIMARY KEY,
        "nombre" varchar(30) NOT NULL,
        "apellido" varchar(30) NOT NULL
    );

En el ejemplo presentado se observa que un modelo es una clase Python que hereda
de ``django.db.models.Model`` y cada atributo representa un campo requerido por
el módelo de datos de la aplicación.
Con esta informacion Django genera automaticamente la :term:`API` de acceso a
los datos en la base. 

Usando la API
-------------

Luego de crear los modelos y sincronizar la base de datos :ref:`<django-comandos-syncdb>` 
generando de esta manera el SQL correspondiente, se esta en condiciones de usar 
la API de alto nivel en Python que Django provee para accesar los datos::

    >>> from models import Persona
    >>> p1 = Persona(nombre='Pablo', apellido='Perez')
    >>> p1.save()
    >>> personas = Persona.objects.all()

En estas lineas se ven algunos detalles de la interaccion con los modelos:

    * Para crear un objeto, se importa la clase del modelo apropiada y se crea
        una instancia pasándole valores para cada campo.

    * Para guardar el objeto en la base de datos, se usa el método ``save()``.

    * Para recuperar objetos de la base de datos, se usa ``Persona.objects``.

Internamente Django traduce todas las invocaciones que afecten a los datos en
secuencias ``INSERT``, ``UPDATE``, ``DELETE`` de SQL

Django provee tambien una forma de seleccionar, filtrar y obtener datos de la 
base a traves de los administradores de consultas representado en el ejemplo
anterior por ``Persona.objects``.

.. _django_managers:

Administradores de consultas
----------------------------

Los managers o administradores de consultas son los objetos que representan la
interfase de comunicacion con la base de datos. Cada modelo tiene por lo menos
un administrador para acceder a los datos almacenados.
Cada entidad presente en el modelo, tiene al menos un *Manager*. Este *Manager*
encapsula en una semántica de objetos las opreaciones de consulta (*query*) de
la base de datos [*]_ . Un *Manager* consiste en una instancia de la clase
*django.db.models.manager.Manager* donde se definen, entre otros métodos,
*all()*, *filter()*, *exclude()* y *get()*.

Cada uno de éstos métodos genera como resultado una instancia de la calse
*QuerySet*. Un *QuerySet* envuelve el "resultado" de una consulta a la base
de datos. Se dice que envuelven el "resultado" porque la estrategia de acceso a
la base de datos es *evaluación retardada* [*]_, es decir, que la consulta que
representa el *QuerySet* no será evaluada hasta que no sea necesario acceder a
los resultados.

.. [*] En el lenguaje SQL, las consultas se realizan miediante la sentecia SELECT.
.. [*] También conocida como *Lazy Evaluation*

Un *QuerySet*, además de presentar la posibilidad de ser iterado, para recuperar
los datos, también posee una colección de métodos orientados a conuslta, como
*all()*, *filter()*, *exclude()* y *get()*. Cada uno de estos métodos, al
igual que en un mánager, devuelven instancias de *QuerySet* como resultado.
Gracias a esta característica recursiva, se pueden generar consultas
medinate encadenamiento.


Clasificación de aplicaciones Django
------------------------------------

.. note::
	Mejorar esto
	
	
	
Podemos hacer una clasificación entre los tipos de aplicaciones en función de su objetivo:

 * Las aplicaciones de usuario
 	Son aquellas aplicaciones que resuelven un problema específico. Suelen
estar 
	dispuestas en un subdirectorio del proyecto.
 	
 * Las aplicaciones de soporte
 	Las aplicaciones de soporte son las aplicaciones que resuelven un problema
general,
 	como autenticación, envío de correo, interacción con servicos provistos por
sitios
 	de terceros (Google Maps, Google Charts, AdSense, Yahoo Maps, Yahoo Pipes,
Feedburner, etc.),
 	etc. Django provee varias aplicaciones que están disponibles por defecto
ante la 
 	creación de un proyecto con el comando *create-app*.
 	
 * Aplicaciones template
 	Esta caracterización se puede aplicar tanto a proyectos como a aplicaciones
y consite
 	en una aplicación distribuida como plantilla para lograr una aplicación de
usuario, pero
 	que tiene varios factores engorrosos resueltos. Podemos citar en este caso,
a el proyecto
 	*Pinax* [*]_ que provee un conjunto de aplicaciones de soporte y
aplicaciones de template.
 	
 .. [*] *Pinax Project* http://pinaxproject.com/