.. _servidor:

########################
Tecnologías del servidor
########################

**********************************
Generación dinámica de páginas Web
**********************************

.. note::
    Introduccion de la mano de Tanenbaum
    La parte estatica de la cuestion dejarla para la introduccion como cuentito,
    aca vamos a los bifes dinamicos.

Esta sección tiene como finalidad introducir los conceptos básicos concernientes
a la *generación dinamica contenido* en el servidor.

En el enfoque dinámico, cuando un usuario realiza una solicitud, el mensaje
enviado tiene como objetivo la ejecución de un programa o secuencia de comandos
en el servidor. Por lo general, el procesamiento involucra el uso de la
información proporcianda por el usuario para buscar registros en una base de
datos y genrerar una página HTML personalizada para el cliente.


Tradicionalmente la tecnología utilizada se conoce como :term:`CGI`,
estandar que consiste en delegar la generación de contenido a un
programa. CGI se limita a definir la entrada y salida del proceso.

Un enfoque más moderno para la generación de contenido dinámico 
es la incrustación de secuencias de comandos dentro de 
las páginas HTML. Estas sentencias son leidas y ejecutadas el servidor
al momento de responder a la solicitud del cliente, 
como es el caso del lenguaje :term:`PHP`, o
:term:`ASP`.

.. tecnologias-servidor-server-modular:

Los servidores web primigenios y monolíticos evolucionaron a una arquitectura
modular [ApacheMod2009]_ [MicrosoftIIS2009]_ , en la cual, un módulo brinda soporte para una tarea específica.
Módulos comunes son autenticación, bitácora, balance de carga, así como también como 
los de generación de contenido.

.. [ApacheMod2009] *Módulos del servidor Apache 2.2*, último acceso, Septiembre de 2009, http://httpd.apache.org/docs/2.2/mod/
.. [MicrosoftIIS2009] *Módulos en Microsoft IIS*, último acceso Septiembre 2009, http://msdn.microsoft.com/en-us/library/bb757040.aspx


Nuevas formas de interacción entre un servidor web
y un programa fueron desarrolladas con el objeto de satisfacer necesidades más complejas, 
que no fueron tenidas en cuenta en la genericidad de CGI.

En la plataforma Java, se especifiaron
los Servlets [SunServlet2009]_ , 
.. con implementaciones como Tomcat [ApacheTomcat2009]_ 
y en 1996, se publicó la especificación J2EE, que formula una arquitectura de
aplicación web dividida en capas que corre un servidor de aplicaciones.

Basados en especificación J2EE, se crearon numerosos frameworks 
cuyos lineamientos determinaron la manera de concebir las aplicaciones web durante
casi una década.

En junio de 2004 se publica el proyecto Ruby On Rails, un framework de aplicaciones
web desarrollado en el lenguaje de programación Ruby, que revolucionó la forma de 
concebir los frameworks y la web.


James Duncan Davidson el creador de Tomcat y Ant llegó a decir que Rails
es el framework web mejor pensado que el ha usado. Davison pasó
10 años desarrollando aplicaciones web, frameworks y la especificación de los
Servlets para el lenguaje Java [RailsQuotes2009]_ [*]_ .

.. [RailsQuotes2009] Cistas de Ruby On Rails, http://rubyonrails.org/quotes
.. [*] *"Rails is the most well thought-out web development framework I’ve ever used. And that’s in a decade of doing web applications for a living. I’ve built my own frameworks, helped develop the Servlet API, and have created more than a few web servers from scratch. Nobody has done it like this before."*

.. [ApacheTomcat2009] http://tomcat.apache.org/index.html
.. [SunServlet2009] http://java.sun.com/products/servlet/



.. Existen otras formas de generar contendio al vuelo y generalmente todas estas se
.. engloban dentro del termino **HTML dinámico**.

Se realiza a continuación un revisón general sobre los componentes de un servidor web para
dar paso a posteriori al análisis de los lenguajes dinámicos y sus frameworks.

Servidor Web
============

Un servidor web, o *web server* es un software encargado de recibir solicitudes
de un cliente, típicamente un :ref:`navegador web <navegador-web>`, a través del
protcolo :term:`HTTP` y generar una respuesta.
Mediante la especificación :term:`MIME` que se incluye en el encabezado de la
respuesta, se puede identificar que tipo de archivo es devuelto, 
siendo el tipo más común :term:`HTML`. 

El contenido que es enviado al cliente puede ser de origen *estático* o *dinámico*.

.. _conteido-estatico:

El contendio estático es aquél que proviene desde un archivo en el sistema de
archivos sin ninguna modificación. 

.. _conteido-dinamico:

El contenido dinámico en contraposición al :ref:`contenido estático
<conteido-estatico>` proviene de la salida de algún programa, un :term:`script` o algún
tipo de API invocada por el web server (como SSI, :ref:`CGI <servidor-cgi>`,
SCGI, FastCGI, JSP, ColdFusion, NSAPI o ISAPI).

.. El clinete web accede a los recursos del web server mediante una dirección de recurso, u :term:`URL`.
La única forma de acceder a los recursos es a traves de una URL independientemente de su 
naturaleza.

.. _servidor-cgi:

CGI
===

Common Gateway Interface (CGI) [*]_ surge alrededor del año 1998,
como el primer estándar de comunicación o :term:`API` entre un servidor web y un
programa de usuario. 

La salida del proceso invocado puede ser un documento
HTML entendible para el navegador, o culaquier otro tipo de archivo, como
imágenes, sonidos, contenido interactivo, etc.

Las variables de entorno y la entrada estándar, constituyen los mecanismos de entrada
del programa, mientras que el contenido devuelto al servidor web proviene de la salida estándar
del proceso.
Dentro de la información provista por el servidor web se tienen los parámetros HTTP (como la :term:`URL`, el método, el nombre del host, el puerto, etc.) además de información 
sobre el servidor. Éstos datos se transfieren mediante variables de entorno.


Si existiese un cuerpo en la petición HTTP, como por ejemplo, el contenido de un
formulario, la aplicación CGI accede a esta información como entrada estandard.

El resultado de la ejecución de la aplicación CGI se escribe en la salida
estándard, anteponiendo las cabeceras HTTP de respuesta.
En dichos encabezados, el tipo MIME determina como se interpreta la respuesta.
Es decir, la invocación de un CGI puede
devolover diferentes tipos de contenido al cliente (html, imágenes, javascript,
contenido multimedia, etc.)

.. figure:: ../_svg/esquema_cgi.png
    
    Poceso de una solicitud con CGI.

Dentor de las varaibles de entorno, la Wikipedia [WikiCGI2009]_ menciona:

    * QUERY_STRING
        Es la cadena de entrada del CGI cuando se utiliza el método GET sustituyendo algunos símbolos especiales por otros. Cada elemento se envía como una pareja Variable=Valor. Si se utiliza el método POST esta variable de entorno está vacía.
    * CONTENT_TYPE
        Tipo MIME de los datos enviados al CGI mediante POST. Con GET está vacía. Un valor típico para esta variable es: Application/X-www-form-urlencoded.
    * CONTENT_LENGTH
        Longitud en bytes de los datos enviados al CGI utilizando el método POST. Con GET está vacía.
    * PATH_INFO
        Información adicional de la ruta (el "path") tal y como llega al servidor en el URL.
    * REQUEST_METHOD
        Nombre del método (GET o POST) utilizado para invocar al CGI.
    * SCRIPT_NAME
        Nombre del CGI invocado.
    * SERVER_PORT
        Puerto por el que el servidor recibe la conexión.
    * SERVER_PROTOCOL
        Nombre y versión del protocolo en uso. (Ej.: HTTP/1.0 o 1.1)

Variables de entorno que se intercambian de servidor a CGI:

    * SERVER_SOFTWARE
        Nombre y versión del software servidor de www.
    * SERVER_NAME
        Nombre del servidor.
    * GATEWAY_INTERFACE
        Nombre y versión de la interfaz de comunicación entre servidor y aplicaciones CGI/1.12

Debido a la popularidad de las aplicaciones CGI, los servidores web incluyen
generalmente un directorio llamado **cgi-bin** donde se albergan estas
aplicaciones.

.. note:: Faltan referencias sobre la popularidad de los lenguajes


.. Históricamente las aplicaciones CGI han sido escritas en lenguajes interpretados, 
.. sinedo muy popular Perl.
.. En los :ref:`lenguajes interpretados <servidor-lenguajes>`, el código ejecutable es
.. texto plano, por lo que puede ser editado en una terminal directamente en el servidor. Otra ventaja
.. importante de ser texto plano, es que es más sencillo de mantener con alguna herramienta de :term:SCM.

CGI posee dos limitaciones importantes, una es el overhead produccido por la ejecución de un 
proagrama y la segunda, que no fue diseñado para mantener información sobre la
sesión. Cada petición se trata de manera independiente [DwightErwin1996]_ .

.. [WikiCGI2009] *Interfaz de entrada común*, Wikipedia, 2009, último acceso Agosto 2009, http://es.wikipedia.org/wiki/Common_Gateway_Interface#Intercambio_de_informaci.C3.B3n:_Variables_de_entorno

.. [DwightErwin1996] *Limitaciones de CGI*, *Using CGI*,  http://www.bjnet.edu.cn/tech/book/seucgi/ch3.htm#CGILimitations

.. [*] A veces traducido como pasarela común de acceso.

.. _servidor-lenguajes:

Relevancia de los lenguajes dinámicos
=====================================


A continuación se analizan las características que hacen relevante 
el estudio de los lengaujes dinámicos, como plataforma de desarrollo de aplicaciones
web dinámicas, para dar paso luego, a al estudio de los frameworks.



Una de las clasificaciones más generales que se suelen realizar sobre los lenguajes de programación es identificar su objetivo.
Los lenguajes de programación de *propósito general* están orientados a resolver cualquier tipo
de problema, mientras que los lenguajes de *propósito específico* o *DSL* están enfocados en reolver un tipo de problema
de manera más eficáz. Un ejemplo muy popular de DSL es la planilla de cálculo Microsoft Excel [DavidPollak2006]_.

.. [DavidPollak2006] *Ruby Sig:How To Design A Domain Specific Language*, Google Tech Talk, 2:44, http://video.google.com/videoplay?docid=-8103284744220333344

Además de la división entre lenguaje de porposito general y DSL, exiten otras, como la divsión entre leguajes interpretados y compilados.

Un lenguaje de programación interpretado es aquel en el cual los programas son ejecutados
por un intérprete, en lugar de realizarse una traducción a lenguaje máquina, conocido como proceso
de compilación.

En teoría cualquier lenguaje de programación podría ser compilado o interpretado. 

En un lengauje interpretado el código fuente es el ejecutable. En cambio,
para llegar a ejecutar un programa escrito en un lenguaje compilado,
se deben atravesar dos etapas.
La primera consiste en la traducción de las sentencias por código máquina 
y otra de enlace, en la cual se ensambla el código objeto resultado de la compilación.
En esta última etapa también se resuleven los enlaces entre los diferentes módulos compilados.

.. figure:: ../_svg/lenguaje_interpretado.png

    Lenguaje interpretado.

Existe un mecanismo intermedio de ejecución, conocido como máquina virtual. En éste existe
un proceso de compilación del código fuente a un lenguaje intermedio, comunmente denominado
*bytecode*. Este bytecode es luego ejecutado sobre un intérprete, al cual se denomina comunmente
como máquina virutal. La traducción del código fuente a *bytecode* puede ser explícita, como en el
lenguaje Java, o implícita como en Python, donde se mezcla en el intérprete la funcionalidad de 
compilación a bytecode e interpretación en un solo programa.

Los lenguajes de programación interpreteados suelen ser de alto nivel y de *tipado dinámico*, es decir
que la mayoría de las comprobaciones realizadas en tiempo de compilación son evaluadas durante
la ejecución [*]_ .

.. [*] Estas comprobaciones comprenden el checkeo de tipos de datos, resolución de métodos entre otros.

Un lenguaje es multiplataforma si permite ser ejecutado en varias plataformas [*]_ .

Hasta acá llegó la revisión del jueves 24 de Septiembre
-------------------------------------------------------


La mayoría de los lengaujes interpretados son multiplataforma, ya que solo es necesario disponer
de un intérprete compilado, a diferencia de los lenguajes compilados en los cuales se requiere disponer
 de un compilador para la plataforma y compilar el código.

.. [*] *Una plataforma es una combinación de hardware y software usada para ejecutar aplicaciones; en su forma más simple consiste únicamente de un sistema operativo, una arquitectura, o una combinación de ambos. La plataforma más conocida es probablemente Microsoft Windows en una arquitectura x86* [WikiPlataforma2009]_

.. [WikiPlataforma2009] *Multiplataforma*, Wikipedia, 2009, último acceso, Agosto de 2009, http://es.wikipedia.org/wiki/Multiplataforma

La mayoría de los lenguajes interpretados son lenguajes dinámicos, esto permite el agregado de código, extensión o redefinición de objetos 
y hasta inclusive modificar tipos de datos, en tiempo de ejecución.
Cabe destacar que si bien estas características son factibles de implementar sobre lengujaes estáticos, no resulta sencillo.


En base a la clasificación antes mencionada, se analizan los lenguajes de programación más 
populares para el desarrollo de aplicaciones web.

**Perl** es un lenguaje de programación de propósito general diseñado por Larry Wall en 1987. Perl toma características del lenguaje C,
del lenguaje interpretado shell (sh), AWK, sed, Lisp y, en menor medida, de muchos otros lenguajes de programación.
Su uso principal es el procesamiento de texto, siendo muy popular en programación de sistemas. Muchos sistemas basados
en CGI están escritos en Perl (sistemas de administración de servidores, correo, etc.). Perl esta disponible para
muchas plataformas, incluyendo todas las variantes de UNIX.

Estructuralmente, Perl está basado en un estilo de bloques como los del C o AWK, y fue ampliamente adoptado por su 
destreza en el procesamiento de texto.

La principal crítica al lenguaje es la ambiguedad y complejidad de su sintaxis, una tarea puede ser realizada de 
varias maneras diferentes, dado lugar a confusión en grupos de trabajo.



**Java** es un lenguaje de progamación orientado a objetos, multiplataforma y porpósito general, basado en máquina virtual, de compilación explícita.
Java ha definido algunos elementos importantes en cuanto a la web dinámica, como los applets [*]_ y la especificación J2EE.
Dos desventajas que presenta este lenguaje, al igual que su predecesor C++, del cual heredó una sintaxis verborragica [SeanKellyRecFromAdict2009]_
además del tipado estático. Como contrapartida resulta una alternativa velóz para ciertas tareas _ponert_citas_, lo que
motivó el desarrollo de lenguajes dinámicos [TolksdorfJVM2009]_ que hacen uso de su máquina virtual [*]_. Se destaca, Scala, que hoy cuenta con frameworks con una concepción post RubyOnRails. 

.. sin embargo, todavía no han alcanzado la popularidad de J2EE o ROR.

.. [*] Pequeños programaas que se ejecutan en el navegaor web
.. [*] Estos lenguajes interpretados utilizan compilación JIT a bytecode de la JVM.

http://www.archive.org/details/SeanKellyRecoveryfromAddiction
.. [SeanKellyRecFromAdict2009] *Recuperandose de la adicción*, Sean Kelly, Video hospedado en *The Internet Archive*, último acceso Septiembre de 2009, http://www.archive.org/details/SeanKellyRecoveryfromAddiction

.. [TolksdorfJVM2009] *Programming languages for the Java Virtual Machine JVM*, Robert Tolksdorf, último acceso Septiembre de 2009, http://www.is-research.de/info/vmlanguages/


**PHP** es un lenguaje interpreteado, originalmente diseñado para ser embebido 
dentro del código HTML y procesado en el servidor, lo cual lo convierte en un DSL.
Con los años evolucionó hacia un lenguaje de porpósito general.
Toma elementos de Perl y shellscript, C, y recientemente Java.


Tradicionalmente el ciclo de ejcución consiste en:
	* A partir de la URL de la solicitud del cliente se determina el archivo PHP que se encargará de generar la respuesta
	* El servidor, activa el módulo encargado de la interpretación de PHP con el archivo y la solicitud como entrada
	* La salida es devuelta al cliente.
	
Presenta importantes ventajas sobre CGI, ya que no es necesario confeccionar un programa de usuario y 
la resolución de URLs está dada por la estructura del  sistema de archivos. 
Si bien es muy popular [PHPNetPopularity2009]_ y está disponible en la gran mayoría de los servidores UNIX, simplificando el :ref:`deployment`
PHP es criticado por no poseer ámbito de nombres para los módulos, 
promover el código desordenado y tener serios problemas a la hora de la optimización [BlogHardz2008]_ .
Los autores de Django y Ruby On Rails provenir del lenguaje PHP en [SnakesAndRubies2005]_ .


.. [PHPNetPopularity2009] *Utilización de PHP según php.net*,  último acceso Septiembre de 2009, <http://www.php.net/usage.php>
.. [SnakesAndRubies2005] Video de la charla *Snakes and Rubies*,  `Universidad DePaul, Chicago <http://www.depaul.edu/>`_ http://www.djangoproject.com/snakesandrubies/


.. [BlogHardz2008] http://hardz.wordpress.com/2008/02/07/php-hipertexto-pre-procesado/

**Ruby** es un lenguaje orientado fuertemente objetos, multiplataforma, creado en 1995 por 
Yukihiro "Matz" Matsumoto, en Japón.
A menudo comparado con *Smalltak*, se suele decir que Ruby es un lenguaje de objetos puro, 
ya que *todo* es un objeto. Posee muchas caracteríticas avanzadas como metaclases, clausuras, iteradores, integración natural de expresiones regulares en la sintaxis, etc.

Su sintaxis es compacta, gracias a la utilización de simbología, parte de la cual fue tomada de Perl.
Existen varios intérpretes de Ruby, siendo la oficial escrita en C, se concen 
YARV [YARV2009]_ , 
JRuby [JRuby2009]_ , 
Rubinius [Rubinius2009]_ , 
IronRuby [IronRuby2009]_ ,
y MacRuby [MacRuby2009]_ .

.. [YARV2009] Yet Another Ruby VM, escrita por Sacasada Kiochi http://www.atdot.net/yarv/
.. [JRuby2009] JRuby es una máquina virtual de Ruby escrita sobre la máquina virtual de **Java**, http://jruby.codehaus.org/
.. [Rubinius2009] Rubinius es una máquina vritual de Ruby escrita en **C++** http://rubini.us/
.. [IronRuby2009] IronRuby es una implementación de Ruby sobre la plataforma **.Net** http://www.ironruby.net/
.. [MacRuby2009] MacRuby es una implementación de Ruby sobre **Objective-C** para el sistema Mac OS X, http://www.macruby.org/

Una de las :term:`Killer App` según el autor es el framework para contenido web denominado `"Ruby on Rails" <www.rubyonrails.com>`_ .
Su versión estable oficial fue liberada en el año 2005 y proponía un cambio radical al enfoque complejo de *J2EE* [RailsQuotes2009]_ .

Ruby aún posee baja aceptación debido, quizás, a que la documentación oficial solía estar
en idioma Japonés (auque la situación se ha venido revirtiendo ultimamente). Otra desventaja importante es que
la velocidad del intérprete oficial es bastante baja (cuando se la compara con otros lenguajes dinámicos similares como Python) y
variables entre plataformas.


.. _lenguaje-python:

**Python** es un lenguaje de programación interpretado multiparadigma, 
de propósito general. Fue creado por por Guido van Rossum en el año
1991.
Se trata de un lenguaje dinámico que toma elmentos de varios lenguajes, como C, Java,
Scheme, entre otros.

Python puede ser extendido mediante módulos escritos en C o C++, y también 
se puede embeber el intérprete en otros lenguajes. 
Permite cargar bibliotecas de enlace dinámico.

Python es considerado por parte de la comunidad UNIX, como una evolución de Perl, 
de sintaxis limpia y potente. Eric Raymond, en el artículo "Why Python?", explica 
su conversión de Perl a Python [EricRaymon2000]_. 

.. [EricRaymon2000] *Why Python*, Linux Journal, publicado el 1° de Mayo de 2000, http://www.linuxjournal.com/article/3882

Muchos de las sistemas webs basados en CGI, están
escritos en Perl, por lo cual no es sorpresa encontrar una buena cantidad de 
proyectos del lenguaje Python orientados a la Web [PythonPyPi2009]_.

.. [PythonPyPi2009] En el repositorio de proyectos del lenguaje se encuentran más 1100 resultados para paquetes relacionados con el término "web". http://pypi.python.org/pypi?%3Aaction=search&term=web&submit=search

Los motivos por los cuales se seleccionó [*]_ el leguaje Python para el desarrollo de
la aplicación, son los que a continuacion se enumeran:

	* Popularidad [PythonPyPi2009]_
		
	* Performance adecuada en función de las lineas de código escritas [DhananjayNene2009]_
		- Si bien Perl es más velóz para tareas de tratamiento de texto, su sintaxis es compleja
	
	* Filosofía de simplicidad
		- Sintaxis clara
		- Zen de Python [PythonOrgZen2009]_
	
.. [DhananjayNene2009] *Performance Comparison – C++ / Java / Python / Ruby/ Jython / JRuby / Groovy*, blog de Dhananjay Nene, último acceso, septiembre de 2009, http://blog.dhananjaynene.com/2008/07/performance-comparison-c-java-python-ruby-jython-jruby-groovy/

En el :ref:`apéndice <apendices-python>` se encuentra una referecia detallada del lenguaje.

.. [PythonOrgZen2009] *El zen de Python*, último acceso Septimebre de 2009, http://www.python.org/dev/peps/pep-0020/

.. [*] Por sin no les quedaba duda del fanatismo del defo, by **gisE**!!!

.. _servidor-wsgi:

Módulo de interconexión de servidor web con Python
---------------------------------------------------

Existen varios módulos para interconexión de intérprete de Python con un servidor web. Phillip J. Eby formuló
un método que sigue la filosofía del lenguaje, en la [PEP333]_, que denominó WSGI (Web Server Gateway Interface).
Informalmente se puede decir que WSGI es una traducción de CGI al lenguaje Python.
Su objetivo principal fue estaandarizar sobre el lenguaje el macanismo de comunicación entre el servidor y una aplicación.

.. [PEP333] PEP *Python Enhancement Proposals* son documentos en los que se proponen mejoras para el lenguaje
Python, son albergados en el sitio oficial http://www.python.org

Para satifacer una solicitud bajo WSGI, se invoca la función de entrada. Esta recibe 2 argumentos:
	1. Un diccionario con las variables de entorno, al igual que en CGI
	2. Una función (u :ref:`objeto llamable <apendice_python_callables>` ) al cual se invoca para iniciar la respuesta.

.. figure:: ../_svg/esquema_wsgi.png

    Esquema WSGI.

En el siguente ejemplo constituye una aplicación mínima en WSGI. La función app es el punto de entrada y devuelve *Hello World*.
Utiliza la función que recibe como segundo argumento, 'start_response', para que el cliente determine como tratar la respuesta.
En este caso, texto plano.

.. code-block:: python

    def app(environ, start_response):
        start_response('200 OK', [('Content-Type', 'text/plain')])
        return ['Hello World\n']

.. _servidor-orm:

***************
Frameworks Web
***************

.. _servidor-frameworks:

Frameworks
==========

.. Usamos la traducción redefinir para override
.. note:: Poner CLI

Según la la wikipedia [WIK001]_ un framework de software es *una abstracción en
la cual un código común, que provee una funcionalidad genérica, puede ser
personalizado por el programador de manera selectiva para brindar una
funcionalidad específica*.

.. [WIK001] *Software Framework*, Wikipedia, 2009, http://en.wikipedia.com/software_framework, última visita Agosto de 2009.

Además agrega que los frameworks son similares a las bibliotecas de software
(a veces llamadas librerías) dado que proveen abstracciones reusables de código
a las cuales se accede mediante una API bien definida. Sin embargo, existen
ciertas características que diferencian al framework de una librería o
aplicaciones normales de usuario:

    * Inversion de control
		
		Tradicionalmente se escriben las aplicaciones haciendo
		llamadas a las bibliotecas de manera explicita. El flujo de control
		es definido por el programador. En el caso de una aplicación escrita 
		sobre un framework, el flujo es definido por éste.


    * Comportamiento por defecto definido

        En cada elemento del framework, existe un comportamiento genérico con alguna
        utilidad.

    * Extensibiliad

		El comportamiento predefinido de cada componete es generlamnete
		modificado por el programador con algún fin específico. Los métodos
		utilizados en los frameworks realizados sobre lenguajes orientados
		a objetos suelen ser redefinición o especialización.

    * No modificabilidad del código propio del framework
		
		Las extensiones y definiciones propias de una aplicación se realizan sobre 
		el código proyecto y no sobre el código del framework.

Se utiliza un framework con el objeto de simplificar el desarrollo de
un proyecto, permitendo a los programadores desligarse de resolver detalles 
comunes de bajo nivel.

A modo de ejemplo, un equipo donde se utiliza un framework web para desarrollar un
sitio de banca electrónica, los desarrolladores pueden enfocarse en la lógica
necesaria para realizar las extraciones de dinero, en vez de la mecánica para
preserver el estado entre las peticiones del navegador.


Sin embargo una serie de argumentos comunes existen contra la utilización 
de frameworks:
 * La complejidad de sus APIs
 * Incertidumbre ante  la existencia de múltiples alternativas para un mismo tipo de aplicación.
 * El aprendizaje de un framework suele requerir tiempo extra, que debe ser tenido en cuenta. 


.. figure:: ../_svg/esquema_libreria_vs_framework.png

    Libreria vs Framework.

.. note:: Breve introducción a patrones arquitecturales y mvc


.. _servidor-mvc:

El patrón Model View Controler en frameworks web
================================================

Normalmente en el desarrollo de las aplicaciones web, mediante lenguajes
de etiquetas como PHP o ASP, el diseño de la interfase, la lógica de la
aplicación y el acceso a datos suelen estar agrupados en un solo módulo.
Esto conlleva un mantenimiento dificultoso y una baja interacción entre
los diseñadores (artistas) y los programadores.

El patrón arquitectural MVC, *Modelo Vista Controlador* propone discriminar
la aplicación en 3 capas. La interfase con el usuario (vista) se desacopla 
de la lógica (controlador) y ésta a su vez, del acceso a datos (modelo).
Esta división favorece la reutilización de componentes.

Este patrón fue descrito por primera vez en 1979 por Trygve Reenskaug [Tryg1979]_,
quien se encontraba entonces trabajando en Smalltalk en laboratorios de investigación de Xerox.
La implementación original se describe por completo en "Programación de Aplicaciones
en Smalltalk-80(TM): Como utilizar Modelo Vista Controlador" [SmallMVC]_.

.. [Tryg1979] Trygve Reenskaug, http://heim.ifi.uio.no/~trygver/themes/mvc/mvc-index.html
.. [SmallMVC] Steve Burbeck, Ph.D. http://st-www.cs.illinois.edu/users/smarch/st-docs/mvc.html

Descripción del patrón:

    * Modelo
    
    	Esta capa define los datos, sus relaciones y la manera de acceder a estos.
    	Se asegura de la integridad de los datos entre otras cosas. Suele permitir
    	definir nuevas abstracciones de datos.

    * Vista

        Esta es la capa de presentación del modelo, seleccionando qué mostrar y 
        cómo mostrarlo, usualmente la interfaz de usuario.

    * Controlador

        Esta capa responde a eventos, usualmente acciones del usuario, e invoca
        cambios en el modelo y probablemente en la vista.

J2EE fue el primer framework que aplicó el concepto de MVC al desarrollo de aplicaciones
web. Gran cantidad frameworks que surgieron desde entonces han aplicado en
mayor o menos grado este concepto.

Componentes de un framework web MVC
-----------------------------------

Un framework web MVC suele contar con los siguientes componentes [WIKI002]_
	
	* Acceso a datos
	
		Los tipos de datos de los lenguajes orientados a objetos difieren de 
		el modelo ER utilizado para la definición de bases de datos. Un ORM
		tiene como objetivo acortar esta brecha, permtiendo definir entidades
		en objetos que luego se transportan a la base de datos, además de la
		capacidad de CRUD y consultas sobre estos.

    * Seguridad
    	
		Existen diversos aspectos de seguridad que deben ser tenidos en cuenta
		cuando se implementa una aplicación web, como la vlidación de entrada,
		protección de Cross Site Scripting, etc.

    * Mapeo de URLs
    
    	Cada URL activa algún compoenente del controlador. La definción de esta
    	asociación (o mapeo) generalmente está centralizada y bien especificada en
    	un framework.

    * Sistema de plantillas
    	
    	Las plantillas corresponden a la capa vista del patrón MVC. Su objetivo
    	principal es definir la forma en la cual se muestran los datos al usuario,
    	provenientes del controlador.
    	Para definir la plantilla se utiliza un lenguaje básico que se integra
    	con HTML o XML.
    	La utilización de plantillas facilita la modificación de la fachada sin
    	acceder al modelo o contolador.

    * Caché
    	
    	La generación de ciertas páginas dentro de la aplicación puede requerir
    	un timpo considerable por lo que es normalmente utilizada alguna técnica
    	de caché, que consiste en almacenar la salida durante un tiempo determinado,
    	de manera de obtener una respuesta *cacheada*, lo que repercute en mayor
    	velocidad.
    	Algunos frameworks hacen uso de algun mecanismo unificado para realizar caché.
    	

    * AJAX
    	
    	Hoy en día es común la técnica de incorporar elementos dinámicos que 
    	modifican el estado de una página de manera asincrónica. Es decir
    	partes de la página pueden realizar nuevas requermientos al servidor
    	cuya respuesta no fuerza una recarga de la página.
    	Esta técnica es conocida como AJAX. Algunos frameworks como Ruby On Rails soportan 
    	AJAX directamente en el sistema de plantillas.

    * Configuración mínima y simplificada
    	
    	Existen ciertos parámetros de las diversas capas que en algunos frameworks se
    	encuentran especificados en un único archivo XML. Hoy en día se prefieren
    	los lenguajes más "human readable" como YAML, archivos INI o código.
    	

.. [WIKI002] *Web Framework*, Wikipedia, 2009, http://en.wikipedia.org/wiki/Web_application_framework, última visita Agosto de 2009.


Mapeador Objeto-Relacional
==========================


Los lenguajes orientados a objetos utilizan clases, atributos y referencias para
modelar el dominio de la aplicación, mientras que las bases de datos relacionales 
lo hacen a través de tablas y relaciones entre ellas. En el paradigma orientado a objetos
una de las características que se enuncia es la persistencia, sin embargo, 
las implementaciones actuales de persistencias de objetos no brindan el performance
ni la facilidad de consultas que ofrecen las bases de datos relacionales (RDBMS).
El lenguaje utilizado para definir y modificar los datos en los RDBMS, se conoce como SQL,
el cual difiere radicalmente de la concepción de los lenguajes OO.


Es deseable utilizar una base de datos relacional para el almacenamiento.
Un ORM libera la carga de la conversión explícita del lenguaje OO a SQL y 
logra independizar la estructura de almacenamiento del modelo de dominio.

Un ORM realiza en principio tres tipos de conversión del lenguaje OO a SQL:
 * Converisión de definición de entidades.
 * Creacíon, modificación y eliminación de entidades a partir de instancias 
 de clases de modelo (persistencia).
 * Definición de consultas en lenguaje OO y recuperación de datos en instancias 
 de clases de modelo.
  
..
	Las primeras aproximaciones al mapeo relacional de objetos surgen de convertir
	los valores de los objetos en grupos de valores simples para almacenarlos en la
	base de datos (y volverlos a convertir luego de recuperarlos de la base de
	datos). Sin embargo, esta traduccion simple dista mucho del concepto de *objetos 
	persistentes*, la idea de estos es la traducción automatica de objetos en formas
	almacenables en la base de datos y su posterior recuperación conservando las
	propiedades y las relaciones ente los mismos.
	
	Con la finalidad de lograr *objetos persistentes* un buen número de sistemas
	de mapeo objeto-relacional se han desarrollado a lo largo de los años y aunque 
	su efectividad es muy discutida la realidad es que estos permiten agilizar el
	proceso de desarrollo, paleando mucho de los problemas presentados con
	anterioridad.

A través de una API bien definida un ORM se presenta como un mecanismo de presitencia
de objetos.

.. http://es.wikipedia.org/wiki/Mapeo_objeto-relacional

_hasta_aca_

.. _servidor-django:

******
Django
******

Introducción
============

.. note:: Acá tenemos que justificar por que django

`Django <http://www.djangoproject.com>`_ es un framework web escrito en Python
el cual sigue vagamente el concepto de Modelo Vista Controlador.
Ideado inicialmente como un adminsitrador de contenido para varios sitios de
noticias, los desarrolladores encontraron que su CMS era lo sufcientemente
genérico como para curbir un ámbito más aplio de aplicaciones.

En honor al músico Django Reinhart, fue liberado el código base bajo la licencia 
:term:`BSD` en Julio del 2005 como Django Web Framework. El slogan del framework
fue "Django, Él framework para perfeccionistas con fechas límites" [*]_.

.. [*] Del ingles "The Web framework for perfectionists with deadlines"

En junio del 2008 fue anuncidada la cereación de la Django Software Fundation,
la cual se hace cargo hasta la fecha del desarrollo y mantenimiento.

Los orígenes de Django en la administración de páginas de noticias son evidentes
en su diseño, ya que proporciona una serie de características que facilitan el
desarrollo rápido de páginas orientadas a contenidos. 
Por ejemplo, en lugar de requerir que los desarrolladores escriban controladores 
y vistas para las áreas de administración de la página, Django proporciona una
aplicación incorporada para administrar los contenidos que puede incluirse como
parte de cualquier proyecto; la aplicación administrativa permite la creación,
actualización y eliminación de objetos de contenido, llevando un registro de
todas las acciones realizadas sobre cada uno (sistema de logging o bitácora), y
proporciona una interfaz para administrar los usuarios y los grupos de usuarios
(incluyendo una asignación detallada de permisos).

Con Django también se distribuyen aplicaciones que proporcionan un sistema de 
comentarios, herramientas para sindicar contenido via RSS y/o Atom, "páginas
planas" que permiten gestionar páginas de contenido sin necesidad de escribir
controladores o vistas para esas páginas, y un sistema de redirección de URLs.

Django como framework de desarrollo consiste en un conjunto de utilidades de
consola que permiten crear y manipular proyectos y aplicaciones. Este sigue el
patrón MVC y como el controlador "C" es manejado por el mismo sistema los
desarrolladores dieron a conocer a Django como un *Framework MTV*.

    * *M* significa "Model" (Modelo), la capa de acceso a la base de datos. Esta
      capa contiene toda la información sobre los datos: cómo acceder a estos,
      cómo validarlos, cuál es el comportamiento que tiene, y las relaciones
      entre los datos.

    * *T* significa "Template" (Plantilla), la capa de presentación. Esta capa
      contiene las decisiones relacionadas a la presentación: como algunas cosas
      son mostradas sobre una página web o otro tipo de documento.

    * *V* significa "View" (Vista), la capa de la lógica de negocios. Esta capa
      contiene la lógica que accede al modelo y la delega a la plantilla
      apropiada: puedes pensar en esto como un puente entre el modelos y las
      plantillas.

MVC o MTV la realidad es que ninguna de las interpretaciones es más "correcta"
que otra. Lo importante es entender los conceptos subyacentes.

.. note::
	Justificacción
	
		* completitud
		
		* popularidad
		
		* simplicidad
		

Estructuración de un proyecto en Django
=======================================

Durante la instalación del framework en el sistema del desarrollador, se añade
al PATH un comando con el nombre django-admin.py. Mediante este comando se crean
proyectos y se los administra.

Un proyecto se crea mediante la siguiente orden:

.. code-block:: bash

    $ django-admin.py startproject mi_proyecto # Crea el proyecto mi_proyecto

Un proyecto es un paquete Python que contiene 3 módulos:

    * manage.py
        Interfase de consola para la ejecución de comandos
    * urls.py
        Mapeo de URLs en vistas (funciones)
    * settings.py
        Configuración de la base de datos, directorios de plantillas, etc.
 
En el ejemplo anterior, un listado gerárquico del sistema de archivos 
mostraría la siguiente estructura::

    mi_proyecto/
        __init__.py
        manage.py
        settings.py
        urls.py

El proyecto funciona como un contenedor de aplicaciones que ser rigen bajo
la misma base de datos, los mismos templates, las mismas clases de middleware entre 
otros parámetros.

Analicemos a continuación la función de cada uno de estos 3 módulos.

.. _django-proyecto-settings:

Módulo settings
---------------

Este módulo define la configuración del proyecto, siendo sus atributos
principales la configuración de la base de datos a utilizar, la ruta en la cual
se encuentran los médios estáticos, cuál es el nombre del archivo raíz de urls
(generalmente urls.py).
Otros atributos son las clases middleware, las rutas de los templates, el idioma
para las aplicaciones que soportan :ref:`i18n`, etc.

.. Subir como ventaja
.. Poner algo mas sobre la base de datos

Al ser un módulo del lengauje python, la confguración se puede editar muy facilmente
a diferencia de configuraciones realizadas en XML, además de contar con la ventaja de 
poder configurar en caliente algunos parametros que así lo requieran.

Un parametro fundamental es la lista denominada INSTALLED_APPS que contiene los nombres
de las aplicaciones instaladas en le proyecto.

.. _django-proyecto-manage:

Módulo manage
-------------

Esta es la interfase con el framework. Éste módulo es un script ejecutable, que
recibe como primer argumento un nombre de comando de django.

Los comandos de django permiten entre otras cosas:

    * startapp <nombre de aplicación>

        Crear una aplicación

    * runserver

        Correr el proyecto en un servidor de desarrollo.

    * syncdb

        Generar las tablas en la base de datos de las aplicaciones instaladas

Módulo urls
-----------

Este nombre de módulo aparece a nivel proyecto, pero también puede aparecer a
nivel aplicación. Su misión es definir las asociaciones entre URLs y vistas, de
manera que el framework sepa que vista utilizar en función de la URL que está
requiriendo el clinete.
Las URLs se ecriben mediante expresiones regulares del lenguaje Python. Este 
sistema de URLs aprovecha muy bien el modulo de expreciones regulares del
lenguaje permitiendo por ejemplo recuperar gurpos nombrados (en contraposición
al enfoque ordinal tradicional).

La asociación url-vistas se define en el módulo bajo el nombre :term:`urlpatterns`. 
También es posible derivar el tratado de una parte de la expresión reuglar
a otro módulo de urls. Generalmente esto ocurre cuando se desea delegar el
tratado de las urls a una aplicación particular.

    Ej:
        Derivar el tratado de todo lo que comience con la cadena personas a 
        al módulo de urls de la aplicación personas.

        .. code-block:: python

            (r'^personas', include('mi_proyecto.personas.urls'))

Mapeando URLs a Vistas
======================

Con la estructura del proyecto así definida y las herramientas que provee Django,
es posible ya ver resultados en el navegador web corriendo el servidor de
desarrollo incluido en el framework para tal fin.

Es posible tambien en este momento definir algo de logica de negocios 
implementando vistas dentro del proyecto para dotar al sitio de algo de
funcionalidad dinamica. Una función vista, es una simple función de Python que
toma como argumento una petición Web y retorna una respuesta Web. En el momento
de procesar una peticion HTTP Django seleccionara y ejecutara la vista. Lo
importante de este punto es como decirle a Django que vista ejecutar ante
determinada url, es en este punto donde surgen las *URLconfs*.

La *URLconf* es como una tabla de contenido para el sitio web. Básicamente,
es un mapeo entre los patrones URL y las funciones de vista que deben
ser llamadas por esos patrones URL. Es como decirle a Django, "Para esta URL,
llama a este código, y para esta URL, llama a este otro código".

En el apartado de modulos del proyecto se observo el modulo sobre el cual el objeto
URLconf es creado automáticamente: el archivo ``urls.py``, este modulo tiene
como requisito indispensable la definicion de la variable ``urlpatterns``, 
la cual Django espera encontrar en el módulo ``ROOT_URLCONF`` definido en
``settings``. Esta es la variable que define el mapeo entre las URLs y el código
que manejan esas URLs.

El sistema de plantillas
========================

Las vistas son las encargadas de retornar respuestas Web, entre estas respuestas
esta el codigo HTML que debe ser enviado al cliente o navegador, Django separar
el diseño de la página del código Python correspondiente a la logica de negocio
usando un *sistema de plantillas* para generar el HTML.

Una plantilla en Django es una cadena de texto que separar la presentación de un
documento de sus datos. Una plantilla define rellenos y diversos bits de lógica
básica (esto es, etiquetas de plantillas) que regulan como el documento debe ser
mostrado. Normalmente, las plantillas son usadas para producir HTML, pero las
plantillas de Django son igualmente capaces de generar cualquier formato basado
en texto.

Sistema básico de plantillas
=============================

Una plantilla de Django es una cadena de texto que pretende separar la
presentación de un documento de sus datos. Una plantilla define rellenos y
diversos bits de lógica básica (esto es, etiquetas de plantillas) que regulan
como el documento debe ser mostrado. Normalmente, las plantillas son usadas para
producir HTML, pero las plantillas de Django son igualmente capaces de generar
cualquier formato basado en texto.

A continuación se presenta una simple plantilla de ejemplo::

    <html>
    <head><title>Ordering notice</title></head>

    <body>

    <p>Dear {{ person_name }},</p>

    <p>Thanks for placing an order from {{ company }}. It's scheduled to
    ship on {{ ship_date|date:"F j, Y" }}.</p>

    <p>Here are the items you've ordered:</p>

    <ul>
    {% for item in item_list %}
    <li>{{ item }}</li>
    {% endfor %}
    </ul>

    {% if ordered_warranty %}
    <p>Your warranty information will be included in the packaging.</p>
    {% endif %}

    <p>Sincerely,<br />{{ company }}</p>

    </body>
    </html>

Esta plantilla es un HTML básico con algunas variables y etiquetas de plantillas
agregadas.

    * Cualquier texto encerrado por un par de llaves es una *variable*.
        Esto significa "insertar el valor de la variable con el nombre tomado".

    * Cualquier texto que esté rodeado por llaves y signos de porcentaje
        es una *etiqueta de plantilla*. Una etiqueta le indica al sistema
        de plantilla que debe hacer algo.

        Este ejemplo de plantilla contiene dos etiquetas: la etiqueta
        ``{% for item in item_list %}`` (una etiqueta ``for``) y la etiqueta
        ``{% if ordered_warranty %}`` (una etiqueta ``if``).

        Una etiqueta ``for`` actúa como un simple constructor de bucle.
        Una etiqueta ``if`` actúa como una cláusula lógica "if".

    * Finalmente, el segundo párrafo de esta plantilla tiene un ejemplo de un
        *filtro*, con el cual se alteran la exposición de una variable.

Cada plantilla de Django tiene acceso a varias etiquetas y filtros incorporados.

.. note:: quiza completar un poco

Estructura de una aplicación Django
===================================

Una aplicación es un paquete python que consta de un módulo models y un módulo
views, para crear una aplicacion se utiliza el comando **startapp** del modulo 
:ref:`manage <django-proyecto-manage>` de la siguiente manera:

.. code-block:: bash

    $ python manage.py startapp mi_aplicacion # Crea la aplicacion

El resultado de este comando genera la siguiente estructura en el proyecto::

    mi_proyecto/
        mi_aplicacion/
            __init__.py
            models.py
            views.py
        ...

Módulo models
-------------

Cada vez que se crea una aplicación, se genera un módulo models.py, en el cual
se le permite al programador definir modelos de objetos, que luego son
transformados en tablas relacionales [*]_.

Módulo views
------------

Cada aplicacion posee un módulo views, donde se definen las funcinoes que atienden
al cliente y son activadas gracias a el mapeo definido en el módulo urls del proyecto
o de la aplicación.

Las funciones que trabajan como vistas deben recibir como primer parámetro el request
y opcionalmente parámetros que pueden ser recuperados del mapeo de urls.

Dentro del módulo de urls

.. code-block:: python

    # Tras un mapeo como el sigunete
    (r'^persona/(?P<id_persona>\d)/$', mi_vista)
    # la vista se define como
    def mi_vista(request, id_persona):
        persona = Personas.objects.get(id = id_persona)
        datos = {'persona':persona, }
        return render_to_response('plantilla.html', datos)

.. [*] Mediante el comando syncdb del módulo manage del proyecto

.. tecnologias-servidor-django-static:

Contenido dinámico y estático en Django
=======================================

Django está orientado a la generación de *solo* contenido dinámico.
Pero generalmente se reuiqre en una aplicación web la inclusión de recursos
de tipo estático, como imágenes, javascript u hojas de estilo.

Django delega esta tarea al servidor web [DjangoDoc2009]_, sin embargo 
para desarrollo se prové un servidor de contenido estático.

La puesta en producción de una aplicación desarrollada en Django consta
de la configuración del servidor web en 2 aspectos:

 * Configuración del soporte para ejecución de Python
 	En la presente tesis nos focalizamos en WSGI ya que es un 
	estándard Pythonico, pero existen toros como mod_python para Apache.
	Independientemente de que tipo de soporte se utilize es necesario
	asegurarse que tanto Django, como así aplicaciones de terceros
	estén incluidas en el PythonPath con el cual se invoca al 
	script con el entry point de la aplicación.
	
 * Configuración de los medios estáticos.
 	Generalmente suele ser una ruta, o dos, pero no está limitado.


.. figure:: ../_svg/esquema_django_static.png

	Deployment de Django
	
		Una aplicación escrita en Django puesta en producción consta de contenido dinámico 
		manejado por WSGI y contenido estático servido por el web server.

.. [DjangoDoc2009] *Sirviendo archivos esáticos con Django*, Django Wiki, http://docs.djangoproject.com/en/dev/howto/static-files/#the-big-fat-disclaimer

El cliclo de una petición
=========================

Cada vez que un browser realiza una petición a un proyecto desarrollado en
django, la petición HTTP pasa por varias capas.

Inicialmente atraviesa los Middlewares, en la cual, el middleware de Request,
empaqueta las variables del request en una instancia de la calse Request.

Luego de atravesar los middlewares de request, mediante las definciones de URLs, 
se selecciona la vista a ser ejecutada.

.. algo de vista hay tambien en la parte de mapeo de url ver como hacer
Una vista es una función que recibe como primer argumento el request y
opcionalmente una serie de parámetros que puede recuperar de la propia URL.

Dentro de la vista se suelen hacer llamadas al ORM, para realizar consultas sobre
la base de datos. Una vez que la vista a completado la lógica, genera un mapeo que es
transferido a la capa de templates.

El template rellena sus comodines en función de los valores del mapeo que le entrega
la vista. Un template puede poseer lógica muy básica (bifurcaciones, bucles de repetición, 
formateo de datos, etc).

El template se entrega como un HttpResponse. La responsabilidad de la vista es entregar
una instancia de esta clase.

.. figure:: ../_svg/esquema_django.png
	
	Proceso de un request

.. _django-orm:

Interactuar con una base de datos
=================================

Django incluye una manera fácil pero poderosa de realizar consultas a bases de
datos utilizando Python.

Una ves configurada la conexión a la base de datos en el módulo de configuración
:ref:`settings <django-proyecto-settings>` se esta condiciones de comenzar
a usar la capa del sistema de Mapeo Objeto-Relacional del framework.

Si bien existen pocas reglas estrictas sobre cómo desarrollar dentro de Django, 
existe un requisito respecto a la convención de la aplicación: "si se va a usar 
la capa de base de datos de Django (modelos), se debe crear una aplicación de 
Django. Los modelos deben vivir dentro de una aplicaciones". Para crear una
aplicación se debe proceder con el procedimiento ya mencionado en :ref:`manage <django-proyecto-manage>`.

.. _django-orm-modelos:

Modelos
=======

Un modelo de Django es una descripción de los datos en la base de datos,
representada como código de Python.

Esta es la capa de datos -- lo equivalente a sentencias SQL -- excepto que están
en Python en vez de SQL, e incluye más que sólo definición de columnas de la
base de datos. Django usa un modelo para ejecutar código SQL detrás de las
escenas y retornar estructuras de datos convenientes en Python representando las
filas de las tablas base de datos. Django también usa modelos para representar
conceptos de alto nivel que no necesariamente pueden ser manejados por SQL.

Django define los modelos en Python por varias razones: 
    
    * La introspección requiere **overhead** y es imperfecta. Django necesita
        conocer la capa de la base de datos para porveer una buena API de
        consultas y hay dos formas de lograr esto. Una opción sería la 
        introspección de la base de datos en tiempo de ejecución, la segunda y
        adoptada por Django es describir explícitamente los datos en Python.
    
    * Escribir Python es divertido, y dejar todo en Python limita el número de
        veces que el cerebro tiene que realizar un "cambio de contexto".
    
    * El codigo que describe a los modelos se puede dejar fácilmente bajo un
        control de versiones.
    
    * SQL permite sólo un cierto nivel de metadatos y tipos de datos basicos, 
        mientras que un modelo puede contener tipos de datos especializado. La
        ventaja de un tipo de datos de alto nivel es la alta productividad 
        y la reusabilidad de código.
    
    * SQL es inconsistente a través de distintas plataformas.

Una contra de esta aproximación, sin embargo, es que es posible que el código
Python quede fuera de sincronía respecto a lo que hay actualmente en la base. Si
se hacen cambios en un modelo Django, se necesitara hacer los mismos cambios dentro
de la base de datos para mantenerla consistente con el modelo.

Finalmente, Django incluye una utilidad que puede generar modelos haciendo
introspección sobre una base de datos existente. Esto es útil para comenzar
a trabajar rápidamente sobre datos heredados.

Este modelo de ejemplo define una ``Persona`` que encapsula los datos
correspondientes al ``nombre`` y el ``apellido``.

.. code-block:: python

    from django.db import models

    class Persona(models.Model):
        nombre = models.CharField(max_length = 30)
        apellido = models.CharField(max_length = 30)

``nombre`` y ``apellido`` son atributos de clase

.. code-block:: sql

    CREATE TABLE miapp_persona (
        "id" serial NOT NULL PRIMARY KEY,
        "nombre" varchar(30) NOT NULL,
        "apellido" varchar(30) NOT NULL
    );

En el ejemplo presentado se observa que un modelo es una clase Python que hereda
de ``django.db.models.Model`` y cada atributo representa un campo requerido por
el módelo de datos de la aplicación.
Con esta informacion Django genera automaticamente la :term:`API` de acceso a
los datos en la base. 

Usando la API
-------------

Luego de crear los modelos y sincronizar la base de datos :ref:`<django-comandos-syncdb>` 
generando de esta manera el SQL correspondiente, se esta en condiciones de usar 
la API de alto nivel en Python que Django provee para accesar los datos::

    >>> from models import Persona
    >>> p1 = Persona(nombre='Pablo', apellido='Perez')
    >>> p1.save()
    >>> personas = Persona.objects.all()

En estas lineas se ven algunos detalles de la interaccion con los modelos:

    * Para crear un objeto, se importa la clase del modelo apropiada y se crea
        una instancia pasándole valores para cada campo.

    * Para guardar el objeto en la base de datos, se usa el método ``save()``.

    * Para recuperar objetos de la base de datos, se usa ``Persona.objects``.

Internamente Django traduce todas las invocaciones que afecten a los datos en
secuencias ``INSERT``, ``UPDATE``, ``DELETE`` de SQL

Django provee tambien una forma de seleccionar, filtrar y obtener datos de la 
base a traves de los administradores de consultas representado en el ejemplo
anterior por ``Persona.objects``.

.. _django_managers:

Administradores de consultas
----------------------------

Los managers o administradores de consultas son los objetos que representan la
interfase de comunicacion con la base de datos. Cada modelo tiene por lo menos
un administrador para acceder a los datos almacenados.
Cada entidad presente en el modelo, tiene al menos un *Manager*. Este *Manager*
encapsula en una semántica de objetos las opreaciones de consulta (*query*) de
la base de datos [*]_ . Un *Manager* consiste en una instancia de la clase
*django.db.models.manager.Manager* donde se definen, entre otros métodos,
*all()*, *filter()*, *exclude()* y *get()*.

Cada uno de éstos métodos genera como resultado una instancia de la calse
*QuerySet*. Un *QuerySet* envuelve el "resultado" de una consulta a la base
de datos. Se dice que envuelven el "resultado" porque la estrategia de acceso a
la base de datos es *evaluación retardada* [*]_, es decir, que la consulta que
representa el *QuerySet* no será evaluada hasta que no sea necesario acceder a
los resultados.

.. [*] En el lenguaje SQL, las consultas se realizan miediante la sentecia SELECT.
.. [*] También conocida como *Lazy Evaluation*

Un *QuerySet*, además de presentar la posibilidad de ser iterado, para recuperar
los datos, también posee una colección de métodos orientados a conuslta, como
*all()*, *filter()*, *exclude()* y *get()*. Cada uno de estos métodos, al
igual que en un mánager, devuelven instancias de *QuerySet* como resultado.
Gracias a esta característica recursiva, se pueden generar consultas
medinate encadenamiento.

Formularios
===========

El elemento de entrada tradicional de las aplicaciones web son los formularios.
En un sistema de infrmación, las operaciones CRUD son muy comunes, y la forma de.


El ciclo de trabajo normal para la entrada de datos suele ser:
	1. El usuario carga una página en la cual existe un formulario
	2. El usuario completa los campos del formulario (pueden existir campos opcionales)
	3. El usuario envía el formulario, utilizando típicamente un botón, el navegador
	   se encarga de codificar los datos y enviarlos a la URL indicada en el campo
	   "action" del :ref:markup del formulario.
	4. El servidor recibe los datos y evalúa cual es el método HTTP utilizado,
	   si el método es "POST", valida los datos. Si la validación es incorrecta
	   devuelve al usuario el formulario con los datos que hallan sido válidos, 
	   y muestra los mensajes pertinentes de los errores que hallan podido ocurrir,
	   volviendo al paso 2.
	   Si los datos son correctos, generalmente se envía una respuesta 300 indicando 
	   que la carga ha sido existosa.

La validación de los formularios puede ser una tarea compleja.
Django provee un mecanismo para generar formularios en el módulo *django.forms*.
En django, un formulario es una entidad que posee un conjunto de campos. Cada campo
a su vez conoce un *widget*.
Al momento de la validación, cada campo valida sus datos. Una vez que cada campo
ha sido validado,  
	
	
.. figure:: ../_svg/esquema_django_forms.png

	Estructura de objetos de los formularios en Django


Clasificación de aplicaciones Django
====================================

.. note::
	Mejorar esto
	
	
	
Podemos hacer una clasificación entre los tipos de aplicaciones en función de su objetivo:

 * Las aplicaciones de usuario
 	Son aquellas aplicaciones que resuelven un problema específico. Suelen
estar 
	dispuestas en un subdirectorio del proyecto.
 	
 * Las aplicaciones de soporte
 	Las aplicaciones de soporte son las aplicaciones que resuelven un problema
general,
 	como autenticación, envío de correo, interacción con servicos provistos por
sitios
 	de terceros (Google Maps, Google Charts, AdSense, Yahoo Maps, Yahoo Pipes,
Feedburner, etc.),
 	etc. Django provee varias aplicaciones que están disponibles por defecto
ante la 
 	creación de un proyecto con el comando *create-app*.
 	
 * Aplicaciones template
 	Esta caracterización se puede aplicar tanto a proyectos como a aplicaciones
y consite
 	en una aplicación distribuida como plantilla para lograr una aplicación de
usuario, pero
 	que tiene varios factores engorrosos resueltos. Podemos citar en este caso,
a el proyecto
 	*Pinax* [*]_ que provee un conjunto de aplicaciones de soporte y
aplicaciones de template.
 	
 .. [*] *Pinax Project* http://pinaxproject.com/