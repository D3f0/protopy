=========================
Tecnologías del servidor
=========================

CGI
===

CGI es bla 

WSGI
====

WSGI es CGI para Python.

Lenguajes interpreteados
========================

Python es un lengauje interpretado.


Frameworks web
==============

Un framework web es una cosa loca.


Django
======

`Django <http://www.djangoproject.com>`_ es un framework web escrito en
Python el cual sigue vagamente el concepto de Modelo Vista Controlador.
Ideado inicialmente como un adminsitrador de contenido para varios
sitios de noticias, los desarrolladores encontraron que su CMS era lo 
sufcientemente genérico como para curbir un ámbito más aplio de aplicaciones.

En honor al músico Django Reinhart, fue liberado el código base bajo la licencia 
:term:`BSD` en Julio del 2005 como Django Web Framework. El slogan del framework
fue "Django, Él framework para perfeccionistas con fechas límites" [*]_.

.. [*] Del ingles "The Web framework for perfectionists with deadlines"

En junio del 2008 fue anuncidada la cereación de la Django Software Fundation,
la cual se hace cargo hasta la fecha del desarrollo y mantenimiento.

Los orígenes de Django en la administración de páginas de noticias son evidentes
en su diseño, ya que proporciona una serie de características que facilitan el
desarrollo rápido de páginas orientadas a contenidos. 
Por ejemplo, en lugar de requerir que los desarrolladores escriban controladores 
y vistas para las áreas de administración de la página, Django proporciona una aplicación incorporada
para administrar los contenidos que puede incluirse como parte de cualquier
proyecto; la aplicación administrativa permite la creación, actualización y 
eliminación de objetos de contenido, llevando un registro de todas las acciones 
realizadas sobre cada uno (sistema de logging o bitácora), y proporciona una
interfaz para administrar los usuarios y los grupos de usuarios (incluyendo una
asignación detallada de permisos).

Con Django también se distribuyen aplicaciones que proporcionan un sistema de 
comentarios, herramientas para sindicar contenido via RSS y/o Atom, 
"páginas planas" que permiten gestionar páginas de contenido sin
necesidad de escribir controladores o vistas para esas páginas, y un sistema de
redirección de URLs.

Django como framework de desarrollo consiste en un  conjunto de utilidades 
de consola que permiten crear y manipular proyectos y aplicaciones.


Estructuración de un proyecto en Django
---------------------------------------

El framework parte de la base que un proyecto está compuesto por un conjunto de aplicaciones.
Un proyecto es un paquete que contiene 3 archivos:

 * manage.py
 * urls.py
 * settings.py
 
Cuando django se encuentra instalado, existe un comando llamado django-admin.py en el PATH 
del sistema. Mediante este comando se pueden crear proyectos:

.. code-block:: bash
	
	$ django-admin.py startproject mi_proyecto # Crea el proyecto mi_proyecto

El proyecto funciona como un contenedor de aplicaciones que ser rigen bajo
la misma base de datos, los mismos templates y las mismas clases de middleware.

Una aplicación es un paquete que contiene al menos los módulos:

 * models.py
 * views.py
 
y generalmente suele agregarse un módulo:

 * urls.py

Para crear una aplicación, se puede bien utilizar el comando django-admin.py en la carpeta
del proyecto, o el módulo manage.py que se explica más abajo.

.. code-block:: bash
	
	$ django-admin.py startapp mi_app # Crear una aplicacion


Módulo settings
~~~~~~~~~~~~~~~
Este módulo define la configuración del proyecto, siendo sus atributos principales
la configuración de la base de datos a utilizar, la ruta en la cual se encuentran
los médios estáticos, cuál es el nombre del archivo raíz de urls (generalmente urls.py).
Otros atributos son las clases middleware, las rutas de los templates, el idioma para
las aplicaciones que soportan :ref:`i18n`, etc.

Al ser un módulo del lengauje python, la confguración se puede editar muy facilmente
a diferencia de configuraciones realizadas en XML, además de contar con la ventaja de 
poder configurar en caliente algunos parametros que así lo requieran.

Un parametro fundamental es la lista denominada INSTALLED_APPS que contiene los nombres
de las aplicaciones instaladas en le proyecto.
 
Módulo manage
~~~~~~~~~~~~~

Esta es la interfase con el framework. Este módulo permite crear aplicaciones,
generar el SQL necesario para crear en la base de datos las tablas fruto de la 
escritura de los modelos, testear que los modelos de una aplicación estén bien
definidos (validación),
iniciar el servidor de desarrollo, crear volcados de la base de datos y
restaurarlos
restaurarlos (\emph{fixtures}, utilizados en casos de pruebas y para precarga
de datos conocidos).

Por ejemplo, para generar en la base de datos a patir de las aplicaciones inestaladas
se ejecuta el siguiente comando:

.. code-block:: bash

	manage.py syncdb # Generar las tablas
	

Módulo urls
~~~~~~~~~~~

Este nombre de módulo aparece a nivel proyecto, pero también puede aparecer a nivel
aplicación. Su misión es definir las asociaciones entre URLs y vistas, de manera de 
que el framework sepa que vista utilizar en función de la URL que está requiriendo
el clinete.
Las URLs se ecriben mediante expresiones regulares. Se suele aprovechar la posibilidad
del modulo de expresiones regulares del lenguaje python, que permite recuperar
gurpos nombrados (en contraposición al enfoque ordinal tradicional).

La asociación url-vistas se define en el módulo bajo el nombre :term:`urlpatterns`. 
También es posible derivar el tratado de una parte de la expresión reuglar
a otro módulo de urls. Generalmente esto ocurre cuando se desea delegar el tratado
de las urls a una aplicación particular.
	
	Ej:
		Derivar el tratado de todo lo que comience con la cadena personas a 
		al módulo de urls de la aplicación personas.
		
		.. code-block:: python
			
			(r'^personas', include('mi_proyecto.personas.urls'))
 
Módulo models
~~~~~~~~~~~~~

Cada vez que se crea una aplicación, se genera un módulo models.py, en el cual
se le permite al programador definir modelos de objetos, que luego son
transformados en tablas relacionales [*]_.


.. [*] Mediante el comando syncdb del módulo manage del proyecto

El cliclo de una petición
~~~~~~~~~~~~~~~~~~~~~~~~~
 

	
..	\begin{figure}[htp]
	\centering
	\includegraphics[scale=0.60]{img/django_simple_mtv.pdf}
	\caption{Estruccura báisca de Django}\label{fig:erptsqfit}
	\end{figure}
	  
	
	%  Dentro de estas utilidades encontramos 
	% un servidor standalone de desarrollo para probar los proyectos, creación de 
	% tablas a partir de los modelos del mapeador objeto-relacional, realizar 
	% volcado y carga de datos (\emph{fixtures}), ejecución de pruebas basadas 
	% en test de unidad, entre otras.
	
	\subsubsection*{Módulo urls.py}
	  Este módulo define las asociacines entre las URL y las funciones (vistas) que
	las
	atienden. Para generar código más modular, django permite delegar urls que
	cumplan
	con cierto patrón a un otro módulo. Típicamente este módulo se llama también
	urls y 
	es parte de una aplicación (Ej: tratar todo lo lo que comience con
	\textbf{/clientes/} con el módulo
	\textbf{mi\_proyecto.mi\_aplicacion.urls}).
	
	
	
	\subsection*{Elementos de una aplicación Django}
	
	Una aplicación consiste en 2 módulos fundamentales.
	\subsubsection*{Módulo models.py}
	En este módulo se definien los modelos.
	
	\subsubsection*{Módulo views.py}
	En este módulo se definen las viastas. Una vista es una función que recibe como
	primer
	argumento un objeto HttpRequest\footnote{
	\href{
	http://docs.djangoproject.com/en/dev/ref/request-response/\#httprequest-objects}
	{Documentación oficial sobre HttpRequest en djangoproject.com}}, el cual
	encapsula la información preveniente del request, 
	como el método (GET, POST), los elementos de la query http.
	\begin{figure}[htp]
	\centering
	\includegraphics[scale=0.40]{img/django_strucure.pdf}
	\caption{Esquema de flujo de una aplicación Django}\label{fig:erptsqfit}
	\end{figure}
	

El mapeador Objeto-Relacional de Django
=======================================

Diego
