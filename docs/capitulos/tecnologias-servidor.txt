Tecnologías del servidor
########################

CGI
***

CGI es bla 

WSGI
****

WSGI es CGI para Python.

Lenguajes interpreteados
************************
PHP
Ruby
Python

Python es un lengauje interpretado.


Frameworks
**********

Model View Controler
--------------------

Mapeador Objeto-Relacional
--------------------------

.. por poner algo, pueden ser otros
Rails

Symfony

.. Django CLI

Django
******

Acá tenemos que justificar por que django

`Django <http://www.djangoproject.com>`_ es un framework web escrito en
Python el cual sigue vagamente el concepto de Modelo Vista Controlador.
Ideado inicialmente como un adminsitrador de contenido para varios
sitios de noticias, los desarrolladores encontraron que su CMS era lo 
sufcientemente genérico como para curbir un ámbito más aplio de aplicaciones.

En honor al músico Django Reinhart, fue liberado el código base bajo la licencia 
:term:`BSD` en Julio del 2005 como Django Web Framework. El slogan del framework
fue "Django, Él framework para perfeccionistas con fechas límites" [*]_.

.. [*] Del ingles "The Web framework for perfectionists with deadlines"

En junio del 2008 fue anuncidada la cereación de la Django Software Fundation,
la cual se hace cargo hasta la fecha del desarrollo y mantenimiento.

Los orígenes de Django en la administración de páginas de noticias son evidentes
en su diseño, ya que proporciona una serie de características que facilitan el
desarrollo rápido de páginas orientadas a contenidos. 
Por ejemplo, en lugar de requerir que los desarrolladores escriban controladores 
y vistas para las áreas de administración de la página, Django proporciona una aplicación incorporada
para administrar los contenidos que puede incluirse como parte de cualquier
proyecto; la aplicación administrativa permite la creación, actualización y 
eliminación de objetos de contenido, llevando un registro de todas las acciones 
realizadas sobre cada uno (sistema de logging o bitácora), y proporciona una
interfaz para administrar los usuarios y los grupos de usuarios (incluyendo una
asignación detallada de permisos).

Con Django también se distribuyen aplicaciones que proporcionan un sistema de 
comentarios, herramientas para sindicar contenido via RSS y/o Atom, 
"páginas planas" que permiten gestionar páginas de contenido sin
necesidad de escribir controladores o vistas para esas páginas, y un sistema de
redirección de URLs.

Django como framework de desarrollo consiste en un  conjunto de utilidades 
de consola que permiten crear y manipular proyectos y aplicaciones.


Estructuración de un proyecto en Django
---------------------------------------

Durante la instalación del framework en el sistema del desarrollador, se añade al
PATH un comando con el nombre django-admin.py. Mediante este comando se crean proyectos
y se los administra.


Un proyecto se crea mediante la siguiente orden:


.. code-block:: bash
    
    $ django-admin.py startproject mi_proyecto # Crea el proyecto mi_proyecto


**Un proyecto es un paquete Python que contiene 3 módulos**:

 * manage.py
 	Interfase de consola para la ejecución de comandos
 * urls.py
 	Mapeo de URLs en vistas (funciones)
 * settings.py
 	Configuración de la base de datos, directorios de plantillas, etc.
 
En el ejemplo anterior, un listado gerárquico del sistema de archivos 
mostraría la siguiente estructura::

    mi_proyecto
    |-- __init__.py
    |-- manage.py
    |-- settings.py
    `-- urls.py

El proyecto funciona como un contenedor de aplicaciones que ser rigen bajo
la misma base de datos, los mismos templates, las mismas clases de middleware entre 
otros parámetros.

Analicemos a continuación la función de cada uno de estos 3 módulos.
	

Módulo settings
~~~~~~~~~~~~~~~
Este módulo define la configuración del proyecto, siendo sus atributos principales
la configuración de la base de datos a utilizar, la ruta en la cual se encuentran
los médios estáticos, cuál es el nombre del archivo raíz de urls (generalmente urls.py).
Otros atributos son las clases middleware, las rutas de los templates, el idioma para
las aplicaciones que soportan :ref:`i18n`, etc.

.. Subir como ventaja

Al ser un módulo del lengauje python, la confguración se puede editar muy facilmente
a diferencia de configuraciones realizadas en XML, además de contar con la ventaja de 
poder configurar en caliente algunos parametros que así lo requieran.

Un parametro fundamental es la lista denominada INSTALLED_APPS que contiene los nombres
de las aplicaciones instaladas en le proyecto.
 
Módulo manage
~~~~~~~~~~~~~

Esta es la interfase con el framework. Éste módulo es un script ejecutable, que
recibe como primer argumento un nombre de comando de django.

Los comandos de django pemiten, permiten entre otras cosas:

	* startapp <nombre de aplicación>
		Crear una aplicación
	
	* runserver
		Correr el proyecto en un servidor de desarrollo.
	
	* syncdb
		Generar las tablas en la base de datos de las aplicaciones instaladas
		 
El resultado de el comando **startapp** en el ejemplo anterior genera el siguiente
resultado::

	mi_proyecto
	|-- mi_aplicacion
	|   |-- __init__.py
	|   |-- models.py
	|   |-- tests.py
	|   `-- views.py
	|-- __init__.py
	|-- manage.py
	|-- settings.py
	`-- urls.py

Módulo urls
~~~~~~~~~~~

Este nombre de módulo aparece a nivel proyecto, pero también puede aparecer a nivel
aplicación. Su misión es definir las asociaciones entre URLs y vistas, de manera de 
que el framework sepa que vista utilizar en función de la URL que está requiriendo
el clinete.
Las URLs se ecriben mediante expresiones regulares. Se suele aprovechar la posibilidad
del modulo de expresiones regulares del lenguaje python, que permite recuperar
gurpos nombrados (en contraposición al enfoque ordinal tradicional).

La asociación url-vistas se define en el módulo bajo el nombre :term:`urlpatterns`. 
También es posible derivar el tratado de una parte de la expresión reuglar
a otro módulo de urls. Generalmente esto ocurre cuando se desea delegar el tratado
de las urls a una aplicación particular.

    Ej:
        Derivar el tratado de todo lo que comience con la cadena personas a 
        al módulo de urls de la aplicación personas.
    
        .. code-block:: python
        
            (r'^personas', include('mi_proyecto.personas.urls'))

Estructura de una aplicación Django
-----------------------------------

Una aplicación es un paquete python que consta de un módulo models y un módulo views.

 
Módulo models
~~~~~~~~~~~~~

Cada vez que se crea una aplicación, se genera un módulo models.py, en el cual
se le permite al programador definir modelos de objetos, que luego son
transformados en tablas relacionales [*]_.

Módulo views
~~~~~~~~~~~~~

Cada aplicacion posee un módulo views, donde se definen las funcinoes que atienden
al cliente y son activadas gracias a el mapeo definido en el módulo urls del proyecto
o de la aplicación.

Las funciones que trabajan como vistas deben recibir como primer parámetro el request
y opcionalmente parámetros que pueden ser recuperados del mapeo de urls.

Dentro del módulo de urls

.. code-block:: python

    # Tras un mapeo como el sigunete
    (r'^persona/(?P<id_persona>\d)/$', mi_vista)
    # la vista se define como
    def mi_vista(request, id_persona):
        persona = Personas.objects.get(id = id_persona)
        datos = {'persona':persona, }
        return render_to_response('plantilla.html', datos)



.. [*] Mediante el comando syncdb del módulo manage del proyecto

El cliclo de una petición
~~~~~~~~~~~~~~~~~~~~~~~~~
 
Cada vez que un browser realiza una petición a un proyecto desarrollado en django, 
la petición HTTP pasa por varias capas.

Inicialmente atraviesa los Middlewares, en la cual, el middleware de Request, empaqueta
las variables del request en una instancia de la calse Request.

Luego de atravesar los middlewares de request, mediante las definciones de URLs, 
se selecciona la vista a ser ejecutada.

Una vista es una función que recibe como primer argumento el request y opcionalmente 
una serie de parámetros que puede recuperar de la propia URL.

Dentro de la vista se suelen hacer llamadas al ORM, para realizar consultas sobre
la base de datos. Una vez que la vista a completado la lógica, genera un mapeo que es
transferido a la capa de templates.

El template rellena sus comodines en función de los valores del mapeo que le entrega
la vista. Un template puede poseer lógica muy básica (bifurcaciones, bucles de repetición, 
formateo de datos, etc).

El template se entrega como un HttpResponse. La responsabilidad de la vista es entregar
una instancia de esta clase.

.. image:: ../_static/get_response.png
	:height: 200
	:width: 200

El Mapeador Objeto-Relacional de Django
=======================================

Modelos
-------
Los modelos son la fuente de información sobre los datos de la aplicacion. Esencialmente
estan compuestos de campos y comportamiento propio de los datos almacenados. Generalmente,
un modelo se corresponde con una tabla en la base de datos.

Dentro de un proyecto los modelos se definen por aplicacion en el modulo models.py.

Un modelo es una clase Python que hereda de ``django.db.models.Model`` y cada atributo representa
un campo requerido por el modelo de datos de la aplicación.
Con esta informacion Django genera automaticamente una :term:`API` de acceso a los datos en la base. 

Este modelo de ejemplo define una ``Persona`` que encapsula los datos correspondientes al ``nombre`` y el ``apellido``.

.. code-block:: python

    from django.db import models

    class Persona(models.Model):
        nombre = models.CharField(max_length = 30)
        apellido = models.CharField(max_length = 30)

``nombre`` y ``apellido`` son atributos de clase

.. code-block:: sql

    CREATE TABLE miapp_persona (
        "id" serial NOT NULL PRIMARY KEY,
        "nombre" varchar(30) NOT NULL,
        "apellido" varchar(30) NOT NULL
    );

Consultas
---------
bala

Administradores de consultas
----------------------------
Estos objetos representan la interfase de comunicacion con la base de datos. Cada modelo tiene por lo menos un
administrador para acceder a los datos almacenados.