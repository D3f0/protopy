.. _servidor:

########################
Tecnologías del servidor
########################

****************************
De lo estatico a lo dinámico
****************************

.. note:: algo de html quiza
.. note:: titulo en revisión


Servidor Web
============
Un servidor web, o *web server* es un software encargado de recibir solicitudes
de un cliente, típicamente un :ref:`navegador web <navegador-web>`, a través del protcolo :term:`HTTP` y 
generar una respuesta a la solicitud.
Mediante la especificación :term:`MIME` que se incluye en el encabezado
de la respuesta que es enviada al cliente, se puede identificar que tipo
de archivo es devuelto, siendo el tipo más común :term:`HTML` o :term:`XHTML`. 

El contenido que es enviado al cliente puede ser de origen *estático* o *dinámico*.


.. _conteido-estatico:

El contendio estático es aquél que proviene desde un archivo en el sistema de archivos sin ninguna modificación. 

.. _conteido-dinamico:

El contenido dinámico en contraposición al :ref:`contenido estático <conteido-estatico>` es generado por algún programa, un :term:`script` o algún tipo de API invocada por el web server, como SSI, :ref:`CGI <servidor-cgi>`, SCGI, FastCGI, JSP, ColdFusion, NSAPI o ISAPI).

El clinete web accede a los recursos del web server mediante una dirección de recurso, u :term:`URL`.


.. _servidor-cgi:

CGI
===

CGI, *Common Gateway Interface* [*]_ es un estándar de comunicación entre un servidor web
y una aplicación, que permite que un a través de un navegador, se invoque un programa
en el servidor y se recuperen resultados de éste.

CGI fue la primera estandarización de un mecanismo para generar contenido dinámico 
en la web.

En el estandar CGI, el servidor web intercambia datos con la aplicación medinate variables
de entorno y los flujos de entrada y salida.

Los parámetros HTTP (como la URL, el método (GET, POST, PUSH, etc.), nombre del servidor
puerto, etc.) e información sobre el servidor son trasferidos a la aplicación CGI como variables de 
entorno.

Si existiese un cuerpo en la petición HTTP, como por ejemplo, el contenido de un formulario, bajo
el método POST, la aplicación CGI accede a esta como entrada estandard.

El resultado de la ejecución de la aplicación CGI se escribe en la salida estándard, anteponiendo
las cabeceras HTTP respuesta, para que el servidor responda al clinete. En los encabezados
de respuesta, el tipo MIME determina como interpreta el clinete la respuesta. Es decir, la 
invocación de un CGI puede devolover diferentes tipos de contenido al clinete (html, imágenes, 
javascript, contenido multimedia, etc.)

Dentor de las varaibles de entorno, la Wikipedia [WikiCGI2009]_ menciona:

    * QUERY_STRING
        Es la cadena de entrada del CGI cuando se utiliza el método GET sustituyendo algunos símbolos especiales por otros. Cada elemento se envía como una pareja Variable=Valor. Si se utiliza el método POST esta variable de entorno está vacía.
    * CONTENT_TYPE
        Tipo MIME de los datos enviados al CGI mediante POST. Con GET está vacía. Un valor típico para esta variable es: Application/X-www-form-urlencoded.
    * CONTENT_LENGTH
        Longitud en bytes de los datos enviados al CGI utilizando el método POST. Con GET está vacía.
    * PATH_INFO
        Información adicional de la ruta (el "path") tal y como llega al servidor en el URL.
    * REQUEST_METHOD
        Nombre del método (GET o POST) utilizado para invocar al CGI.
    * SCRIPT_NAME
        Nombre del CGI invocado.
    * SERVER_PORT
        Puerto por el que el servidor recibe la conexión.
    * SERVER_PROTOCOL
        Nombre y versión del protocolo en uso. (Ej.: HTTP/1.0 o 1.1)

Variables de entorno que se intercambian de servidor a CGI:

    * SERVER_SOFTWARE
        Nombre y versión del software servidor de www.
    * SERVER_NAME
        Nombre del servidor.
    * GATEWAY_INTERFACE
        Nombre y versión de la interfaz de comunicación entre servidor y aplicaciones CGI/1.12

Debido a la popularidad de las aplicaciones CGI, los servidores web incluyen generalmente
un directorio llamado **cgi-bin** donde se albergan estas aplicaciones.

.. note:: Faltan referencias sobre la popularidad de los lenguajes

Históricamente las aplicaciones CGI han sido escritas en lenguajes interpretados, sinedo muy popular Perl y más recientemente el lenguaje PHP.


..  http://www.mi_dominio.com/cgi-bin/mi_programa.cgi?nombre=matias

.. Invocará a la aplicación del archivo mi_programa.cgi


.. Poner un gráfico aquí

.. [WikiCGI2009] *Interfaz de entrada común*, Wikipedia, 2009, último acceso Agosto 2009, http://es.wikipedia.org/wiki/Common_Gateway_Interface#Intercambio_de_informaci.C3.B3n:_Variables_de_entorno

.. [*] A veces traducido como pasarela común de acceso.

.. _servidor-lenguajes:

Lenguajes
=========

.. note:: Mejorar la introduccion pedorra a lenguajes


Existen en la actualidad diferentes lenguajes de programación para desarrollar
en la web, estos han surgido y evolucionado en virtud de las tendencias y
necesidades de las plataformas. En los inicios de Internet, la naturaleza
de los contenidos hacia que lenguajes estaicos como el HTML diera una buena
solucion a las necesidades de la Web. A medida que paso el tiempo, las
tecnologías fueron desarrollándose y surgieron nuevas necesidades de dinamismo
en la naturaleza de la web, permitiendo interactuar con usuarios y utilizar
sistemas de Bases de Datos.


PHP
---
Es un lenguaje de programación utilizado para la creación de sitio web. PHP es
un acrónimo recursivo que significa “PHP Hypertext Pre-processor”, (inicialmente
se llamó Personal Home Page). Surgió en 1995, desarrollado por PHP Group.

PHP es un lenguaje de script interpretado en el lado del servidor utilizado para
la generación de páginas web dinámicas, embebidas en páginas HTML y ejecutadas
en el servidor. PHP no necesita ser compilado para ejecutarse. Para su
funcionamiento necesita tener instalado Apache o IIS con las librerías de PHP.
La mayor parte de su sintaxis ha sido tomada de C, Java y Perl con algunas
características específicas. Los archivos cuentan con la extensión (php).

Sintaxis:

La sintaxis utilizada para incorporar código PHP es la siguiente:

.. code-block:: php

    <?
    $mensaje = “Hola”;
    echo $mensaje;
    ?>

También puede usarse:

.. code-block:: php

    <?php
    $mensaje = “Hola”;
    echo $mensaje;
    ?>

Ventajas:

    * Muy fácil de aprender.
    * Se caracteriza por ser un lenguaje muy rápido.
    * Soporta en cierta medida la orientación a objeto. Clases y herencia.
    * Es un lenguaje multiplataforma: Linux, Windows, entre otros.
    * Capacidad de conexión con la mayoría de los manejadores de base de datos.
    * Capacidad de expandir su potencial utilizando módulos.
    * Posee documentación en su página oficial la cual incluye descripción y
        ejemplos de cada una de sus funciones.
    * Es libre, por lo que se presenta como una alternativa de fácil acceso
        para todos.
    * Incluye gran cantidad de funciones.
    * No requiere definición de tipos de variables ni manejo detallado del
        bajo nivel.

Desventajas:

    * Se necesita instalar un servidor web.
    * Todo el trabajo lo realiza el servidor y no delega al cliente. Por tanto
        puede ser más ineficiente a medida que las solicitudes aumenten de
        número.
    * La legibilidad del código puede verse afectada al mezclar sentencias
        HTML y PHP.
    * La programación orientada a objetos es aún muy deficiente para
        aplicaciones grandes.
    * Dificulta la modularización.
    * Dificulta la organización por capas de la aplicación.

Seguridad:

PHP es un poderoso lenguaje e intérprete, ya sea incluido como parte de un
servidor web en forma de módulo o ejecutado como un binario CGI separado, es
capaz de acceder a archivos, ejecutar comandos y abrir conexiones de red en el
servidor. Estas propiedades hacen que cualquier cosa que sea ejecutada en un
servidor web sea insegura por naturaleza.

PHP está diseñado específicamente para ser un lenguaje más seguro para escribir
programas CGI que Perl o C, y con la selección correcta de opciones de
configuración en tiempos de compilación y ejecución, y siguiendo algunas
prácticas correctas de programación.

Ruby
----
Es un lenguaje interpretado de muy alto nivel y orientado a objetos.
Desarrollado en el 1993 por el programador japonés Yukihiro “Matz” Matsumoto.
Su sintaxis está inspirada en Phyton, Perl. Es distribuido bajo licencia de
software libre (Opensource).

Ruby es un lenguaje dinámico para una programación orientada a objetos rápida y
sencilla. Para los que deseen iniciarse en este lenguaje pueden encontrar un
tutorial interactivo de ruby. Se encuentra también a disposición de estos
usuarios un sitio con informaciones y cursos en español.

Sintaxis:

puts "hola"

Características:

    * Existe diferencia entre mayúsculas y minúsculas.
    * Múltiples expresiones por líneas, separadas por punto y coma “;”.
    * Dispone de manejo de excepciones.
    * Ruby puede cargar librerías de extensiones dinámicamente si el
        (Sistema Operativo) lo permite.
    * Portátil.

Ventajas:

    * Permite desarrollar soluciones a bajo Costo.
    * Software libre.
    * Multiplataforma.

Python
------
Es un lenguaje de programación creado en el año 1990 por Guido van Rossum, es
el sucesor del lenguaje de programación ABC. Python es comparado habitualmente
con Perl. Los usuarios lo consideran como un lenguaje más limpio para programar.
Permite la creación de todo tipo de programas incluyendo los sitios web.

Su código no necesita ser compilado, por lo que se llama que el código es
interpretado. Es un lenguaje de programación multiparadigma, lo cual fuerza a
que los programadores adopten por un estilo de programación particular:

    * Programación orientada a objetos.
    * Programación estructurada.
    * Programación funcional.
    * Programación orientada a aspectos.

Sintaxis:

Ejemplo de una clase en Phyton:

def dibujar_muneco(opcion):
    if opcion == 1:
        C.create_line(580, 150, 580, 320, width=4, fill="blue")
        C.create_oval(510, 150, 560, 200, width=2, fill='PeachPuff')

Ventajas:

    * Libre y fuente abierta.
    * Lenguaje de propósito general.
    * Gran cantidad de funciones y librerías.
    * Sencillo y rápido de programar.
    * Multiplataforma.
    * Licencia de código abierto (Opensource).
    * Orientado a Objetos.
    * Portable.

Desventajas:

    * Lentitud por ser un lenguaje interpretado.

.. mucho mas lenguajes en http://www.maestrosdelweb.com/principiantes/los-diferentes-lenguajes-de-programacion-para-la-web/

Python es un lengauje interpretado.

.. Escribir sobre el concepto de modulos y algo de programacion modular, ya que da soporte a protopy http://es.wikipedia.org/wiki/Programaci%C3%B3n_modular

.. _servidor-wsgi:

WSGI
----

WSGI o Web Server Gateway Interfase es una especidicación para que un web server y una aplicación
se comuniquen. Es un estándar del lenguaje Python, descrito en el PEP [*]_ 333. Si bien WSGI es
similar en su concepción a CGI, su objetivo es estandarizar la aparición de estructras de software
cada vez más complejas (frameworks :ref:`servidor-frameworks_ <framework>`)

.. [*] PEP *Python Enhancement Proposals* son documentos en los que se proponen mejoras para el lenguaje
Python, son albergados en el sitio oficial http://www.python.org

WSGI propone que una aplicación es una función que recibe 2 argumentos. Como primer argumento, un diccionario con las variables de entorno, al igual que en CGI, y como segundo argumento una función (u :ref:`objeto llamable <apendice_python_callables>` ) al cual se invoca para iniciar la respuesta.

.. image:: ../_svg/esquema_wsgi.png

En el siguente ejemplo, la función app devuelve *Hello World* informandole al navegador web, que el
contenido se trata de texto plano.

.. code-block:: python

    def app(environ, start_response):
        start_response('200 OK', [('Content-Type', 'text/plain')])
        return ['Hello World\n']

.. _servidor-orm:

**********************
Herramientas por favor
**********************

Mapeador Objeto-Relacional
==========================

En las aplicaciones modernas, la lógica arbitraria a menudo implica interactuar
con una base de datos. Detrás de escena, un *programa impulsado por una base de
datos* se conecta a un servidor de base de datos, recupera algunos datos de
esta, y los presenta al usuario con un formato agradable para su interpretacion.
Una aplicacion web no escapa a esta aseveración, solo que presenta los datos 
representados en HTML, así mismo un sitio puede proporcionar funcionalidad que
permita a los visitantes del sitio poblar la base de datos por su propia cuenta.

Amazon.com, por ejemplo, es un buen ejemplo de un sitio que maneja una base de
datos. Cada página de un producto es esencialmente una consulta a la base de
datos de productos de Amazon formateada en HTML, y cuando se envian datos al 
servidor, como opiniónes de cliente, estos son insertadados en la base de datos
de opiniones.

La forma simple de interactuar con una base de datos, es mediante el uso de
bibliotecas provistas por los lenguajes para ejecutar consultas SQL y una vez 
obtenidos los datos, procesarlos.

En este ejemplo se usa la biblioteca ``MySQLdb`` para conectar con una base de
datos MySQL, recuperar algunos registros::

    import MySQLdb

    db = MySQLdb.connect(user='me', db='mydb', passwd='secret', host='localhost')
    cursor = db.cursor()
    cursor.execute('SELECT name FROM books ORDER BY name')
    names = [row[0] for row in cursor.fetchall()]
    db.close()

Este enfoque funciona, pero presenta algunos problemas:

    * Los parametros de la conexión a la base de datos estan codificandos 
        *en duro* (*hard-coding*).

    * Se debe escribir una cantidad de código estereotípico: crear una
        conexión, un cursor, ejecutar una sentencia, y cerrar la conexión.

    * Ata a las aplicaciones a MySQL. Si, en el camino, se quiere cambiar MySQL
        por PostgreSQL por ejemplo, se deben alterar todas las lineas que hagan
        falta para la nueva biblioteca o conector, parámetros de conexión, 
        posiblemente reescribir el SQL, etc.

Por otro lado y quiza mas importante a la hora de desarrollar un programador que 
trabajé con programación orientada a objetos y bases de datos relacionales, debe
realizar un cambio de contexto cada vez que requiera interactuar con la base de
datos, escribiendo consultas en SQL y luego lidear con los resultados obtenidos
de las consultas entre los objetos. Este *cambio de contexto* es debido a una
diferencia que existe entre los dos paradigmas involucrados. Mientras que el
modelo relacional trata con relaciones, conjuntos y la logica matemática 
correspondiente, el paradigma orientado a objetos trata con objetos, atributos
 y asociaciones de unos con otros. Tan pronto como se quieran persistir los
objetos utilizando una base de datos relacional esta desaveniencia resulta
evidente. 

Las primeras aproximaciones al mapeo relacional de objetos, surgen de convertir
los valores de los objetos en grupos de valores simples para almacenarlos en la
base de datos (y volverlos a convertir luego de recuperarlos de la base de
datos). Sin embargo, esta traduccion simple dista mucho del concepto de *objetos 
persistentes*, la idea de estos es la traducción automatica de objetos en formas
almacenables en la base de datos y su posterior recuperación conservando las
propiedades y las relaciones ente los mismos.

Con la finalidad de lograr *objetos persistentes* un buen número de sistemas
de mapeo objeto-relacional se han desarrollado a lo largo de los años y aunque 
su efectividad es muy discutida la realidad es que estos permiten agilizar el
proceso de desarrollo, paleando mucho de los problemas presentados con
anterioridad.

Desde el punto de vista de un programador, un ORM debe lucir como un almacén
de objetos persistentes. Uno puede crear objetos y trabajar normalmente con
ellos, los cambios que sufran terminarán siendo reflejados en la base de datos.

.. http://es.wikipedia.org/wiki/Mapeo_objeto-relacional

.. _servidor-mvc:

Model View Controler
====================

En aplicaciones complejas que impliquen sofisticadas interfaces, como las
aplicaciones web, la lógica de la interfaz de usuario cambia con más frecuencia
que los almacenes de datos y la lógica de negocio. Si se realiza un diseño
mezclando los componentes de interfaz y de negocio, entonces las consecuencias
serán que, cuando se necesite cambiar la interfaz, se tendra que modificar
trabajosamente los componentes de negocio, teniendo de esta forma mayor trabajo
y mayor riesgo de error.

El patrón arquitectural MVC, *Modelo Vista Controlador* trata de realizar un
diseño que desacople la interfaz o vista del modelo, con la finalidad de mejorar
la reusabilidad. De esta forma las modificaciones en las vistas impactan en menor
medida en la lógica de negocio o de datos.

Este patrón fue descrito por primera vez en 1979 por Trygve Reenskaug [Tryg1979]_,
entonces trabajando en Smalltalk en laboratorios de investigación de Xerox.
La implementación original está descrita a fondo en Programación de Aplicaciones
en Smalltalk-80(TM): Como utilizar Modelo Vista Controlador [SmallMVC]_.

.. [Tryg1979] Trygve Reenskaug, http://heim.ifi.uio.no/~trygver/themes/mvc/mvc-index.html
.. [SmallMVC] Steve Burbeck, Ph.D. http://st-www.cs.illinois.edu/users/smarch/st-docs/mvc.html

Descripción del patrón:

    * Modelo
        Esta es la capa de datos, una representación de la información con la
        cual el sistema opera. La lógica de datos asegura la integridad y
        permite derivar nuevos datos.

    * Vista
        Esta es la capa de presentación del modelo, seleccionando qué mostrar y 
        cómo mostrarlo, usualmente la interfaz de usuario.

    * Controlador
        Esta capa responde a eventos, usualmente acciones del usuario, e invoca
        cambios en el modelo y probablemente en la vista.

El patrón MVC se ve frecuentemente en aplicaciones web, donde la vista es la
página HTML y el código que provee de datos dinámicos a la página. El modelo es
el sistema de gestión de base de datos y la lógica de negocio, y el controlador
es el responsable de recibir los eventos de entrada desde la vista.

.. _servidor-frameworks:

Frameworks
==========

.. Usamos la traducción redefinir para override
.. note:: Poner CLI

Según la la wikipedia [WIK001]_ un framework de software es *una abstracción en
la cual un código común, que provee una funcionalidad genérica, puede ser
personalizado por el programador de manera selectiva para brindar una
funcionalidad específica*.

.. [WIK001] *Software Framework*, Wikipedia, 2009, http://en.wikipedia.com/software_framework, última visita Agosto de 2009.

Además agrega que los frameworks son similares a las bibliotecas de software
(a veces llamadas librerías) dado que proveen abstracciones reusables de código
a las cuales se accede mediante una API bien definida. Sin embargo, existen
ciertas características que diferencian al framework de una librería o
aplicaciones normales de usuario:

    * Inversion de control
        Al contrario que las bibliotecas en las aplicaciones de usuario, en un
        framework, el flujo de control no es manejado por el llamador,
        sino por el framework. Es decir, cuando se utilizan bibliotecas o
        programas de usuario como soporte para brindar funcionalidad, estas son
        llamados o invocados en el código de aplicación principal que es
        definido por el usuario. En un framework, el flujo de control principal
        está definido por el framework.

    * Comportamiento por defecto definido
        Un framework tiene un comportamiento por defecto definido. En cada
        componete del framework, existe un comportamineto genérico con alguna
        utilidad, que puede ser redefinido con funcionalidad del usuario.

    * Extensibiliad
        Un framework suele ser extendido por el usuario mediante redefinición o
        especialización para proveer una funcionalidad específica. 

    * No modificabilidad del código del framework
        En general no se permite la modificación del código del framework. Los
        programadores pueden extender el framework, pero no modificar su código. 

Los diseñadores de frameworks tienen como objetivo facilitar el desarrollo de
software, permitiendo a los programadores enfocarse en cumplimentar los
requermientos del análisis y diseño, en vez de dedicar tiempo a resolver los
detalles comunes de bajo nivel. En general la utilización de un framework reduce
el tiempo de desarrollo.

Por ejemplo, en un equipo donde se utiliza un framework web para desarrollar un
sitio de banca electrónica, los desarrolladores pueden enfocarse en la lógica
necesaria para realizar las extraciones de dinero, en vez de la mecánica para
preserver el estado entre las peticiones del navegador.

.. Carga != Incertidumbre

Sin embargo, se suele argumentar que los frameworks pueden ser una carga,
debido a la complejidad de sus APIs o la incertidumbre que generar la existencia
de varios frameworks para un mismo tipo de aplicación. A pesar de tener como
objetivo estandarizar y reducir el tiempo de desarrollo, el aprendizaje de un
framework suele requerir tiempo extra en el desarrollo, que debe ser tenido en
cuenta por el quipo de desarrollo. Trás completar el desarrollo en un framework,
el equipo de desarrllo no debe volver a invertir tiempo en aprendizaje en
sucesivos desarrollos.

.. image:: ../_static/framework_esquema_flujo_control.png
    :width: 719px

Framework Web
-------------

.. note::

    Ver diferencia entre sitio y aplicación
    http://www.javahispano.org/contenidos/es/comparativa_de_frameworks_web/

Un framework web, es un framework de software que permite implementar aplicaciones web brindando
soporte para tareas comunes como.

En Wikipeida [WIKI002]_

    * Seguridad

    * Mapeo de URLs

    * Sistema de plantillas

    * Caché

    * AJAX

    * Configuración mínima y simplificada

.. [WIKI002] *Web Framework*, Wikipedia, 2009, http://en.wikipedia.org/wiki/Web_application_framework, última visita Agosto de 2009.

.. por poner algo, pueden ser otros
Symfony

Rails

.. _servidor-django:

******
Django
******

Acá tenemos que justificar por que django
Introducción
============

.. Acá tenemos que justificar por que django

`Django <http://www.djangoproject.com>`_ es un framework web escrito en Python
el cual sigue vagamente el concepto de Modelo Vista Controlador.
Ideado inicialmente como un adminsitrador de contenido para varios sitios de
noticias, los desarrolladores encontraron que su CMS era lo sufcientemente
genérico como para curbir un ámbito más aplio de aplicaciones.

En honor al músico Django Reinhart, fue liberado el código base bajo la licencia 
:term:`BSD` en Julio del 2005 como Django Web Framework. El slogan del framework
fue "Django, Él framework para perfeccionistas con fechas límites" [*]_.

.. [*] Del ingles "The Web framework for perfectionists with deadlines"

En junio del 2008 fue anuncidada la cereación de la Django Software Fundation,
la cual se hace cargo hasta la fecha del desarrollo y mantenimiento.

Los orígenes de Django en la administración de páginas de noticias son evidentes
en su diseño, ya que proporciona una serie de características que facilitan el
desarrollo rápido de páginas orientadas a contenidos. 
Por ejemplo, en lugar de requerir que los desarrolladores escriban controladores 
y vistas para las áreas de administración de la página, Django proporciona una
aplicación incorporada para administrar los contenidos que puede incluirse como
parte de cualquier proyecto; la aplicación administrativa permite la creación,
actualización y eliminación de objetos de contenido, llevando un registro de
todas las acciones realizadas sobre cada uno (sistema de logging o bitácora), y
proporciona una interfaz para administrar los usuarios y los grupos de usuarios
(incluyendo una asignación detallada de permisos).

Con Django también se distribuyen aplicaciones que proporcionan un sistema de 
comentarios, herramientas para sindicar contenido via RSS y/o Atom, "páginas
planas" que permiten gestionar páginas de contenido sin necesidad de escribir
controladores o vistas para esas páginas, y un sistema de redirección de URLs.

Django como framework de desarrollo consiste en un conjunto de utilidades de
consola que permiten crear y manipular proyectos y aplicaciones. Este sigue el
patrón MVC y como el controlador "C" es manejado por el mismo sistema los
desarrolladores dieron a conocer a Django como un *Framework MTV*.

    * *M* significa "Model" (Modelo), la capa de acceso a la base de datos. Esta
      capa contiene toda la información sobre los datos: cómo acceder a estos,
      cómo validarlos, cuál es el comportamiento que tiene, y las relaciones
      entre los datos.

    * *T* significa "Template" (Plantilla), la capa de presentación. Esta capa
      contiene las decisiones relacionadas a la presentación: como algunas cosas
      son mostradas sobre una página web o otro tipo de documento.

    * *V* significa "View" (Vista), la capa de la lógica de negocios. Esta capa
      contiene la lógica que accede al modelo y la delega a la plantilla
      apropiada: puedes pensar en esto como un puente entre el modelos y las
      plantillas.

MVC o MTV la realidad es que ninguna de las interpretaciones es más "correcta"
que otra. Lo importante es entender los conceptos subyacentes.

Estructuración de un proyecto en Django
=======================================

Durante la instalación del framework en el sistema del desarrollador, se añade
al PATH un comando con el nombre django-admin.py. Mediante este comando se crean
proyectos y se los administra.

Un proyecto se crea mediante la siguiente orden:

.. code-block:: bash

    $ django-admin.py startproject mi_proyecto # Crea el proyecto mi_proyecto

Un proyecto es un paquete Python que contiene 3 módulos:

    * manage.py
        Interfase de consola para la ejecución de comandos
    * urls.py
        Mapeo de URLs en vistas (funciones)
    * settings.py
        Configuración de la base de datos, directorios de plantillas, etc.
 
En el ejemplo anterior, un listado gerárquico del sistema de archivos 
mostraría la siguiente estructura::

    mi_proyecto/
        __init__.py
        manage.py
        settings.py
        urls.py

El proyecto funciona como un contenedor de aplicaciones que ser rigen bajo
la misma base de datos, los mismos templates, las mismas clases de middleware entre 
otros parámetros.

Analicemos a continuación la función de cada uno de estos 3 módulos.

.. _django-proyecto-settings:

Módulo settings
---------------

Este módulo define la configuración del proyecto, siendo sus atributos
principales la configuración de la base de datos a utilizar, la ruta en la cual
se encuentran los médios estáticos, cuál es el nombre del archivo raíz de urls
(generalmente urls.py).
Otros atributos son las clases middleware, las rutas de los templates, el idioma
para las aplicaciones que soportan :ref:`i18n`, etc.

.. Subir como ventaja
.. Poner algo mas sobre la base de datos

Al ser un módulo del lengauje python, la confguración se puede editar muy facilmente
a diferencia de configuraciones realizadas en XML, además de contar con la ventaja de 
poder configurar en caliente algunos parametros que así lo requieran.

Un parametro fundamental es la lista denominada INSTALLED_APPS que contiene los nombres
de las aplicaciones instaladas en le proyecto.

.. _django-proyecto-manage:

Módulo manage
-------------

Esta es la interfase con el framework. Éste módulo es un script ejecutable, que
recibe como primer argumento un nombre de comando de django.

Los comandos de django permiten entre otras cosas:

    * startapp <nombre de aplicación>
        Crear una aplicación

    * runserver
        Correr el proyecto en un servidor de desarrollo.

    * syncdb
        Generar las tablas en la base de datos de las aplicaciones instaladas

Módulo urls
-----------

Este nombre de módulo aparece a nivel proyecto, pero también puede aparecer a
nivel aplicación. Su misión es definir las asociaciones entre URLs y vistas, de
manera que el framework sepa que vista utilizar en función de la URL que está
requiriendo el clinete.
Las URLs se ecriben mediante expresiones regulares del lenguaje Python. Este 
sistema de URLs aprovecha muy bien el modulo de expreciones regulares del
lenguaje permitiendo por ejemplo recuperar gurpos nombrados (en contraposición
al enfoque ordinal tradicional).

La asociación url-vistas se define en el módulo bajo el nombre :term:`urlpatterns`. 
También es posible derivar el tratado de una parte de la expresión reuglar
a otro módulo de urls. Generalmente esto ocurre cuando se desea delegar el
tratado de las urls a una aplicación particular.

    Ej:
        Derivar el tratado de todo lo que comience con la cadena personas a 
        al módulo de urls de la aplicación personas.

        .. code-block:: python

            (r'^personas', include('mi_proyecto.personas.urls'))

Mapeando URLs a Vistas
======================

Con la estructura del proyecto así definida y las herramientas que provee Django,
es posible ya ver resultados en el navegador web corriendo el servidor de
desarrollo incluido en el framework para tal fin.

Es posible tambien en este momento definir algo de logica de negocios 
implementando vistas dentro del proyecto para dotar al sitio de algo de
funcionalidad dinamica. Una función vista, es una simple función de Python que
toma como argumento una petición Web y retorna una respuesta Web. En el momento
de procesar una peticion HTTP Django seleccionara y ejecutara la vista. Lo
importante de este punto es como decirle a Django que vista ejecutar ante
determinada url, es en este punto donde surgen las *URLconfs*.

La *URLconf* es como una tabla de contenido para el sitio web. Básicamente,
es un mapeo entre los patrones URL y las funciones de vista que deben
ser llamadas por esos patrones URL. Es como decirle a Django, "Para esta URL,
llama a este código, y para esta URL, llama a este otro código".

En el apartado de modulos del proyecto se observo el modulo sobre el cual el objeto
URLconf es creado automáticamente: el archivo ``urls.py``, este modulo tiene
como requisito indispensable la definicion de la variable ``urlpatterns``, 
la cual Django espera encontrar en el módulo ``ROOT_URLCONF`` definido en
``settings``. Esta es la variable que define el mapeo entre las URLs y el código
que manejan esas URLs.

El sistema de plantillas
========================

Las vistas son las encargadas de retornar respuestas Web, entre estas respuestas
esta el codigo HTML que debe ser enviado al cliente o navegador, Django separar
el diseño de la página del código Python correspondiente a la logica de negocio
usando un *sistema de plantillas* para generar el HTML.

.. note:: quiza completar un poco

Estructura de una aplicación Django
===================================

Una aplicación es un paquete python que consta de un módulo models y un módulo
views, para crear una aplicacion se utiliza el comando **startapp** del modulo 
:ref:`manage <django-proyecto-manage>` de la siguiente manera:

.. code-block:: bash

    $ python manage.py startapp mi_aplicacion # Crea la aplicacion

El resultado de este comando genera la siguiente estructura en el proyecto::

    mi_proyecto/
        mi_aplicacion/
            __init__.py
            models.py
            views.py
        ...

Módulo models
-------------

Cada vez que se crea una aplicación, se genera un módulo models.py, en el cual
se le permite al programador definir modelos de objetos, que luego son
transformados en tablas relacionales [*]_.

Módulo views
------------

Cada aplicacion posee un módulo views, donde se definen las funcinoes que atienden
al cliente y son activadas gracias a el mapeo definido en el módulo urls del proyecto
o de la aplicación.

Las funciones que trabajan como vistas deben recibir como primer parámetro el request
y opcionalmente parámetros que pueden ser recuperados del mapeo de urls.

Dentro del módulo de urls

.. code-block:: python

    # Tras un mapeo como el sigunete
    (r'^persona/(?P<id_persona>\d)/$', mi_vista)
    # la vista se define como
    def mi_vista(request, id_persona):
        persona = Personas.objects.get(id = id_persona)
        datos = {'persona':persona, }
        return render_to_response('plantilla.html', datos)

.. [*] Mediante el comando syncdb del módulo manage del proyecto

El cliclo de una petición
=========================

Cada vez que un browser realiza una petición a un proyecto desarrollado en
django, la petición HTTP pasa por varias capas.

Inicialmente atraviesa los Middlewares, en la cual, el middleware de Request,
empaqueta las variables del request en una instancia de la calse Request.

Luego de atravesar los middlewares de request, mediante las definciones de URLs, 
se selecciona la vista a ser ejecutada.

.. algo de vista hay tambien en la parte de mapeo de url ver como hacer
Una vista es una función que recibe como primer argumento el request y
opcionalmente una serie de parámetros que puede recuperar de la propia URL.

Dentro de la vista se suelen hacer llamadas al ORM, para realizar consultas sobre
la base de datos. Una vez que la vista a completado la lógica, genera un mapeo que es
transferido a la capa de templates.

El template rellena sus comodines en función de los valores del mapeo que le entrega
la vista. Un template puede poseer lógica muy básica (bifurcaciones, bucles de repetición, 
formateo de datos, etc).

El template se entrega como un HttpResponse. La responsabilidad de la vista es entregar
una instancia de esta clase.

.. image:: ../_static/get_response.png
    :height: 200
    :width: 200

.. _django-orm:

Interactuar con una base de datos
=================================

Django incluye una manera fácil pero poderosa de realizar consultas a bases de
datos utilizando Python.

Una ves configurada la conexión a la base de datos en el módulo de configuración
:ref:`settings <django-proyecto-settings>` se esta condiciones de comenzar
a usar la capa del sistema de Mapeo Objeto-Relacional del framework.

Si bien existen pocas reglas estrictas sobre cómo desarrollar dentro de Django, 
existe un requisito respecto a la convención de la aplicación: "si se va a usar 
la capa de base de datos de Django (modelos), se debe crear una aplicación de 
Django. Los modelos deben vivir dentro de una aplicaciones". Para crear una
aplicación se debe proceder con el procedimiento ya mencionado en :ref:`manage <django-proyecto-manage>`.

.. _django-orm-modelos:

Modelos
=======

Un modelo de Django es una descripción de los datos en la base de datos,
representada como código de Python.

Esta es la capa de datos -- lo equivalente a sentencias SQL -- excepto que están
en Python en vez de SQL, e incluye más que sólo definición de columnas de la
base de datos. Django usa un modelo para ejecutar código SQL detrás de las
escenas y retornar estructuras de datos convenientes en Python representando las
filas de las tablas base de datos. Django también usa modelos para representar
conceptos de alto nivel que no necesariamente pueden ser manejados por SQL.

Django define los modelos en Python por varias razones: 
    
    * La introspección requiere **overhead** y es imperfecta. Django necesita
        conocer la capa de la base de datos para porveer una buena API de
        consultas y hay dos formas de lograr esto. Una opción sería la 
        introspección de la base de datos en tiempo de ejecución, la segunda y
        adoptada por Django es describir explícitamente los datos en Python.
    
    * Escribir Python es divertido, y dejar todo en Python limita el número de
        veces que el cerebro tiene que realizar un "cambio de contexto".
    
    * El codigo que describe a los modelos se puede dejar fácilmente bajo un
        control de versiones.
    
    * SQL permite sólo un cierto nivel de metadatos y tipos de datos basicos, 
        mientras que un modelo puede contener tipos de datos especializado. La
        ventaja de un tipo de datos de alto nivel es la alta productividad 
        y la reusabilidad de código.
    
    * SQL es inconsistente a través de distintas plataformas.

Una contra de esta aproximación, sin embargo, es que es posible que el código
Python quede fuera de sincronía respecto a lo que hay actualmente en la base. Si
se hacen cambios en un modelo Django, se necesitara hacer los mismos cambios dentro
de la base de datos para mantenerla consistente con el modelo.

Finalmente, Django incluye una utilidad que puede generar modelos haciendo
introspección sobre una base de datos existente. Esto es útil para comenzar
a trabajar rápidamente sobre datos heredados.

Este modelo de ejemplo define una ``Persona`` que encapsula los datos
correspondientes al ``nombre`` y el ``apellido``.

.. code-block:: python

    from django.db import models

    class Persona(models.Model):
        nombre = models.CharField(max_length = 30)
        apellido = models.CharField(max_length = 30)

``nombre`` y ``apellido`` son atributos de clase

.. code-block:: sql

    CREATE TABLE miapp_persona (
        "id" serial NOT NULL PRIMARY KEY,
        "nombre" varchar(30) NOT NULL,
        "apellido" varchar(30) NOT NULL
    );

En el ejemplo presentado se observa que un modelo es una clase Python que hereda
de ``django.db.models.Model`` y cada atributo representa un campo requerido por
el módelo de datos de la aplicación.
Con esta informacion Django genera automaticamente la :term:`API` de acceso a
los datos en la base. 

Usando la API
-------------

Luego de crear los modelos y sincronizar la base de datos :ref:`<django-comandos-syncdb>` 
generando de esta manera el SQL correspondiente, se esta en condiciones de usar 
la API de alto nivel en Python que Django provee para accesar los datos::

    >>> from models import Persona
    >>> p1 = Persona(nombre='Pablo', apellido='Perez')
    >>> p1.save()
    >>> personas = Persona.objects.all()

En estas lineas se ven algunos detalles de la interaccion con los modelos:

    * Para crear un objeto, se importa la clase del modelo apropiada y se crea
        una instancia pasándole valores para cada campo.

    * Para guardar el objeto en la base de datos, se usa el método ``save()``.

    * Para recuperar objetos de la base de datos, se usa ``Persona.objects``.

Internamente Django traduce todas las invocaciones que afecten a los datos en
secuencias ``INSERT``, ``UPDATE``, ``DELETE`` de SQL

Django provee tambien una forma de seleccionar, filtrar y obtener datos de la 
base a traves de los administradores de consultas representado en el ejemplo
anterior por ``Persona.objects``.

.. _django_managers:

Administradores de consultas
----------------------------

Los managers o administradores de consultas son los objetos que representan la
interfase de comunicacion con la base de datos. Cada modelo tiene por lo menos
un administrador para acceder a los datos almacenados.
Cada entidad presente en el modelo, tiene al menos un *Manager*. Este *Manager*
encapsula en una semántica de objetos las opreaciones de consulta (*query*) de
la base de datos [*]_ . Un *Manager* consiste en una instancia de la clase
*django.db.models.manager.Manager* donde se definen, entre otros métodos,
*all()*, *filter()*, *exclude()* y *get()*.

Cada uno de éstos métodos genera como resultado una instancia de la calse
*QuerySet*. Un *QuerySet* envuelve el "resultado" de una consulta a la base
de datos. Se dice que envuelven el "resultado" porque la estrategia de acceso a
la base de datos es *evaluación retardada* [*]_, es decir, que la consulta que
representa el *QuerySet* no será evaluada hasta que no sea necesario acceder a
los resultados.

.. [*] En el lenguaje SQL, las consultas se realizan miediante la sentecia SELECT.
.. [*] También conocida como *Lazy Evaluation*

Un *QuerySet*, además de presentar la posibilidad de ser iterado, para recuperar
los datos, también posee una colección de métodos orientados a conuslta, como
*all()*, *filter()*, *exclude()* y *get()*. Cada uno de estos métodos, al
igual que en un mánager, devuelven instancias de *QuerySet* como resultado.
Gracias a esta característica recursiva, se pueden generar consultas
medinate encadenamiento.