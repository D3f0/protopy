

###########################
Aplicación de Demostración
###########################


Se diseñó una aplicación denominada ``salesman`` (agente de ventas viajante)
para ejemplificar el funcionamiento de Protopy y Doff. La aplicación modela
una empresa dedicada a la venta de productos electrónicos. Los productos son vendidos Online o a través de agentes viajantes que poseen una copia del catalogo y generan pedidos a partir de estos. Los vendedores, una vez que han ingresado al sistema mediante el sistema de autenticación, pueden realizar la desconexión. Una vez que están desconectados, pueden hacer varios


Organización del código fuente del proyecto
-------------------------------------------

El código fuente del proyecto se ubicó en la carpeta ``sources/sakesman``. 
La aplicación ``offline`` se encuentra en ``source/offline`` mencionada en los capítulos anteriores. De esta manera, para la instanalación, simplemente se agregó el directorio padre de ``salesman`` al PYTHONPATH.

.. code-block:: python

    # Se agrega el directorio padre como repositorio de paquetes Python
    sys.path.append('..')
    

El parámetro ``OFFLINE_BASE`` es la cadena ``"off"``. El sitio remoto que se creo para la demostración fue llamado ``ventas``. 

Desarrollo de la aplicación
---------------------------

El desarrollo de la aplicación comenzó por la definición del modelo. Este fue dividido en dos aplicaciones: ``core`` donde se situaron entidades comunes y ``ventas`` donde se crearon las propias del sistema de pedidos.

Las entidades definidas en la aplicación ``core`` fueron las siguientes:
    
    * Pais
    
    * Provincia
        
        Relacionado con Pais.
        
    * Ciudad
    
        Relacionado con Provincia
    
    * Vendedor
    
        Posee información personal y las ciudades asingadas.
    
    * Porveedor
        
        Relacionado con los productos que provee.
    
    * Categoria
        
        Identificación de tipos de productos. 
    
    * Producto
    
    
        
En la aplicación ``ventas`` cuenta con las entidades:

    * Pedidas
    
    * ItemPedido
    
 
.. figure:: ../_dot/django_models.png
    
    Diagrama de Base de Datos de Salesman (generado con ``graph_models``)

Vistas
------

La mayor parte de las vistas se implementaron mediante vistas genéricas 
(generic views) provistas por Django [DjangoDocsGenericViews09]_ (en el servidor) 
y Doff (en el cliente).
Django prvee varios tipos de vistas genéricas [*]_, de los cuales solo se utilizaron  
las relacionadas con CRUD. 

.. [*] CRUD, consultas, comentarios, redirección, etc.

.. [DjangoDocsGenericViews09] Vistas Genéricas,
    Documentación de Django,
    último acceso Noviembre de 2009,
    http://docs.djangoproject.com/en/dev/ref/generic-views/
 

Las vistas genéricas utilzadas fueron:

    * ``django.views.generic.simple.direct_to_template``
    
        Procesa un template como salida, recibe como arugmento el ``template_name``
        con el nombre del la plantilla.
        
    * ``django.views.generic.create_update.create_object``
        
        Crea una entidad en la base de datos. Recibe los argumentos:
            
            * ``form_class`` o ``model``: Un ``ModelForm`` o ``Model`` sobre el cual se realizará la creación.
        
            * ``post_save_redirect``: La URL a la cual el cliente es redirigod
              tras la creación existosa de la entidad, por defecto es  ``object.get_absolute_url()``.
      
            * ``template_name``: Nombre del template que se usará para generar la salida.
            
            * ``extra_context``: Elementos extra para generar el template.
    
        
    * ``django.views.generic.create_update.update_object``
        
        Los parámetros de esta vista son iguales a ``create_object`` agregando
        
        * ``object_id``: Identificador del objeto a editar.
        
    * ``django.views.generic.create_update.delete_object``
    
        * ``model``: Modelo al cual pertenece la instancia a ser eliminada.
        
        * ``post_delete_redirect``: URL a la cual se redirige luego de una eliminación exitosa.
        
        * ``object_id``: Identificador de la instancia a eliminar.

Estas vistas fueron fueron implementadas en **Doff** debido que hasta el momento no se 
habían contemplado.
        

Plantilla de la aplicación
--------------------------

La portada de la aplicación en línea se diseño de la siguiente manera:

.. figure:: ../_static/sshot_inicio.png

.. raw:: latex

    \newpage


Se utilizó una plantilla *Underground Store* del sitio http://www.styleshout.com/ liberada sobre la licencia Creative Commons [CC2009]_, sobre la cual se definieron varios bloques de plantilla.

.. [CC2009] *Licencia Creative Commons*,
    último acceso Noviembre de 2009,
    http://es.wikipedia.org/wiki/Creative_Commons


Como menú de la aplicación se dispuso de la siguiente manera:

.. figure:: ../_static/sshot_button.png
	
    Barra de botones de la aplicación

Los enlaces de la barra superior permiten acceder a diferentes secciones de la aplicación en línea:
  
  * Inicio

      Pagina de portada

  * Catálogo
  
      Catálogo de productos

  * Pedidos

	Listado de pedidos.

  * Administrar
   
      Permite realizar CRUD sobre Clientes, Ciudades, Productos y Categorías.

  * Desconectar

     Desconectar es un enlace hacia el sitio remoto.

Administración Básica
=====================

Como paso inicial se habilitó la administración automática de Django en la ULR ``/admin``. Esta aplicación provista por el framework no está disponible de manera desconectada en Doff [*]_, sin embargo se utilizó para depuración. La siguiente captura muestra la fachada de esta aplicación, donde se puede apreciar que se encuentran registrados los modelos antes mencionados.

.. figure:: ../_static/sshot_dj_admin.png
	
   Captura de la administración de Django para el proyecto ``salesman``.

.. raw:: latex

    \newpage

.. [*] La migración de la aplicación ``django.contrib.admin`` es una de las
       líneas futuras de la presente tesina.

En la aplicación, dentro de el enlace “Administrar” se implementó ABM de Ciudades, Productos, Categorías y Proveedores.

.. figure:: ../_static/sshot_administrar.png

    ABM de Ciudades, Clientes, Productos y Proveedores.

.. raw:: latex

    \newpage

Todas las operaciones utilizan vistas genéricas, por lo que funcionan de la misma manera. A continuación se ilustra un
ejemplo para el listado del modelo Ciudad:

.. figure:: ../_static/sshot_admin_ciudades.png

    Listado de ciudades

.. raw:: latex

    \newpage

Para las altas y modificaciones, la fachada es la siguiente:

.. figure:: ../_static/sshot_admin_ciudade_add.png
    :figwidth: 40


    Agregar una ciudad

.. raw:: latex
	
    \newpage
