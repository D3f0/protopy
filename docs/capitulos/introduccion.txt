'
############
Introducción
############

**********
Motivación
**********

Hoy en día Internet supone un excelente medio para obtener información sobre
diversos temas. Para que esta información sea realmente útil es imprescindible
que el acceso a ella sea simple e intuitivo, de forma que cualquier persona pueda
encontrar y utilizar lo que desea con tan sólo unos conocimientos básicos.

Esto es posible gracias a la world wide web (web), la cual surge alrededor del
año 1990 en el CERN (Organización Europea para la Investigación Nuclear), ante
la necesidad de distribuir e intercambiar información acerca de investigaciones
de una manera más efectiva. "Tim" John Berners-Lee fue quien definió los
componentes básicos que constituyen la web y dan soporte al almacenamiento,
transmisión e interpretación de los documentos de hipertexto.

El término hipertexto no resultaba nuevo en aquel momento: fue acuñado por Ted
Nelson en 1965, para designar a los documentos que pueden con­tener enlaces (referencias)
a otras partes del documento o a otros documentos. De esta forma, el documento no
necesita ser leído secuencialmente. El hipertexto dio un gran salto con el desarrollo
de Internet, posibilitando que un documento este físicamente distribuido en distintas
máquinas conectadas entre sí.

Berners-Lee desarrolló lo que por sus siglas en inglés se denominan: el lenguaje
HTML (HyperText Markup Language) o lenguaje de etiquetas de hipertexto, el
protocolo HTTP (HyperText Transfer Protocol) y el sistema de localización de objetos
en la web URL (Universal Resource Locator), en conjunto con las herramientas
necesarias para que la web funcionase: el primer navegador y editor web, el primer
servidor web y las primeras páginas web, que al mismo tiempo describían el proyecto.

La web funciona siguiendo el denominado modelo cliente-servidor, habitual en las
aplicaciones que funcionan en una red: existe un servidor, que es quien presta el
servicio, y un cliente, que es quien lo recibe.

El cliente web o navegador es un programa con el que el usuario interacciona para
solicitar a un servidor web el envío de documentos codificados en lenguaje HTML.
Estos documentos se transfieren mediante el protocolo HTTP. El navegador debe
interpretar el HTML para mostrar la información al usuario en el formato adecuado.

El servidor web, o simplemente servidor, es un programa que está permanentemente
escuchando las peticiones de conexión de los clientes mediante el protocolo HTTP.
Cuando llega una petición, el servidor busca el documento que ha sido solicitado
en su sistema de archivos y, si lo encuentra, lo envía al cliente; en caso
contrario, devuelve un error.

Con el paso de los años se fueron incorporando innovaciones en el servidor. El
siguiente paso lógico lo constituyeron los documentos o páginas dinámicas. Éstas
se generan al ser solicitadas con información específica del momento o del usuario.
Las aplicaciones CGI (Common Gateway Interface) surgieron como una de las primeras
maneras prácticas de crear el contenido de una forma dinámica. En una aplicación CGI,
el servidor pasa las solicitudes del cliente a un programa externo. Este programa
puede estar escrito en cualquier lenguaje que el servidor soporte e interactuar
con bases de datos u otros recursos que el servidor posea. Su salida se envía al
cliente, en lugar del tradicional archivo estático.

El uso extendido de CGI evolucionó paulatinamente hacia el diseño e implementación
de frameworks. Un framework representa una arquitectura de software que modela las
relaciones generales de las entidades del dominio. Provee una estructura y una
metodología de trabajo. Típicamente, un framework puede incluir soporte de base
de datos, programas, librerías, entre otros, para ayudar a desarrollar y vincular
los diferentes componentes de un proyecto.

Paralelamente a las innovaciones que surgían en el servidor, se comenzaron a
agregar en los navegadores nuevas funcionalidades, entre las que se destacan los
intérpretes para lenguajes de scripting. JavaScript es uno de estos lenguajes;
paulatinamente tomó relevancia y se convirtió en un estándar. Se ejecuta en el
navegador al mismo tiempo que se descarga junto con el código HTML y permite
una modificación o interacción con el código de la página a través del manejo
del DOM (Document Object Model). Netscape incorporo por primera vez a DOM, con
el fin de acceder, añadir y cambiar dinámicamente contenido estructurado en una
página; esto se denomina HTML dinámico (DHTML).

Los avances, tanto en el servidor como en el navegador, convergieron en el
nacimiento de un nuevo concepto: las "aplicaciones web". En una aplicación web
las páginas son generadas dinámicamente en un formato estándar soportado por los
navegadores. Agregando lenguajes interpretados en el lado del cliente, se añaden
elementos dinámicos a la interfaz de usuario. Generalmente, cada página web en
particular se envía al cliente como un documento estático, pero la secuencia de
páginas ofrece al usuario una experiencia interactiva. Durante la sesión, el
navegador interpreta y muestra en pantalla las páginas, actuando como cliente
para cualquier aplicación web.

Las aplicaciones web son populares debido a lo práctico que resulta el navegador
web como cliente de acceso a las mismas. También resulta fácil actualizar y
mantener aplicaciones web sin distribuir e instalar software a miles de usuarios
potenciales. En la actualidad, existe una gran oferta de frameworks web para
facilitar el desarrollo de aplicaciones web.
   
Una ventaja significativa de las aplicaciones web es que funcionan
independientemente de la versión del sistema operativo instalado en el cliente.
En vez de crear clientes para los múltiples sistemas operativos, la aplicación
web se escribe una vez y se ejecuta igual en todas partes.
    
Las aplicaciones web tienen ciertas limitaciones en las funcionalidades que
ofrecen al usuario. Hay funcionalidades comunes en las aplicaciones de escritorio,
como dibujar en la pantalla o arrastrar y soltar, que no están soportadas por
las tecnologías web estándar. Los desarrolladores web, generalmente, utilizan
lenguajes interpretados o script en el lado del cliente para añadir más
funcionalidades, especialmente para ofrecer una experiencia interactiva que no
requiera recargar la página cada vez. Recientemente se han desarrollado
tecnologías para coordinar estos lenguajes con tecnologías en el lado del servidor.

El alcance universal de la web la ha hecho un terreno muy atractivo para la
implementación de sistemas de información. Los sistemas operativos actuales de
propósito general cuentan con un navegador web, con posibilidades de acceso a
bases de datos y almacenamiento de código y recursos.

La web, en el ámbito del software, es un medio singular por su ubicuidad y sus
estándares abiertos. El conjunto de normas que rigen la forma en que se generan
y transmiten los documentos a través de la web son regulados por la W3C
(Consorcio World Wide Web). La mayor parte de la web está soportada sobre
sistemas operativos y software de servidor que se rigen bajo licencias
OpenSource (Apache, BIND, Linux, OpenBSD, FreeBSD). Los lenguajes con los que
son desarrolladas las aplicaciones web son generalmente OpenSource, como e PHP,
Python, Ruby, Perl y Java. Los frameworks web escritos sobre estos lenguajes
utilizan alguna licencia OpenSource para su distribución; incluso frameworks
basados en lenguajes propietarios son liberados bajo licencias OpenSource.

*********
Propuesta
*********

Podemos decir que las aplicaciones tradicionales, que no hacen uso de la web,
son más robustas ya que no dependen de una conexión. Por lo tanto, sería
deseable poder dotar a las aplicaciones web de la capacidad de trabajar cuando
no cuentan con conexión.

Si bien los elementos necesarios para llevar a cabo esta tarea están disponibles
actualmente, no están contemplados en los diseños de los frameworks web. Es
decir, cuando una determinada aplicación web debe ser transportada al cliente,
es necesario escribir el código de soporte específico para esa aplicación.
    
Un framework no constituye un producto per sé, sino una plataforma sobre la cual
construir aplicaciones. Mediante un licenciamiento OpenSource, se brinda a la
comunidad la posibilidad de producir mejoras tanto de funcionalidad como de
seguridad. Mediante las licencias abiertas se asegura la continuidad del
desarrollo, ya que si el autor abandona el proyecto éste puede ser continuado
por un tercero.

Consideramos que sería beneficioso aportar una extensión a un framework web
OpenSource que brinde facilidades para transportar las aplicaciones web, basadas
en éste, al cliente de manera que la aplicación que haga uso de nuestra
extensión pueda ser ejecutada a posteriori en el navegador en el cual ha sido
descargada.

El framework web fue elegido tras un estudio de las características que
consideramos más importantes para el desarrollo veloz, como la calidad del
mapeador de objetos (entre las características más importantes de éste
buscamos eficiencia en las consultas a la base de datos, ejecución demorada
para encadenamiento de consultas, implementación de herencia, baja carga de
configuración), la simplicidad para enlazar URL's a funciones controladoras,
extensibilidad del sistema de escritura de plantillas. Buscamos frameworks
que permitan la ejecución transversal de cierto tipo de funciones, para ejecutar
tareas como compresión de salida, sustitución de patrones de texto, caché,
control de acceso, etc.

*********
Objetivos
*********

Nuestro objetivo en la presente tesina fue intrumentar, sobre un framework de
aplicaciones web existente, facilidades para transferir al navegador web la
lógica y datos necesarios para poder ejecutar la aplicación en ausencia del
servidor web.

El objetivo principal se definió como:

    * "Extender un framework de aplicaciones web existente, OpenSource, 
      de manera que una aplicación realizada sobre éste pueda ser ejecutada 
      en el cliente de manera desconectada con un mínimo de modificaciones. 
      Para permitir que la aplicación pueda ejecutarse en el cliente, se 
      implementará:

          * Persistencia del modelo de datos en el cliente.
          * Subconjunto de acciones disponibles en modo desconectado.
          * Primitivas de sincronización entre la aplicación del cliente y la aplicación web que le dio origen".

Y como objetivos secundarios:

    * "Enriquecer nuestra experiencia relacionada con el desarrollo de software libre.
    * Aportar y difundir una extensión a un framework de libre distribución".

***************
Contexto actual
***************

Las principales empresas de software se están abocando a desarrollar
aplicaciones que funcionan tanto conectadas a la web como desconectadas de ella,
brindando soluciones que reúnan lo mejor de las dos opciones, como lectores de
noticias, sistemas de gestión de proyectos y hasta paquetes de oficina
(procesadores de texto, hojas de cálculo, etc.), por mencionar algunas.

A mediados del 2007 Google libera un complemento para los navegadores web
llamado Google Gears, que provee un servidor web de contenido estático, una
base de datos y un mecanismo para ejecutar tareas en segundo plano, llamado
Worker Pool. Mediante este complemento se permite almacenar localmente los
documentos y otros elementos, como las imágenes y el código JavaScript,
presentando como novedad la capacidad de almacenar datos de la aplicación web
en el cliente, en una base de datos de similares características a las que se
encuentran normalmente en los servidores web. Varias aplicaciones de Google
comienzan a hacer uso de este complemento, siendo notable su utilización en la
aplicación de oficina basada en web, Google Docs (http://docs.google.com), la
cual brinda un procesador de texto y una planilla de cálculo que pueden ser
usadas incluso cuando el cliente está desconectado de la web, con la condición
previa de que haya entrado una vez al sitio y habilitado el modo desconectado.

En la actualidad existen alrededor de 150 frameworks de aplicaciones web
(desarrollados en los lenguajes PHP, Python, Ruby, Perl, Lua, ASP, Java,
ColdFusion, Groovy y Common LISP), que siguen en mayor o menor grado el patrón
Modelo-Vista-Controlador (MVC), este es un patrón de arquitectura de software
que separa los datos de una aplicación, la interfaz de usuario, y la lógica de
control en tres componentes distintos. 

*******
Alcance
*******

Se realizó un estudio sobre los componentes que intervienen en el desarrollo de 
aplicaciones web: el navegador y el servidor web.

Se seleccionó un framework web en función de características tales como un mapeador
objeto-relacional avanzado, posibilidad de desarrollo sin necesidad de entornos
sofisticados (por ejemplo, evitar los frameworks web que utilizan XML como
formato de configuración) y puesta en producción en pocos pasos.

Se creó una librería de JavaScript para facilitar la migración del código de la
aplicación en línea a un navegador, utilizando una versión específica del
lenguaje.

Se desarrolló una extensión del framework junto con una implementación
desconectada del mismo. Sobre éste se diseñó un mecanismo de sincronización
simple pero extensible.

*************************
Resumen de los Capítulos
*************************

 * Tecnologías del Servidor
 
    En este capítulo se introduce Servidor Web y CGI.
    Luego se detallan los lenguajes dinámicos y sus frameworks orientados a
    la generación de contenido web.
    
    Finalmente se analiza el framework Django.
 
 * Tecnologías del Cliente
 
    En este capítulo se analizan los navegadores web, describiendo brevemente 
    HTTP, HTML, CSS y con mayor detalle JavaScript y DOM.
    
    Finalmente se realiza un análisis sobre AJAX y JSON, y finalmente Google Gears.   
 
 * Introducción al Desarrollo
 
    En este capítulo se detallan las alternativas analizadas para la desconexión,
    definiendo una librería de JavaScript, **Protopy** y un framework desconectado,
    **Doff**.
 
 * Protopy, la Librería de JavaScript
 
    En este capítulo se decribe la implementación de la librería de JavaScript
    que se utilizó como base para **Doff**. Se explica la evolución desde librerías
    como Prototype y Dojo, y las adaptaciones realizadas sobre JavaScript 1.7 
    para realizar un acercamiento sintáctico a Python. 

 * Doff, el Framework Desconectado
    
    En este capítulo se explica la implementación **Doff** sobre la librería
    **Protopy**. Se estudia el acceso a datos, el sistema de plantillas, 
    la emulación de HTTP implementada en **Doff**. 
     
 * Offline, la Aplicación para la Desconexión
 
    En este capítulo se estudia el soporte del lado del servidor para la 
    desconexión de aplicaciones medinate **Doff**, realizado en la aplicación
    genérica **offline**.
 
 * Sincronización de Datos
    
    En este capítulo se describe el mecanismo de sincronización implementado
    en **Doff** y **offline**.
 
 * Aplicación de Demostración
 
    En este capítulo se describe brevemente la aplicación de demostración y
    los pasos para instalarla.
   