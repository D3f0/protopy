

#########################
Sincronización de Datos
#########################

Por simplcidad, en este capítulo, se establece la siguiente terminología:
Cuando se hable de *el cliente* se está refiriendo al proyecto desconectado,
 *el servidor* es el proyecto en línea.

La sincronziación de datos permite que las entidades definidas en el servidor
se repliquen en el cliente y que las creadas y modificadas por el cliente
se transfieran a la aplicación en linea, permitiendo así que se porpaguen
a el resto de los clientes.

Sin embargo diversas situaciones en las cuales se pueden presentar conflictos entre
las versiones de de una misma entidad:

    * Cuando una entidad se modifica tanto en el cliente como en el servidor
    
    * Cuando una entidad se modifica en dos clientes
    
    * Cuando dos o más entidades equivalentes se crean en dos clientes
    
    * Cuando se crea una entidad equivalente en el cliente y en el servidor equivalente
    
    * Cuando se elimina una entidad en el servidor referenciada en el cliente
    
    * Alguna combinación de los casos anteriores
    
La forma en que se resuelven estos conflictos debe ser abordada por el programador
durante el diseño de la aplicación.

Se implementó una mecánica simple y extendible que resuelve casos simples en
``doff.contrib.syncrhonization``.

Para implementar la sincronización se trataron los siguientes items:

    * Integridad de la sincronización (orden de los modelos, transacciones)
    
    * Transporte de datos
    
    * Detección de cambios en instancias en el servidor
    
    * Detección de cambios en el cliente
 



Transporte de Datos
===================

El primer aspecto a considerar es el transporte de datos. Las bases de datos
relacionales utilizan el lenguaje SQL como estándar para la definicón de su
estructura y manipulación de datos. Django provee un ORM que encapsula el
acceso al RDBMS y brinda una capa de abstracción en el lenguaje Python. Doff realiza
lo propio en el lenguaje JavaScript y apoyándose en las extensiones del 
provistas por Protopy. Gracias al trabajo del sitio remoto, mediante
el registro de modelos, se obtiene consistencia entre las definciones de alto
nivel del servidor con las del cliente, por lo cual se optó por realizar el
transporte utilizando los mecanimos de alto nivel disponibles en Django implenetando
el soporte necesario en Doff.

Django provee un módulo llamado ``serializers`` que brinda un conjunto de
serializadores (*marshalling*) de instancias de ``QuerySet``. Un serializador
se encarga de *aplanar* las intancias en texto con algún formato. Los formatos
de salida provistos por Django son: XML, JSON y Python. Cuando un serializador
trabaja sobre un ``QuerySet`` almacena información sobre el modelo para poder
luego recuperar las instancias medinate un des-serializador. L

Se optó por el serializador basado en JSON, debido a que presenta ventajas a la 
hora de depuración aunque teniendo como penalización el tiempo de procesamiento sobre
conjuntos grandes de datos.

Los serializadores son obtenidos a través de un factory de clases con la signatura 
``get_serializer(nombre)``. Para el siguiente modelo:

.. code-block:: python

    
    class Pais(models.Model):
        nombre = models.CharField(max_length = 45)
        simbolo_moneda = models.CharField(max_length = 8, default = '$')
        
        def __unicode__(self):
            return self.nombre
        
        class Meta:
            verbose_name = u"País"
            verbose_name_plural = u"Paises"
        
    class Provincia(models.Model):
        pais = models.ForeignKey(Pais)
        nombre = models.CharField(max_length = 140)
        
        def __unicode__(self):
            return self.nombre

se puede serializar en JSON de la siguiente forma

.. code-block:: python
    :linenos:

    
    from core.models import Provincia # Importanción de modelos
    # Importación del módulo de serialización
    >>> from django.core import serializers
    # Obtención de la calse de serialización en JSON
    >>> SerializadorCls = serializers.get_serializer('json')
    # Creación de una instancia del serializador
    >>> serializador = SerializadorCls()
    
    # Serialización
    >>> plano = serializador.serialize(Provincia.objects.all())
    # Los datos son texto plano
    >>> plano
    
        '[
            {   "pk": 1, 
                "model": "core.provincia", 
                "fields":   {
                    "pais": 1,
                    "nombre": "Buenos Aires"
                }
            }, 
            {
                "pk": 2, 
                "model": "core.provincia",
                "fields": {
                    "pais": 1, 
                    "nombre": "C\\u00f3rdoba"
                }
            }
         ]'
         
    # Para recuperar los datos, se obtiene una función des-serializador
    # que retorna instncias guardables
    
    >>> deserializador_func = serializers.get_desserializer('json')
    
    # Invocación del deserializador sobre el texto serializado
    >>> for obj in deserializador_func(plano):
    ...     # Guardado de la isntancia
    ...     obj.save() 
    

Como se mencionó anteriormente, los modelos expuestos al cliente se encuentran
en registrados en el sitio remoto mediante un proxy. El Manager definido en
este proxy es el que se utilizará a la hora de serializar los datos para 
su envío al cliente. Por defecto, si no se define un Manager, se utiliza
``_default_manager`` que es un alias de ``objects``.

Se implementó sobre Doff el modulo de serialización para poder recuperar 
los datos y generar las instancias correspondientes en el cliente.

Si bien con la utilización de los serializadores brinda un mecanismo extensible
y simple de transporte de datos, se deben tener en cuenta que en el caso
de contar con relaciones en los modelos, los datos serializados deben ser
enviados en orden para no violar la integridad diferencial, provocando
una falla en el método ``save()`` en la deserialización. Desde el 
punto de las relaciones, los modelos conforman una gerarquía de árbol con
múltiples raices. Gracias a la metainformación que brindan las definciones
de alto nivel, el orden de presedencia fue calculado de manera sencilla.

.. note:: Documentar remote.py, serializadores 2 y 2 Read Only 


Versionado de Modelos
=====================

Mediante los serializadores y se puede realizar una transferencia de datos
entre el cliente y el servidor, pero no se ha expuesto aún un mecanismo para
controlar los cambios realizados sobre las instancias tanto en el proyecto
en línea como en el proyecto basado en Doff.

Para realizar el análisis de la información necesaria sobre los cambios de
las instancias se planteó un escenario hipotético que se describe a continuación:

    Existe un proyecto en linea, que cuneta con un sitio remoto publicado. Existe
    uno o más instancias del proyecto creado a partir del sitio remoto. Los clientes
    poseen conexión ocacional, durante la cual realizan la tarea de sincronización
    en la cual envían y reciben los cambios del sitio remoto.
    Ante un conflicto de datos insalvable de manera automática mediante las 
    clases de Middleware de sincronización, se puede definir que política
    adoptar: prevalencia de los datos del servidor, prevalencia de los datos
    del cliente, intervensión del usuario u  otra política. 

Los camibos en las instancias ocurren ante los eventos de creación, modificación
y eliminación. Sin embargo, esto eventos se producen tanto en la aplicación del
cliente como en la aplicación en línea, por lo que se realiza un anális por 
separado de cada una de estas situaciones:

 * Creación de una entidad
 
    Ocurre cuando se genera una instancia de alguna entidad del ORM y se 
    invoca el método ``save()``
 
    * En el servidor
    
        Se debe crear un registro de que la entidad ha sido creada.
        El cliente debe copiar la nueva intancia en la próxima sincronización.
    
    * En el cliente
    
        Se crea la entidad creando una clave local del cliente.
        Durante la sincronización la entidad
        será creada en el proyecto en línea, devolviendo al cliente el identificador
        del servidor.
 
 * Modificación de una entidad
    
    Ocurre cuando se recupera una instancia mediante un Manager y se modifican
    sus valores, llamando posteriormente al método ``save()``.
 
    * En el servidor
        
        Se debe crear un registro de que la entidad ha sido modificada.
        El cliente debe actualizar la intancia en la próxima sincronización.
    
    * En el cliente
        
        Si la entidad se creó en el cliente y nunca fue sincronizada, 
        sigue siendo nueva para el servidor. En cambio si la entidad fue
        sincronizada con el servidor se debe crear un registro de que la 
        entidad ha sido modificada.
        
 
 * Eliminación de una entidad
    
    Ocurre cuando se invoca ``delete()`` sobre una entidad recuperada mediante
    un Manager, o cuando se invoda directamente sobre el Manager.
    
    * En el servidor
        
        Se elimina la instancia en el servidor, generando un registro de
        la baja.
        El cliente        
    
    * En el cliente
        
        La eliminación en un cliente debe provocar una baja lógica en el servidor.
        
Del breve análisis expusto se deduce que se debe almacenar información extra
referente al estado de una instancia. 
        
Junction [JunctionDocsSync09]_ es un framework de desarrollo de aplicaciones web
que abordó el problema de sincronización agregando una serie de campos en las
entidades::

    - id          integer primary key autoincrement
    - created_at  datetime
    - updated_at  datetime
    - active      integer
    - version     integer
    - id_start    integer
    - id_start_db varchar(40)
    - synced_at   datetime
    
En el caso de Junction, la información de versionado se almacena tanto en el
servidor como en el cliente. Aplicar este enfoque sobre un proyecto existente de
Django no es factible debido a que involucra modificar todas los modelos pre-existentes.

Se optó por el agregado de información de manera asimétrica: En el cliente las
entidades se crean con campos extras, mientras que en el servidor se utilizan
relaciones genéricas.

Información de Sincronización en el Cliente
*******************************************

La información sobre sicronización en el cliente se basó en parte en los campos
que propone Junction, agregándoselos a cada entidad, pero se modeló la
 sincronización como entidad por separado.

Se creo la aplicación genérica ``doff.contrib.offline`` y donde se definió ``SyncLog``.
Cada vez que el cliente realiza una sincronización con el servidor, se 
almacena la fecha sobre una instancia de esta entidad,
de manera que durante la sincronización siguiente, 
solo se trabaje con los modelos afectados en el intervalo de tiempo transcurrido.

Los datos que se agregaron a cada modelo del cliente fueron:

    * ``server_pk``
    
        Es la calve de la entidad en el servidor, si la entidad se creó en
        el cliente, este campo es ``NULL`` 
        
    * ``active``
        
        Indica la baja lógica en el servidor. Por defecto toma el valor ``true``.
        
    * ``sync_log``
        
        Referencia la entidad de ``SyncLog`` en la cual la instancia
        fue sincronizada.
        
    * ``status``
        
        Este campo se creó con el objeto de indicar el estado de una entidad
        en el cliente, sus valores posibles son los siguientes:
            
            * ``"C"`` (created)
            
                La entidad se creó en el cliente mediante el método ``save()``.
                Los atributos ``sync_log`` y ``server_pk`` son ``NULL``.
            
            * ``"S"`` (synced)
                
                Indica que la entidad se encuentra sincronizada con el servidor.
                En esta caso, los atributos ``sync_log`` y ``server_pk`` tienen
                sus valores correspondientes. 
                
            * ``"M"`` (modified)
            
                La entidad sincronizada ha sido modificada en el cliente.
                Ante una sincronización se acutaliza la referencia de ``sync_log``
                y se vuelve al estado de sincronizado (``"S"``).
                
            
            * ``"D"`` (deleted)
                
                Indica que la entidad fue borrada en cliente. Ante una sincronización el
                servidor pasa a estado ``"S"`` y el atributo ``active`` pasa 
                a ``false``.
        
    

.. [JunctionDocsSync09] Steve Yen,  
    *TrimPath Junction Syncrhonization*,
    http://trimpath.googlecode.com/svn/trunk/junction_docs/files/junction_doc_sync-txt.html

Información de Sincronización en el Servidor
********************************************

Se mencionó en el capítulo en el cual se introdujo Django que el ORM de este framework
brinda lo que se conoce como el framework de ``ContentType`` (no confundir
con la cabecera HTTP), que consiste en una serie de ``Fields`` del ORM que 
permiten crear relaciones genéricas. Además se mencionó que el framework posee
un sistema de señales que permiten el conexionado de eventos del ORM a funciones.

Con el objeto de registrar los cambios sobre entidades en el servidor, se 
decidió crear una entidad denominada ``SyncData``. Una instancia de esta entidad
se crea ante los eventos de guardado (modificación) y eliminación de las entidades.

De esta manera solo las entidades que forman parte del proyecto desoncetado
son "vigiladas" por cambios, registrandose ante éstos la fecha.
Cada vez que se registra un modelo a un sitio remoto internamente también
se registran manejadores de eventos ante las señales de guardado, ``post_save`` 
y eliminación, ``post_delete``.

La aplicación ``offline`` posee estos modelos:

.. figure:: ../_dot/offline_models.png

    Modelos


Protocolo de Sincronización
===========================

Se eligió RPC sobre HTTP como mecanismo de comunicación entre el cliente y el servidor 
por sobre llamadas asincrónicas simples o AJAX, debido de que se requiere pasaje
de parámetros más complejos que los contemplados en la codificación 
``application/x-www-form-urlencoded`` o ``multipart/form-data`` [W3CFormEncoding09]_. 
Se eligió JSONRPC como mecanismo de comunicación y se publicó en la URL 
``/sync`` del sitio remoto.

Basados en las primitivas de sincronización de los sistemas de control de versiones
distribuidos como Git [GitDocs09]_, Mercurial [MercurialDocs09]_ o Bazaar 
[BazaarDocs09]_
se crearon dos métodos:

    * ``pull()``
    
        Requiere los cambios del servidor
        
    * ``push()``
    
        Envía los cambios al servidor
        
.. [W3CFormEncoding09] Dave Raggett, Arnaud Le Hors, Ian Jacobs,
    *Especificación de codificación de contenidos de formularios en HTML 4.1*,
    ultimo acceso Noviembre de 2009,
    http://www.w3.org/TR/html401/interact/forms.html#form-content-type

.. [GitDocs09] Sistema de Control de Versiones Git,
    último acceso Noviembre de 2009,
    http://git-scm.com/

.. [MercurialDocs09] Sistema de Control de Versiones Mercurial,
    último acceso Noviembre de 2009,
    http://mercurial.selenic.com/guide/    

.. [BazaarDocs09] Martin Pool
    *Sitio Oficila de Sistema de Control de Versiones Bazaar*,
    último accseo Noviembre 2009,
    http://bazaar-vcs.org/en/

Estas operaciones tienen caracter atómico.   
Dentro del modulo ``doff.contrib.offline.handler`` se creó la clase ``SyncHandler``
con los métodos 
``pull()`` y ``push()`` que hacen las llamadas a las funciones homónimas
publicadas en ``/sync`` del sitio remoto. Una instancia de objeto se encuentra
en proyecto desconectado. Por ejemplo, en un poryecto llamado agentes [*]_:

.. code-block:: javascript

    // Descargar los datos del serivdor
    >>> agentes.sync
    
    doff.contrib.offline.handler.SyncHandler 
        settings=Object server=rpc.ServiceProxy

.. [*] Tomado de la aplicación de ejemplo descrita en el capítulo siguiente
 
 
 
    
En Doff se plantearon dos tipos de sincronización: la *sincronización inicial*, que
ocurre cuando un cliente instala el proyecto desconectado a partir del sitio
remoto y la *sincronización normal* que sucede cada vez que el cliente desea
enviar sus cambios y obtener las novedades sobre las instancias
del modelo del proyecto. La sincronización es explícita para el cliente, 
debdio a que en ocaciones donde se requiera asistencia del usuario para dirmir 
los conflictos esto no ocurra de manera sorpresiva.


La aplicación genérica ``doff.contrib.offline`` y en especial su módulo ``syncrhonization`` son
los encargados del manejo de sincronización. Esta aplicación se instala por defecto (durante la ejecución
del comando ``start_remotesite``).

El sitio remoto publica por cada proxy (modelo registrado) el manager defindo
(``objects`` por defecto) mediante JSONRPC en la URL ``/rpc``. 
Cuando se requiere un ``QuerySet`` de algún Manager expuesto, éste se serailzia 
utilizando el mecanismo de serializers de Django.

Se definieron dos métodos:

    * ``push()``
    
        Esta operación envía los cambios del cliente al servidor.
        
        #. Busca en el cliente la última sincronización (última instancia de ``SyncLog``)
           si existe (en el caso de tratarse de la sincronización inicial se envía ``null``).
           
        #. Crea la instancia de instancia de ``SyncLog`` actual.
           
        #. Reliza una llamada a ``begin_syncrhonization()`` con la instancia de ``SyncLog``
           recuperada en **1** como parámetro.
           
        #. El servidor responde con los modelos afectados, el orden y la fecha
           del servidor.
        
        #. Por cada modelo afectado se recuperan las instancias mediante 
           la invocación de métodos del ``RemoteManager`` (los serializadores
           realizan el *marshlling* de los ``QuerySets``).
           El ``RemoteManager`` se encarga de filtrar los modelos modificados
           a partir de la fecha del último ``SyncLog`` y agregar los nuevos.
           Cada modelo es deserializado y guardado en la base de datos del cliente
           creando la referencia al ``SyncLog`` actual y estableciendo el campo
           ``status`` en ``"S"``.
           
        #. Se almacena en el ``SyncLog`` actual la fecha del servidor.
        
    * ``pull()``
    
        #. El clinete envía 
    
        Esta operación trae los cambios del servidor al cliente.
        
En el siguiente diagrama se muestran las entidades que tienen entran en juego
en la sincronización.


.. figure:: ../_svg/esquema_sync_simple.png
    
    Esquema de sincronización en el que inteviene el módulo ``synchronization``
    y el sitio remoto publicando los ``RemoteManager`` mediante JSONRPC.

Durante la sincronización ocurren cambios sobre el atributo ``status`` de las 
instancias del cliente.

.. figure:: ../_dot/estados_sincronziacion_cliente.png

    Estados de sincronización de los modelos en el cliente

Resolución de Conflictos
========================

Durante la ejecución de ``pull()`` del manejador de sincronización pueden
ocurrir conflictos o errores que requieran la intervensión del usuario o hallan
sido contemplados por el desarrollador mediante una política de resolución.

Para implementar esta lógica se creó la calse ``SyncMiddleware``, la cual
define los metodos básicos que intervienen en el proceso de sincronización.
Una subclase de ``SyncMiddleware`` se debe declarar en el 
módulo ``settings.js`` en la variable ``SYNC_MIDDLEWARE_CLASS``.

Los métodos de esta clase se crearon en función a la evaluación de posibles
conflictos de estados, presentados en esta tabla:



Se ofrecen al programador las siguientes clases con comportamiento por defecto para resolver
los conflictos:
    
    * ``ClientWinsSyncMiddleware``
    
        Prevalece la infrmación del cliente
    
    * ``ServerWinsSyncMiddleware``
    
        Prevalece la infrmación del servidor 

    * ``ServerWinsSyncMiddleware``
    
        Solo si se utiliza la herramienta de desarrllador ``toolbar`` de Doff.
          
Ante un conflicto, se ejecuta algún método de estas clases.


Considreaciones Sobre Sincronización
=====================================

Doff provee un mecanismo básico de sincronziación adecuado para peuqueñas aplicaciones
que permite al programador contar con las herramientas para transporte, comunicación RPC
y control de cambios. Debido a que no existe una política universal aplicable a
todas las aplicaciones, y debido a que Doff se trata de un framework extendible, 
se pueden implmentar mecanismos más sofisticados en base a las herramientas expuestas.