
#############################
Conclusiones y Líneas Futuras
#############################

************
Conclusiones
************



Durante el desarrollo de la presente tesina se realizó un análisis sobre las
tecnologías disponibles para el desarrollo de aplicaciones web destacandas
el aporte de los frameworks orientados a aplicaciones de contenidos, como Ruby On Rails o 
Django. Los lenguajes dinámicos de alto nivel, a pesar de el sobrecarga que introducen,
facilitan la creación de frameworks simples, como es el caso de Django.

Se lograron cumplir los objetivos principales de manera completa:
    
    * Extensión de Django (**offline**)
    
    * Persitencia de datos en el cliente (**Doff**)
    
    * Funcionalidad desconectada (**Protopy** y **Doff**)
    
    * Primitivas de sincronización (**Doff**)


Si bien no se trató especificamente en la presente tesina, la aparción de HTML5,
(estándar en el cual la funcionalidad de Gears queda compredida) reduce la brecha
entre las aplicaciones de escritorio y las aplicaciones web. Con la próxima aparición
de JavaScript 2 (EcmaScript5) y HTML5, las aplicaciones web *de escritorio* 
poserran nativamente la capacidad de ejecutrse de manera desconectada.

El conjunto de **Doff** y **Protopy** puede ser utilzado como base para realizar 
aplicaciones de escritorio basadas en web.

El desarrollo de este tipo de aplicaciones requerirá que los profecionales 
dedicados al desarrollo de sistemas de información dominen los estádares como
XHTML, EcmaScript, HTTP y sepan utilizarlos para su provecho. Además, la 
integración de mútliples servicios web, como hoy se hace uso en muchas redes
sociales y *mashups*, serán una excelente alternativa para conservar compatibilidad 
con sistemas Web legacy.

El trabajo fue realizado integramente con Software Libre y el producto
también consituye un sub-framework bajo el mismo tipo de licencia. Gracias a 
esta el proyecto asgura su mejora continua. 


**************
Lineas futuras
**************

Conversión de código Python en JavaScript
=========================================

Google publicó en Mayo de 2006 un proyecto llamado Google Web Toolkit (GWT) [*]_, que 
consiste en un compilador de Java en JavaScript, que permite al programador
relizar aplicaciones web totalmente en Java. James Tauber y Luke Casson Leighton
realizaron una implementación similar a GWT sobre Python, denominada PyJamas [*]_.
Es posible por lo tanto generar un compilador de código Python a JavaScript,
utilizando la API de Protopy y Doff, permitiendo que los programadores utilizen 
Python para la totalidad del desarrollo.


.. [*] http://code.google.com/intl/es-AR/webtoolkit/
.. [*] http://pyjs.org/features.html

Sitio de administración
=======================

Django se caracteriza por brindar una aplicación de admnistración (``django.contrib.admin``) 
que permite 
realizar CRUD (Create, Retrieve, Update, Delete) sobre los modelos de las 
aplicaciones de usuario, interactuando con la aplicación  de autorización y permisos
(``django.contrib.auth``).
En base a la implemetnación de Protopy y Doff sería posible implementar un 
sitio de administración similar.

 
Workers con soporte para Javascript 1.7
=======================================
Gears provee un mecanismo de ejecución de código en el cliente de manera
concurrente llamado Worker Pool que permite a tareas que demandan tiempo de
CPU considerables ser ejecutadas en segundo plano, evitando entorpecer el refresco 
de la interfase del navegador.
Una caractersística de los worker pools, es que se ejecutan en un ámbito de 
nombres diferente al del hilo principal y el único mecanismo de comunicación
con el hilo principal es un sistema de cola de mensajes.

Se podrían aislar partes del framework Doff para relizar tareas como el ciclo
del ``Request`` o las tareas de acceso a la base de datos en un Worker Pool.


Compatibilidad con ES5 y HTML 5
===============================
EcmaScrtip 5 o JavaScript 2.0 resulve varios aspetctos que fueron abordados
por Protopy/Doff, como un sistema de clases. Muchas optimizaciones realizadas
sobre Doff 


Optimizaciones en Base a Permanencia de Estado
==============================================

En una aplicación desconectada, el estado generado por cada petición no se pierde,
aunque es destruido voluntariamente por Doff.
Algunos componentes como las plantillas pueden ser conservadas entre petición y
petición para acelerar el procesamiento. 

Implementación de Storage o Almacenamiento en el Cliente
========================================================

Se pordía implementar un sistema de almacenamiento para archivos en el cliente, 
utilizando el ``localserver`` de Gears.


Compilación de JavaScript
=========================

Doff aprovechó las ventajas de la sintaxis de JavaScript 1.7 y 1.8, que no se 
encuentran disponibles en navegadores fuera de la plataforma Mozilla. Con el 
objeto de compatiblizar con otros navegadores disponibles en el mercado, se podría
implementar un compilador de JavaScript 1.7 en JavaScript 1.6, utilizando el
mecanismo de orientación a objetos de Protopy. Además, esta complicación podría
traer aparejado un aumento de la velocidad.

Manejo de Migraciones de Esquema
================================

Una de las características planeadas para Django 1.2 es un sistema de migración
de esquemas que permita transforar una defición de modelo en otra, realizando
los cambios en la base de datos. Los cambios en el esquema de una aplicación web
son una buena alternativa para evitar soluciones de compromiso ante diseños 
en producción. Doff podría admitir definiciones de migraciones.
