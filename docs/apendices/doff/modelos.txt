.. _apendices-doff-modelos

======================================
Referencia de la definición de modelos
======================================

.. El :ref:`doff-modelos` se explica lo básico de la definición de modelos.
Existe un enorme rango de opciones disponibles que no se han cubierto en otro lado.
Este apéndice explica toda opción disponible en la definición de modelos.

Campos
======

La parte más importante de un modelo -- y la única requerida -- es la lista de campos
de la base de datos que define.

.. admonition:: Restricciones en el nombre de los campos

    Existen solo dos restricciones en el nombre de los campos:

        1. Un nombre de campo no puede ser una palabra reservada,
           porque eso ocasionaría un error de sintaxis, por ejemplo:

        .. code-block:: javascript

            var Ejemplo = type('Ejemplo', [ models.Model ], {
                var = new models.IntegerField() // 'var' es una palabra reservada!
            });

        2. Un nombre de campo no puede contener dos o más guiones bajos
           consecutivos, debido a la forma en que trabaja la sintaxis de las
           consultas de búsqueda, por ejemplo:

        .. code-block:: javascript

            var Ejemplo = type('Ejemplo', [models.Model], {
                foo__bar = new models.IntegerField() // 'foo__bar' tiene dos guiones bajos!
            });

    Estas limitaciones se pueden manejar sin mayores problemas, dado que el
    nombre del campo no necesariamente tiene que coincidir con el nombre de la
    columna en la base de datos. Ver :ref:`db_column <apendices-doff-modelos-dbcolumn>`, más abajo.

    Las palabras reservadas de SQL, como ``join``, ``where``, o ``select``,
    *son* permitidas como nombres de campo, dado que se "escapean" todos los
    nombres de tabla y columna de la base de datos en cada consulta SQL
    subyacente.


Cada campo en el modelo debe ser una instancia del tipo de campo apropiado.
Los tipos de ``Field`` son utilzados para determinar algunas cosas:

    * El tipo de columna de la base de datos (ej.:, ``INTEGER``, ``VARCHAR``).

    * El widget a usar en la generacion de formularios (ej., ``<input type="text">``, ``<select>``).

    * Los requerimientos mínimos de validación.

A continuación, una lista completa de los campos, ordenados alfabéticamente. Los campos de
relación (``ForeignKey``, etc.) se tratan en la siguiente sección.


AutoField
---------

Un ``IntegerField`` que se incrementa automáticamente de acuerdo con los IDs
disponibles. Normalmente no es necesario utilizarlos directamente ya que se agrega un
campo de clave primaria automáticamente al modelo si no se especifica una clave
primaria.

BooleanField
------------

Un campo Verdadero/Falso.

CharField
---------

Un campo string, para cadenas cortas o largas. Para grandes cantidades de texto,
usar ``TextField``.

``CharField`` requiere un argumento extra, ``max_length``, que es la longitud
máxima (en caracteres) del campo. Esta longitud máxima es reforzada a nivel de
la base de datos y en la validación.

DateField
---------

Un campo de fecha. ``DateField`` tiene algunos argumentos opcionales extra,
como se muestra en la :ref:`Tabla <doff-modelos-datefield-tabla>`.

.. _doff-modelos-datefield-tabla:
.. list-table:: Argumentos opcionales extra de DateField
    :widths: 20 80
   
    * - **Argumento**
      - **Descripción**
    * - ``auto_now``
      - Asigna automáticamente al campo un valor igual al momento en que se salva el objeto. Es útil para las
        marcas de tiempo "última modificación". Observar que *siempre* se usa la fecha actual; no es un
        valor por omisión que se pueda sobreescribir.
    * - ``auto_now_add``
      - Asigna automáticamente al campo un valor igual al momento en que se crea el objeto. Es útil para la
        creación de marcas de tiempo. Observar que *siempre* se usa la fecha actual; no es un valor
        por omisión que se pueda sobreescribir.

DateTimeField
-------------

Un campo de fecha y hora. Tiene las mismas opciones extra que ``DateField``.

EmailField
----------

Un ``CharField`` que chequea que el valor sea una dirección de email válida. No
acepta ``max_length``; su ``max_length`` se establece automáticamente en 75.

FileField
---------
.. warning:: No implementado actualmente ver bien la doc.

Un campo de captura de archivos. Tiene un argumento *requerido*, como se ve en
la :ref:`Tabla <doff-modelos-filefield-tabla>`.

.. _doff-modelos-filefield-tabla:
.. list-table:: Opciones extra de FileField
    :widths: 20 80
   
    * - **Argumento**
      - **Descripción**
    * - ``upload_to``
      - Una ruta del sistema de archivos local que se agregará a la configuración de ``MEDIA_ROOT``
        para determinar el resultado de la función de ayuda ``get_<fieldname>_url()``.

Esta ruta puede contener formato ``strftime``, que será reemplazada por la
fecha y hora de la captura del archivo (de manera que los archivos capturados no
llenen una ruta dada).

El uso de un ``FileField`` o un ``ImageField`` en un modelo requiere algunos
pasos:

    1. En el archivo de configuración (settings), es necesario definir
       ``MEDIA_ROOT`` con la ruta completa al directorio donde quieras que
       Django almacene los archivos subidos. (Por performance, estos archivos
       no se almacenan en la base de datos.) Definir ``MEDIA_URL`` con la URL
       pública base de ese directorio. Asegurarse de que la cuenta del usuario
       del servidor web tenga permiso de escritura en este directorio.

    2. Agregar el ``FileField`` o ``ImageField`` al modelo, asegurándose de
       definir la opción ``upload_to`` para decirle a Django a cual
       subdirectorio de ``MEDIA_ROOT`` debe subir los archivos.

    3. Todo lo que se va a almacenar en la base de datos es la ruta al archivo
       (relativa a ``MEDIA_ROOT``). Seguramente preferirás usar la facilidad de
       la función ``get_<fieldname>_url`` provista por Django. Por ejemplo, si
       tu ``ImageField`` se llama ``mug_shot``, puedes obtener la URL absoluta
       a tu image en un plantilla con ``{{object.get_mug_shot_url }}``.

Por ejemplo, digamos que tu ``MEDIA_ROOT`` es ``'/home/media'``, y
``upload_to`` es ``'photos/%Y/%m/%d'``. La parte ``'%Y/%m/%d'`` de
``upload_to`` es formato strftime; ``'%Y'`` es el año en cuatro dígitos,
``'%m'`` es el mes en dos digitos, y ``'%d'`` es el día en dos dígitos. Si
subes un archivo el 15 de enero de 2007, será guardado en
``/home/media/photos/2007/01/15``.

Si quieres recuperar el nombre en disco del archivo subido, o una URL que se
refiera a ese archivo, o el tamaño del archivo, puedes usar los métodos
``get_FIELD_filename()``, ``get_FIELD_url()``, y ``get_FIELD_size()``. Ver
el Apéndice C para una explicación completa de estos métodos.

.. note::

    Cualquiera sea la forma en que manejes tus archivos subidos, tienes que
    prestar mucha atención a donde los estás subiendo y que tipo de archivos
    son, para evitar huecos en la seguridad. *Valida todos los archivos
    subidos* para asegurarte que esos archivos son lo que piensas que son.

    Por ejemplo, si dejas que cualquiera suba archivos ciegamente, sin
    validación, a un directorio que está dentro de la raíz de documentos
    (*document root*) de tu servidor web, alguien podría subir un script CGI o
    PHP y ejecutarlo visitando su URL en tu sitio. ¡No permitas que pase!

FilePathField
-------------

Un campo cuyas opciones están limitadas a los nombres de archivo en una cierta 
ruta en el sistema de archivos. Tiene tres argumentos especiales, que se muestran
en la :ref:`Tabla <doff-modelos-filepathfield-tabla>`.

.. _doff-modelos-filepathfield-tabla:
.. list-table:: Opciones extra de FilePathField
    :widths: 20 80
   
    * - **Argumento**
      - **Descripción**
    * - ``path``
      - *Requerido*; la ruta absoluta en el sistema de archivos hacia el directorio del cual este
        ``FilePathField`` debe tomar sus opciones (ej.: ``"/home/images"``).
    * - ``match``
      - Opcional; una expresión regular como string, que ``FilePathField`` usará para filtrar los nombres
        de archivo. Observar que la regex será aplicada al nombre de archivo base, no a la ruta completa (ej.:
        ``"foo.*\.txt^"``, va a matchear con un archivo llamado ``foo23.txt``, pero no con ``bar.txt`` o
        ``foo23.gif``).
    * - ``recursive``
      - Opcional; ``true`` o ``false``. El valor por omisión es ``false``. Especifica si deben incluirse todos los
        subdirectorios de ``path``.

Por supuesto, estos argumentos pueden usarse juntos.

El único 'gotcha' potencial es que ``match`` se aplica sobre el nombre de
archivo base, no la ruta completa. De esta manera, este ejemplo::

    FilePathField({path:"/home/images", match:"foo.*", recursive:true})

va a matchear con ``/home/images/foo.gif`` pero no con
``/home/images/foo/bar.gif`` porque el  ``match`` se aplica al nombre de
archivo base (``foo.gif`` y ``bar.gif``).

FloatField
----------

Un numero de punto flotante, representado en JavaScript por una instancia de
``Number``. Tiene dos argumentos requeridos, que se muestran en la :ref:`Tabla <doff-modelos-floatfield-tabla>`.

.. _doff-modelos-floatfield-tabla:
.. list-table:: Opciones extra de FloatField
    :widths: 20 80
   
    * - **Argumento**
      - **Descripción**
    * - ``max_digits``
      - La cantidad máximo de dígitos permitidos en el número.
    * - ``decimal_places``
      - La cantidad de posiciones decimales a almacenar con el número.

Por ejemplo, para almacenar números hasta 999 con una resolución de dos
decimales, hay que usar::

    models.FloatField(..., max_digits=5, decimal_places=2)

Y para almacenar números hasta aproximadamente mil millones con una resolución
de diez dígitos decimales, hay que usar::

    models.FloatField(..., max_digits=19, decimal_places=10)

ImageField
----------
.. warning:: No este implementado actualmente ver bien la doc.

Similar a ``FileField``, pero valida que el objeto capturado sea una imagen
válida. Tiene dos argumentos opcionales extra, ``height_field`` y
``width_field``, que si se utilizan, serán auto-rellenados con la altura y el
ancho de la imagen cada vez que se guarde una instancia del modelo.

Además de los métodos especiales ``get_FIELD_*`` que están disponibles para
``FileField``, un ``ImageField`` tiene también los métodos
``get_FIELD_height()`` y ``get_FIELD_width()``. Éstos están documentados en el
:ref:`apendices-doff-dbapi`.

IntegerField
------------

Un entero.

IPAddressField
--------------

Una dirección IP, en formato string (ej.: ``"24.124.1.30"``).

NullBooleanField
----------------

Similar a ``BooleanField``, pero permite ``NULL`` como opción.
Usar éste en lugar de un ``BooleanField`` con ``null = true``.

PositiveIntegerField
--------------------

Similar a ``IntegerField``, pero debe ser positivo.

PositiveSmallIntegerField
-------------------------

Similar a ``PositiveIntegerField``, pero solo permite valores por debajo de un
límite. El valor máximo permitido para estos campos depende de la base de
datos, pero como las bases de datos tienen un tipo entero corto de 2 bytes, el
valor máximo positivo usualmente es 65,535.

SlugField
---------

"Slug" es un término de la prensa. Un *slug* es una etiqueta corta para algo,
que contiene solo letras, números, guiones bajos o simples. Generalmente se
usan en URLs.

De igual forma que en ``CharField``, puedes especificar ``max_length``. Si
``max_length`` no está especificado, el valor por omisión es de 50.

Un ``SlugField`` implica ``db_index=true`` debido a que son los se usan
principalmente para búsquedas en la base de datos.

SmallIntegerField
-----------------

Similar a ``IntegerField``, pero solo permite valores en un cierto rango
dependiente de la base de datos (usualmente -32,768 a +32,767).

TextField
---------

Un campo de texto de longitud ilimitada.

TimeField
---------

Un campo de hora. Acepta las mismas opciones de autocompletación de
``DateField`` y ``DateTimeField``.

URLField
--------

Un campo para una URL. Si la opción ``verify_exists`` es ``true`` (valor por
omisión), se chequea la existencia de la URL dada (la URL carga y no da una
respuesta 404).

Como los otros campos de caracteres, ``URLField`` toma el argumento
``max_length``. Si no se especifica, el valor por omisión es 200.

Opciones para todos los campos
==============================

Los siguientes argumentos están disponibles para todos los tipos de campo.
Todos son opcionales.

null
----

Si está en ``true``, se almacenaran valores vacíos como ``NULL`` en la base
de datos. El valor por omisión es ``false``.

Los valores de string nulo siempre se almacenan como strings vacíos, no como
``NULL``. ``null=true`` se debe utilizar solo para campos no-string, como enteros,
booleanos y fechas. En los dos casos, también es necesario establecer ``blank=true``
si se desea permitir valores vacíos en los formularios, ya que el parámetro ``null``
solo afecta el almacenamiento en la base de datos (ver la siguiente sección, titulada :ref:`blank <apendices-doff-modelos-blank>`).

Se debe evitar utilizar ``null`` en campos basados en string como ``CharField`` y
``TextField`` salvo que se tenga una excelente razón para hacerlo. Si un campo
basado en string tiene ``null=true``, eso significa que tiene dos valores
posibles para "sin datos": ``NULL`` y el string vacío. En la mayoría de los
casos, esto es redundante; la convención es usar el string vacío, no ``NULL``.

.. _apendices-doff-modelos-blank:

blank
-----

Si está en ``true``, está permitido que el campo esté en blanco. El valor por
omisión es ``false``.

Este es diferente de ``null``. ``null`` solo se relaciona con la
base de datos, mientras que ``blank`` está relacionado con la validación. Si
un campo tiene ``blank=true``, la validación permitirá la entrada de un valor vacío.
Si un campo tiene ``blank=false``, es un campo requerido.

choices
-------

Un arreglo conteniendo tuplas para usar como opciones para este campo.

Si esto está dado, el sistema de formualarios utilizará un cuadro
de selección en lugar del campo de texto estándar, y limitará las opciones a
las dadas.

Una lista de opciones se ve así:

    .. code-block:: javascript

        var YEAR_IN_SCHOOL_CHOICES = [
            ['FR', 'Freshman'],
            ['SO', 'Sophomore'],
            ['JR', 'Junior'],
            ['SR', 'Senior'],
            ['GR', 'Graduate'],
        ]

El primer elemento de cada tupla es el valor actual a ser almacenado.
El segundo elemento es el nombre legible por humanos para la opción.

La lista de opciones puede ser definida también como parte del modelo:

    .. code-block:: javascript

        var Foo = type('Foo', [ models.Model ], {
            GENDER_CHOICES: [
                ['M', 'Male'],
                ['F', 'Female']
            ],
            gender: new models.CharField({ max_length:1, choices:GENDER_CHOICES}),
            });

o fuera del modelo:

    .. code-block:: javascript

        var GENDER_CHOICES: [
                ['M', 'Male'],
                ['F', 'Female']
            ];
        var Foo = type ('Foo', [models.Model], {
            gender: new models.CharField({ max_length:1, choices:GENDER_CHOICES}),
            });

Para cada campo del modelo que tenga establecidas ``choices``, Se agregará
un método para recuperar el nombre legible por humanos para el valor actual del
campo. Ver :ref:`apendices-doff-dbapi` para más detalles.

.. _apendices-doff-modelos-dbcolumn:

db_column
---------

El nombre de la columna de la base de datos a usar para este campo. De no estar definido,
se utilizará el nombre del campo. Esto es útil cuando se está definiendo un modelo
sobre una base de datos existente.

Si el nombre de columna de la base de datos es una palabra reservada de SQL, o
contiene caracteres que no están permitidos en un nombre de variable, no hay problema.
Los nombres de columna y tabla son escapeados por comillas detrás de la escena.

db_index
--------

Si está en ``true``, Un índice es creado en la base de datos para esta
columna cuando cree la tabla.

default
-------

El valor por omisión del campo.

editable
--------

Si es ``false``, el campo no será editable en el  procesamiento de formularios.
El valor por omisión es ``true``.

help_text
---------

Texto de ayuda extra a ser mostrado bajo el campo en el formulario.
Es útil como documentación aunque el objeto no termine siendo representado en un formulario.

primary_key
-----------

Si es ``true``, este campo es la clave primaria del modelo.

Si no se especifica ``primary_key=true`` para ningún campo del modelo, se
agregará automáticamente este campo::

    id = new models.AutoField('ID', { primary_key: true });

Por lo tanto, no es necesario establecer ``primary_key=true`` en ningún campo,
salvo que se quiera sobreescribir el comportamiento por omisión de la clave
primaria.

``primary_key=true`` implica ``blank=false``, ``null=false``, y
``unique=true``. Solo se permite una clave primaria en un objeto.

radio_admin
-----------

Por omisión, la generacion de formularios usa una interfaz de cuadro de selección
(<select>) para campos que son ``ForeignKey`` o tienen ``choices``.
Si ``radio_admin`` es ``true``, un radio-button es utilizado en su lugar.

No utilice esto para un campo que no sea ``ForeignKey`` o no tenga ``choices``.

unique
------

Si es ``true``, el valor para este campo debe ser único en la tabla.

unique_for_date
---------------

Asignar como valor el nombre de un ``DateField`` o ``DateTimeField`` para
requerir que este campo sea único para el valor del campo tipo fecha, por
ejemplo:

    .. code-block:: javascript

        var Story = type('Story', [ models.Model ] {
            pub_date: new models.DateTimeField(),
            slug: new models.SlugField({unique_for_date:"pub_date"}),
            ...
        });

En este código, no se permitie la creación de dos historias con el mismo
slug publicados en la misma fecha. Esto difiere de usar la restricción
``unique_together`` en que solo toma en cuenta la fecha del campo ``pub_date``;
la hora no importa.

unique_for_month
----------------

Similar a ``unique_for_date``, pero requiere que el campo sea único con respecto
al mes del campo dado.

unique_for_year
---------------

Similar a ``unique_for_date`` y ``unique_for_month``, pero para el año.

verbose_name
------------

Cada tipo de campo, excepto ``ForeignKey``, ``ManyToManyField``, y
``OneToOneField``, toma un primer argumento posicional opcional -- un nombre
descriptivo --. Si el nombre descriptivo no está dado, se crea automáticamente
usando el nombre de atributo del campo, convirtiendo guiones bajos en espacios.

En este ejemplo, el nombre descriptivo es ``"Person's first name"``:

    .. code-block:: javascript

        first_name = new models.CharField("Person's first name", { max_length: 30 })

En este ejemplo, el nombre descriptivo es ``"first name"``:

    .. code-block:: javascript

        first_name = new models.CharField({maxlength: 30})

``ForeignKey``, ``ManyToManyField``, y ``OneToOneField`` requieren que el
primer argumento sea una clase del modelo, en este caso hay que usar
``verbose_name`` como argumento con nombre:

    .. code-block:: javascript

        poll = new models.ForeignKey(Poll, {verbose_name: "the related poll"})
        sites = new models.ManyToManyField(Site, {verbose_name: "list of sites"})
        place = new models.OneToOneField(Place, {verbose_name: "related place"})

La convención es no capitalizar la primera letra del ``verbose_name`` estas son pasadas a
mayúscula automáticamente cuando sea necesario.

Relaciones
==========

Es claro que el poder de las bases de datos se basa en relacionar tablas entre
sí. Los tres tipos de relaciones más comunes en las bases de datos estan
soportadas: muchos-a-uno, muchos-a-muchos, y uno-a-uno (utilizada indirectamente en la herencia).

Relaciones Muchos-a-Uno
-----------------------

El campo ``ForeignKey`` definie las relaciones muchos-a-uno. Se usa como
cualquier otro tipo ``Field``: incluyéndolo como un atributo en el modelo.

``ForeignKey`` requiere un argumento posicional: el tipo al cual se relaciona
el modelo.

Por ejemplo, si un modelo ``Car`` tiene un ``Manufacturer`` -- es decir, un
``Manufacturer`` fabrica múltiples autos pero cada ``Car`` tiene solo un
``Manufacturer`` -- la definición es:

    .. code-block:: javascript

        var Manufacturer = type('Manufacturer', [ models.Model ], {
            ...
        });

        var Car = type('Car', [ models.Model ], 
            manufacturer: new models.ForeignKey(Manufacturer),
            ...
        });

Para crear una relación *recursiva* -- un objeto que tiene una relación
muchos-a-uno con él mismo -- ``models.ForeignKey('this')``:

    .. code-block:: javascript

        var Employee = type('Employee', [ models.Model ], {
            manager: new models.ForeignKey('this'),
            ...
        });

Si se necesita crear una relación con un modelo que aún no se ha definido,
el nombre del modelo puede ser utilizado en lugar del objeto modelo:

    .. code-block:: javascript

        var Car = type('Car', [ models.Model ], {
            manufacturer: new models.ForeignKey('Manufacturer'),
            ...
        });

        var Manufacturer = type('Manufacturer', [ models.Model ], {
            ...
        });

Observar que de todas formas solo se pueden usar strings para hacer referencia a
modelos dentro del mismo archivo ``models.js`` -- no se pueden usar strings para
hacer referencias a un modelo en una aplicación diferente, o hacer referencia a
un modelo que ha sido requerido de cualquier otro lado.

Detrás de la escena, ``"_id"`` es agregado al nombre de campo para crear su
nombre de columna en la base de datos. En el ejemplo anterior, la tabla de la
base de datos correspondiente al modelo ``Car``, tendrá una columna
``manufacturer_id``. (Esto puede se puede cambiar explícitamente especificando
``db_column``; ver más arriba en la sección :ref:`db_column <apendices-doff-modelos-dbcolumn>`.) De todas formas, el
código nunca debe utilizar el nombre de la columna de la base de datos, salvo
que escribas SQL. Siempre se utilizaran los nombres de campo del modelo.

Se sugiere, pero no es requerido, que el nombre de un campo ``ForeignKey``
(``manufacturer`` en el ejemplo) sea el nombre del modelo en minúsculas. Igualmente
se puede poner cualquier nombre. Por ejemplo:

    .. code-block:: javascript

        var Car = type('Car', [ models.Model ], {
            company_that_makes_it: new models.ForeignKey(Manufacturer),
            // ...
        });

Los campos ``ForeignKey`` reciben algunos argumentos extra para definir como
debe trabajar la relación (ver :ref:`Tabla <doff-modelos-foreignkey-tabla>`). Todos son opcionales.

.. warning:: ver esta tabla hay opciones que no estan.

.. _doff-modelos-foreignkey-tabla:
.. list-table:: Opciones de ForeignKey
    :widths: 20 80
   
    * - **Argumento**
      - **Descripción**
    * - ``edit_inline``
      - Si no es ``false``, este objeto relacionado se edita "inline" en la página del objeto relacionado. Esto significa
        que el objeto no tendrá su propia interfaz de administración. Usa ``models.TABULAR`` o ``models.STACKED``,
        que designan si los objetos editables inline se muestran como una tabla o como una pila de conjuntos de campos,
        respectivamente.
    * - ``limit_choices_to``
      - Un diccionario para buscar argumentos y valores (ver el Apéndice C) que limita las opciones de administración
        disponibles para este objeto. Usa esto con funciones del módulo ``datetime`` de Python para limitar las opciones de
        fecha de los objetos. Por ejemplo::

            limit_choices_to: {'pub_date__lte': datetime.now}

        sólo permite la elección de objetos relacionados con ``pub_date`` anterior a la fecha/hora actual.

        En lugar de un diccionario, esto puede ser un objeto ``Q`` (ver Apéndice C) para consultas más complejas.

        No es compatible con ``edit_inline``.
    * - ``max_num_in_admin``
      - Para objetos editados inline, este es el número máximo de objetos relacionados a mostrar en la interfaz de
        administración.
        Por lo tanto, si una pizza puede tener como máximo diez ingredientes, ``max_num_in_admin=10`` asegurará que un
        usuario nunca ingresará más de diez ingredientes.

        Observar que esto no asegura que no se puedan crear más de diez ingredientes relacionados. Simplemente controla
        la interfaz de administración; no fortalece cosas a nivel de Python API o base de datos.
    * - ``min_num_in_admin``
      - La cantidad mínima de objetos relacionados que se muestran en la interfaz de administración. Normalmente,
        en el momento de la creación se muestran ``num_in_admin`` objetos inline , y en el momento de edición se muestran
        ``num_extra_on_change`` objetos en blanco además de todos los objetos relacionados preexistentes. De todas formas,
        nunca se mostrarán menos de ``min_num_in_admin`` objetos relacionados.
    * - ``num_extra_on_change``
      - La cantidad de campos en blanco extra de objetos relacionados a mostrar en el momento de realizar cambios.
    * - ``num_in_admin``
      - El valor por omisión de la cantidad de objetos inline a mostrar en la página del objeto en el momento de agregar.
    * - ``raw_id_admin``
      - Solo muestra un campo para ingresar un entero en lugar de un menú desplegable. Esto es útil cuando se relaciona con
        un tipo de objeto que tiene demasiadas filas para que sea práctico utilizar una caja de selección.
        
        No es utilizado con ``edit_inline``.
    * - ``related_name``
      - El nombre a utilizar para la relación desde el objeto relacionado de hacia éste objeto. Para más información,
        ver el Apéndice C.
    * - ``to_field``
      -  El campo en el objeto relacionado con el cual se establece la relación. Por omisión, Django usa la clave primaria del
         objeto relacionado.

Relaciones Muchos-a-Muchos
--------------------------

Para definir una relación muchos-a-muchos, ``ManyToManyField`` es el campo. Al igual que
``ForeignKey``, ``ManyToManyField`` requiere un argumento posicional: el tipo al cual se relaciona el modelo.

Por ejemplo, si una ``Pizza`` tiene múltiples objetos ``Topping`` -- es decir,
un ``Topping`` puede estar en múltiples pizzas y cada ``Pizza`` tiene múltiples
ingredientes (toppings) -- debe representarse así:

    .. code-block:: javascript

        var Topping = type('Topping', [ models.Model ], {
            ...
        });

        var Pizza = type('Pizza', [ models.Model ], {
            toppings: new models.ManyToManyField(Topping),
            ...
        });

Como sucede con ``ForeignKey``, una relación de un objeto con sí mismo puede
definirse usando el string ``'this'`` en lugar del nombre del modelo, y se pueden
hacer referencias a modelos que todavía no se definieron usando un string que
contenga el nombre del modelo. De todas formas solo se pueden usar strings para
hacer referencia a modelos dentro del mismo archivo ``models.js`` -- no se puede
usar un string para hacer referencia a un modelo en una aplicación diferente, o
hacer referencia a un modelo que ha sido importado de cualquier otro lado.

Se sugiere, pero no es requerido, que el nombre de un campo ``ManyToManyField``
(``toppings``, en el ejemplo) sea un término en plural que describa al conjunto
de objetos relacionados con el modelo.

Detrás de la escena, se crea una tabla join intermedia para representar la
relación muchos-a-muchos.

No importa cual de los modelos tiene el  ``ManyToManyField``, pero es necesario
que esté en uno de los modelos -- no en los dos.

Los objetos ``ManyToManyField`` toman algunos argumentos extra para definir como
debe trabajar la relación (ver :ref:`Tabla <doff-modelos-manytomanyfield-tabla>`). Todos son opcionales.

.. warning:: ver esta tabla hay opciones que no estan.

.. _doff-modelos-manytomanyfield-tabla:
.. list-table:: Opciones de ManyToManyField
    :widths: 20 80
   
    * - **Argumento**
      - **Descripción**
    * - ``related_name``
      - El nombre a utilizar para la relación desde el objeto relacionado hacia este objeto. Ver Apéndice C para más
        información..
    * - ``filter_interface``
      - Usa una interfaz de "filtro" JavaScript agradable y discreta en lugar de la menos cómoda ``<select multiple>`` en el
        formulario administrativo de este objeto. El valos debe ser ``models.HORIZONTAL`` o ``models.VERTICAL`` (es decir, la
        interfaz debe apilarse horizontal o verticalmente).
    * - ``limit_choices_to``
      - Ver la descripción en ``ForeignKey``.
    * - ``symmetrical``
      - Solo utilizado en la definición de ``ManyToManyField`` sobre sí mismo. Considera el siguiente modelo:
    
        .. code-block:: javascript

            var Person = type('Person', [ models.Model ], {
                friends: new models.ManyToManyField("this")
            });

        Cuando Django procesa este modelo, identifica que tiene un ``ManyToManyField`` sobre sí mismo, y como resultado, no
        agrega un atributo ``person_set`` a la clase ``Person``.
        En lugar de eso, se asumen que el ``ManyToManyField`` es simétrico -- esto es, si yo soy tu amigo, entonces tu eres
        mi amigo.

        Si no deseas la simetría en las relaciones ``ManyToMany`` con ``self``, establece ``symmetrical`` en ``false``. Esto
        forzará a Django a agregar el descriptor para la relación inversa, permitiendo que las relaciones ``ManyToMany`` sean
        asimétricas.
    * - ``db_table``
      - El nombre de la tabla a crear para almacenar los datos de la relación muchos-a-muchos. Si no se provee, Django asumirá
        un nombre por omisión basado en los nombres de las dos tablas a ser vinculadas.

Opciones de los Metadatos del Modelo
====================================

Los metadatos específicos de un modelo viven en un ``Object Meta`` definido en
el cuerpo del modelo:

    .. code-block:: javascript

        var Book = type('Book', [ models.Model ], {
            title: new models.CharField({max_length:100}),

            Meta: {
                // model metadata options go here
                ...
            }
        });

Los metadatos del modelo son "cualquier cosa que no sea un campo", como
opciones de ordenamiento, etc.

Las secciones que siguen presentan una lista de todas las posibles ``Meta``
opciones. Ninguna de estas opciones es requerida. Agregar ``Meta`` a un
modelo es completamente opcional.

db_table
--------

El nombre de la tabla de la base de datos a usar para el modelo.

Si no se define el nombre de la tabla de la base de datos es derivado automáticamente
a partir del nombre del modelo y la aplicación que lo contiene. Un nombre de tabla de 
base de datos de un modelo se construye uniendo la etiqueta de la aplicación del modelo
-- el nombre que tiene la aplicacion -- con el nombre del modelo, con un guión bajo
entre ellos.

Por ejemplo, para la aplicación  ``books``, un modelo definido como ``Book`` tendrá
una tabla en la base de datos llamada ``book_books``.

Para sobreescribir el nombre de la tabla de la base de datos, se debe usar el parámetro
``db_table`` dentro de ``Meta``:

    .. code-block:: javascript

        var Book = type('Book', [ models.Model ], {
            ...

            Meta: {
                db_table: 'things_to_read'
            }
        });

Si el nombre de tabla de base de datos es una palabra reservada de SQL, o
contiene caracteres que no están permitidos en los nombres de variable, no hay problema. 
Los nombres de tabla y de columna son escapeados con comillas al generar el SQL.

get_latest_by
-------------

El nombre de un  ``DateField`` o ``DateTimeField`` del modelo. Esto especifica
el campo a utilizar por omisión en el método ``latest()`` del ``Manager`` del
modelo.

Aquí hay un ejemplo:

    .. code-block:: javascript

        var CustomerOrder = type('CustomerOrder' ,[ models.Model ], {
            order_date: new models.DateTimeField(),
            ...

            Meta: {
                get_latest_by: "order_date"
            }
        });

Ver :ref:`apendices-doff-dbapi` para más información sobre el método ``latest()``.

order_with_respect_to
---------------------

Marca este objeto como "ordenable" con respecto al campo dado. Esto se utiliza
casi siempre con objetos relacionados para permitir que puedan ser ordenados
respecto a un objeto padre. Por ejemplo, si un ``Answer`` se relaciona a un
objeto ``Question``, y una pregunta tiene más de una respuesta, y el orden de
las respuestas importa:

    .. code-block:: javascript

        var Answer = type('Answer', [ models.Model ], {
            question: new models.ForeignKey(Question),
            ...

            Meta: {
                order_with_respect_to: 'question'
            }
        });

ordering
--------

El ordenamiento por omisión del objeto, utilizado cuando se obtienen listas de
objetos:

    .. code-block:: javascript

        var Book = type('Book', [ models.Model ], {
            title: new models.CharField({maxlength: 100}),

            Meta: {
                ordering: ['title']
            }
        });

Esto es una arreglo de strings. Cada string es un nombre de campo con un
prefijo opcional ``-``, que indica orden descendente. Los campos sin un ``-``
precedente se ordenarán en forma ascendente. Use el string ``"?"`` para ordenar
al azar.

Por ejemplo, para ordenar por un campo ``title`` en orden ascendente::

    ordering: ['title']

Para ordenar por ``title`` en orden descendente::

    ordering: ['-title']

Para ordenar por ``title`` en orden descendente, y luego por ``author`` en
orden ascendente::

    ordering: ['-title', 'author']

unique_together
---------------

Conjuntos de nombres de campo que tomados juntos deben ser únicos:

    .. code-block:: javascript

        var Employee = type('Employee', [ models.Model ], {
            department: new models.ForeignKey(Department),
            extension: new models.CharField({max_length: 10}),
            ...

            Meta: {
                unique_together: [["department", "extension"]]
            }
        });

Esto es un arreglo de arreglos de campos que deben ser únicos cuando se consideran
juntos. Es usado en la validacion de formularios y se refuerza a
nivel de base de datos (esto es, se incluyen las sentencias ``UNIQUE``
apropiadas en la sentencia ``CREATE TABLE``).

verbose_name
------------

Un nombre legible por humanos para el objeto, en singular:

    .. code-block:: javascript

        var CustomerOrder = type('CustomerOrder', [ models.Model ], {
            order_date: new models.DateTimeField(),
            ...

            Meta: {
                verbose_name: "order"
            }
        });
    
Si no se define, se utilizará una versión adaptada del nombre del modelo,
en la cual ``CamelCase`` se convierte en ``camel case``.

verbose_name_plural
-------------------

El nombre del objeto en plural:

    .. code-block:: javascript

        var Sphynx = type('Sphynx', [ models.Model ], {
            ...

            Meta: {
                verbose_name_plural: "sphynges"
            }
        });

Si no se define, se agregará una "s" al final del ``verbose_name``.

Managers
========

Un ``Manager`` es la interfaz a través de la cual se proveen las operaciones
de consulta de la base de datos a los modelos. Existe al menos un ``Manager``
para cada modelo en una aplicación.

La forma en que trabajan los tipos ``Manager`` está documentada en el :ref:`apendices-doff-dbapi`.
Esta sección trata específicamente las opciones del modelo que personaliza el
comportamiento del ``Manager``.

Nombres de Manager
------------------

Por omisión, se agrega un ``Manager`` llamado ``objects`` a cada tipo de
modelo. De todas formas, si se quiere usar ``objects`` como nombre
de campo, o usar un nombre distinto de ``objects`` para el ``Manager``,
se puede renombrar en cada uno de los modelos. Para renombrar el ``Manager``
para un modelo dato, define un atributo de clase de tipo ``models.Manager()``
en ese modelo, por ejemplo:

    .. code-block:: javascript

        var models = require(doff.db.models.base');

        var Person = type('Person', [ models.Model ], {
            ...

            people: new models.Manager(),
        });

Usando este modelo de ejemplo, ``Person.objects`` generará una excepción
``AttributeError`` (dado que ``Person`` no tiene un atributo ``objects``), pero
``Person.people.all()`` devolverá una lista de todos los objetos ``Person``.

Managers Personalizados
-----------------------

Se puede utilizar un ``Manager`` personalizado en un modelo en particular
extendiendo el tipo base ``Manager`` e instanciando un ``Manager``
personalizado.

Hay dos razones por las que se puede querer personalizar un ``Manager``: para
agregar métodos extra al ``Manager``, y/o para modificar el ``QuerySet``
inicial que devuelve el ``Manager``.

Agregando Métodos Extra al Manager
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Agregar métodos extra al ``Manager`` es la forma preferida de agregar
funcionalidad  a nivel de tabla a los modelos. (Para funcionalidad a nivel de
registro -- esto es, funciones que actúan sobre una instancia simple de un
objeto modelo -- se deben usar métodos del modelo (ver :ref:`metodos del modelo <apendices-doff-modelos-metodos>`),
no métodos de ``Manager`` personalizados.)

Un método ``Manager`` personalizado puede retornar cualquier cosa que se necesite.
No tiene que retornar un ``QuerySet``.

Por ejemplo, este ``Manager`` personalizado ofrece un método ``with_counts()``,
que retorna una lista de todos los objetos ``OpinionPoll``, cada uno con un
atributo extra ``num_responses`` que es el resultado de una consulta agregada:

    .. code-block:: javascript

        require('doff.db.base', 'connection');

        var PollManager = type('PollManager', [ models.Manager ], {

            with_counts: function() {
                var cursor = connection.cursor();
                cursor.execute("
                    SELECT p.id, p.question, p.poll_date, COUNT(*)
                    FROM polls_opinionpoll p, polls_response r
                    WHERE p.id = r.poll_id
                    GROUP BY 1, 2, 3
                    ORDER BY 3 DESC");
                var result_list = [];
                for each (var row in cursor.fetchall()) {
                    var p = new this.model({ id: row[0], question: row[1], poll_date: row[2]});
                    p.num_responses = row[3];
                    result_list.append(p);
                }
                return result_list;
            }
        });

        var OpinionPoll = type(OpinionPoll, [ models.Model ], {
            question: new models.CharField({ max_length: 200 }),
            poll_date: new models.DateField(),
            objects: new PollManager()
        });

        var Response = type('Response', [ models.Model ], {
            poll: new models.ForeignKey(Poll),
            person_name: new models.CharField({ max_length: 50 }),
            response: new models.TextField()
        });

En este ejemplo, se puede usar ``OpinionPoll.objects.with_counts()`` para
retornar la lista de objetos ``OpinionPoll`` con el atributo ``num_responses``.

Otra cosa a observar en este ejemplo es que los métodos de un ``Manager``
pueden acceder a ``this.model`` para obtener el tipo del modelo a la cual están
anexados.

Modificando los QuerySets iniciales del Manager
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Un ``QuerySet`` base de un ``Manager`` devuelve todos los objetos en el sistema.
Por ejemplo, usando este modelo:

    .. code-block:: javascript

        var Book = type('Book', [ models.Model ], {
            title: new models.CharField({ max_length: 100 }),
            author: new models.CharField({ max_length: 50 })
        });

la sentencia ``Book.objects.all()`` retornará todos los libros de la base de
datos.

Se puede sobreescribir el ``QuerySet`` base, sobreescribiendo el método
``Manager.get_query_set()``. ``get_query_set()`` debe retornar un ``QuerySet``
con las propiedades requeridas.

Por ejemplo, el siguiente modelo tiene *dos* managers -- uno que devuelve todos
los objetos, y otro que retorna solo los libros de Roald Dahl:

    .. code-block:: javascript

        // First, define the Manager subclass.
        var DahlBookManager = type('DahlBookManager', [ models.Manager ], {
            get_query_set: function() {
                return super(Manager, this).get_query_set().filter({ author: 'Roald Dahl' });
        });

        // Then hook it into the Book model explicitly.
        var Book = type('Book', [ models.Model ], {
            title: new models.CharField({ max_length: 100 }),
            author: new models.CharField({ max_length: 50 }),

            objects: new models.Manager(), // The default manager.
            dahl_objects: new DahlBookManager() // The Dahl-specific manager.
        });

Con este modelo de ejemplo, ``Book.objects.all()`` retornará todos los libros
de la base de datos, pero ``Book.dahl_objects.all()`` solo retornará aquellos
escritos por Roald Dahl.

Por supuesto, como ``get_query_set()`` devuelve un objeto ``QuerySet``, se puede
usar ``filter()``, ``exclude()``, y todos los otro métodos de ``QuerySet``
sobre él. Por lo tanto, estas sentencias son todas legales::

    Book.dahl_objects.all();
    Book.dahl_objects.filter({ title: 'Matilda' });
    Book.dahl_objects.count();

Este ejemplo también señala otra técnica interesante: usar varios managers en
el mismo modelo. Se pueden agregar tantas instancias de ``Manager()`` como se requieran.
Esta es una manera fácil de definir "filters" comunes para tus modelos. Aquí
hay un ejemplo:

    .. code-block:: javascript

        var MaleManager = type('MaleManager', [ models.Manager ], {
            get_query_set: function() {
                return super(Manager, this).get_query_set().filter({ sex: 'M' });
            }
        });
        
        var FemaleManager = type('FemaleManager', [ models.Manager ], {
            get_query_set: function() {
                return super(Manager, this).get_query_set().filter({ sex: 'F' });
            }
        });

        var Person = type('Person', [ models.Model ], {
            first_name: new models.CharField({ max_length: 50 }),
            last_name: new models.CharField({ max_length: 50 }),
            sex: new models.CharField({ max_length: 1, choices: [['M', 'Male'], ['F', 'Female']] }),
            people: new models.Manager(),
            men: new MaleManager(),
            women: new FemaleManager(),
        });

Este ejemplo permite consultar ``Person.men.all()``, ``Person.women.all()``,
y ``Person.people.all()``, con los resultados predecibles.

Si se usan objetos ``Manager`` personalizados, el primer ``Manager``
que se encuentre (en el orden en el que están definidos en el modelo) tiene
un status especial. Se interpreta el primer ``Manager`` definido en una
clase como el ``Manager`` por omisión, por lo que generalmente es una buena idea que el
primer ``Manager`` esté relativamente sin filtrar. En el último ejemplo, el
manager ``people`` está definido primero -- por lo cual es el ``Manager`` por
omisión.

.. _apendices-doff-modelos-metodos:

Métodos de Modelo
=================

La forma de agregar funcionalidad es definiendo métodos en un modelo, de este modo
se personaliza a nivel de registro. Mientras que los métodos ``Manager`` están
pensados para hacer cosas a nivel de tabla, los métodos de modelo deben actual en
una instancia particular del modelo.

Esta es una técnica valiosa para mantener la lógica del negocio en un sólo
lugar: el modelo. Por ejemplo, este modelo tiene algunos métodos personalizados::

    .. code-block:: javascript

        var Person = type('Person', [ models.Model ], {
            first_name: new models.CharField({ max_length: 50 }),
            last_name: new models.CharField({ max_length: 50 }),
            birth_date: new models.DateField(),
            address: new models.CharField({ max_length: 100 }),
            city: new models.CharField({ max_length: 50 }),
        
            baby_boomer_status: function() {
                /*Returns the person's baby-boomer status.*/
                if (Date(1945, 8, 1) <= this.birth_date <= Date(1964, 12, 31))
                    return "Baby boomer";
                if (this.birth_date < Date(1945, 8, 1))
                    return "Pre-boomer";
                return "Post-boomer";
            },

            get full_name() {
                /*Returns the person's full name.*/
                return '%s %s'.subs(this.first_name, this.last_name);
            }
        });

El último método en este ejemplo es un *getter* -- un atributo implementado
por código personalizado. Los getter son un un truco ingenioso
agregado en JavaScript 1.6; puedes leer más acerca de ellas en
.. Diego cambiar este link
http://www.python.org/download/releases/2.2/descrintro/#property.

Existen también un puñado de métodos de modelo que tienen un significado
"especial" para JavaScript o Protopy. Estos métodos se describen en las secciones
que siguen.

__str__
-------

``__str__()`` es un "método mágico" de Protopy que define lo que debe ser
devuelto si llamas a ``string()`` sobre el objeto. Se usa ``string(obj)`` en varios
lugares, particularmente como el valor mostrado para hacer el render de un
objeto y como el valor insertado en un plantilla cuando muestra un objeto.
Por eso, siempre se debe retornar un string agradable y legible por humanos 
en el ``__str__`` de un objeto.
A pesar de que esto no es requerido, es altamente recomendado.

Aquí hay un ejemplo:

    .. code-block:: javascript

        var Person = type('Person', [ models.Model ], {
            first_name: new models.CharField({ max_length: 50 }),
            last_name: new models.CharField({ max_length: 50 }),

            __str__: function() {
                return '%s %s'.subs(this.first_name, this.last_name);
            }
        });

Ejecutando SQL personalizado
----------------------------

Se pueden escribir escribir sentencias SQL personalizadas en métodos
personalizados de modelo y métodos a nivel de módulo. El objeto
``doff.db.base.connection`` representa la conexión actual a la base de datos. Para
usarla, se invoca a ``connection.cursor()`` para obtener un objeto cursor. Después,
se llama a ``cursor.execute(sql, [params])`` para ejecutar la SQL, y
``cursor.fetchone()`` o ``cursor.fetchall()`` para devolver las filas
resultantes:

    .. code-block:: javascript

        my_custom_sql: function() {
            require('doff.db.base', 'connection');
            var cursor = connection.cursor()
            cursor.execute("SELECT foo FROM bar WHERE baz = %s", [this.baz]);
            row = cursor.fetchone();
            return row;
        }

``connection`` y ``cursor`` implementan en su mayor parte la DB-API estándar.
Si no estás familiarizado con la DB-API, observa que la sentencia SQL en
``cursor.execute()`` usa placeholders, ``"%s"``, en lugar de agregar los
parámetros directamente dentro de la SQL. Si usas esta técnica, la biblioteca
subyacente de base de datos automáticamente agregará comillas y secuencias de
escape a tus parámetros según sea necesario.

Una nota final: Si todo lo que quieres hacer es usar una cláusula ``WHERE``
personalizada, puedes usar los argumentos ``where``, ``tables``, y ``params``
de la API estándar de búsqueda. Ver Apéndice C.

Sobreescribiendo los Métodos por omisión del Modelo
---------------------------------------------------

Como se explica en el :ref:`apendices-doff-dbapi`, cada modelo obtiene algunos métodos
automáticamente -- los más notables son ``save()`` y ``delete()``. Estos se pueden
sobreescribir para alterar el comportamiento.

Un caso de uso clásico de sobreescritura de los métodos incorporados es cuando se
necesita que suceda algo cuando guardas un objeto, por ejemplo:

    .. code-block:: javascript

        var Blog = type('Blog', [ models.Model ], {
            name: new models.CharField({ maxlength: 100 }),
            tagline: new models.TextField(),

            save: function() {
                do_something();
                super(models.Model, this).save() // Call the "real" save() method.
                do_something_else();
            }
        });

También se puede evitar el guardado:

    .. code-block:: javascript

        var Blog = type('Blog', [ models.Model ], {
            name: new models.CharField({ maxlength: 100 }),
            tagline: new models.TextField(),

            save: function() {
                if (this.name == "Yoko Ono's blog")
                    return; // Yoko shall never have her own blog!
                else
                    super(models.Model, this).save() // Call the "real" save() method
            }
        });